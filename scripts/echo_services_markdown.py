#!/bin/env python
""" Usage

    cd osparc-simcore
    ./scripts/echo_services_markdown.py >services.md
"""

import sys
from collections.abc import Iterable
from datetime import datetime
from pathlib import Path
from typing import Final

CURRENT_FILE = Path(sys.argv[0] if __name__ == "__main__" else __file__).resolve()
CURRENT_DIR = CURRENT_FILE.parent

_URL_PREFIX: Final[
    str
] = "https://raw.githubusercontent.com/ITISFoundation/osparc-simcore/refs/heads/master"


_DOCKER_IMAGE_SIZE: Final[
    str
] = "[![Docker Image Size](https://img.shields.io/docker/image-size/itisfoundation/{0})](https://hub.docker.com/r/itisfoundation/{0}/tags)"


def to_row(values: Iterable):
    return f"| {'|'.join(map(str, values))} |\n"


def generate_markdown_table(openapi_files: list[tuple[Path, Path]]) -> str:
    title = ("service", "rest API", "", "docker")
    lines = ["-" * 10] * len(title)

    table = to_row(title)
    table += to_row(lines)

    aliases: dict[str, str] = {"web": "webserver"}

    for service_name, file_path in openapi_files:
        redoc_url = f"https://redocly.github.io/redoc/?url={_URL_PREFIX}/{file_path}"
        swagger_url = f"https://petstore.swagger.io/?url={_URL_PREFIX}/{file_path}"
        # SEE https://shields.io/badges
        openapi_badges = "".join(
            (
                f"[![ReDoc](https://img.shields.io/badge/OpenAPI-ReDoc-85ea2d?logo=openapiinitiative)]({redoc_url}) "
                f"[![Swagger UI](https://img.shields.io/badge/OpenAPI-Swagger_UI-85ea2d?logo=swagger)]({swagger_url})",
            )
        )
        docker_badges = "".join(
            (_DOCKER_IMAGE_SIZE.format(aliases.get(f"{service_name}") or service_name),)
        )
        table += to_row(
            (
                service_name,
                f"[{file_path}](./{file_path})",
                openapi_badges,
                docker_badges,
            )
        )
    return table


if __name__ == "__main__":

    repo_base_path = CURRENT_DIR.parent.resolve()
    services_path = repo_base_path / "services"

    openapi_files_found = sorted(
        (file.relative_to(services_path).parents[-2], file.relative_to(repo_base_path))
        for file in services_path.rglob("openapi.*")
        if file.suffix in {".json", ".yaml", ".yml"}
    )

    markdown_table = generate_markdown_table(openapi_files_found)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    print(
        f"<!--- Auto generated by {CURRENT_FILE.relative_to(repo_base_path)} on {now} ---->"
    )
    print("# services")
    print()
    print(markdown_table)
