#!/bin/bash

FOLDER_CHECKS=".py .pylintrc"

before_install() {
    if [ -n "$(bash ops/travis/helpers/test_for_changes $FOLDER_CHECKS)" ];
    then
        bash ops/travis/helpers/show_system_versions
    fi
}

install() {
    if [ -n "$(bash ops/travis/helpers/test_for_changes $FOLDER_CHECKS)" ];
    then
        pip install --upgrade pip wheel setuptools && pip3 --version
        pip3 install packages/s3wrapper[test]
        pip3 install packages/simcore-sdk[test]
        pushd services/director; pip3 install -r requirements/ci.txt; popd
        pip3 install packages/director-sdk/python
        pushd services/web/server; pip3 install -r requirements/ci.txt; popd
        pushd services/storage; pip3 install -r requirements/dev.txt; popd
        pip3 install -r api/tests/requirements.txt
        pip3 install -r services/apihub/tests/requirements.txt
    fi
}

before_script() {
    if [ -n "$(bash ops/travis/helpers/test_for_changes $FOLDER_CHECKS)" ];
    then
        pip freeze
        pylint --version
    fi
}

script() {
    if [ -n "$(bash ops/travis/helpers/test_for_changes $FOLDER_CHECKS)" ];
    then
        make pylint
    else
        echo "No changes detected. Skipping unit-testing of $FOLDERS_CHECKS ."
    fi
}

after_success() {
    if [ -n "$(bash ops/travis/helpers/test_for_changes $FOLDER_CHECKS)" ];
    then
        echo "linting successful"
    fi
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "'$1' is not a known function name" >&2
  exit 1
fi
