#!/bin/bash

# die on non 0 exit code
set -e

FOLDER_CHECKS=(js eslintrc json)

before_install() {
    if bash ops/travis/helpers/test_for_changes "${FOLDER_CHECKS[@]}";
    then
        bash ops/travis/helpers/show_system_versions
    fi
}

install() {
    if bash ops/travis/helpers/test_for_changes "${FOLDER_CHECKS[@]}";
    then
        cd services/web/client
        npm install
        npx qx contrib install
    fi
}

before_script() {
    if bash ops/travis/helpers/test_for_changes "${FOLDER_CHECKS[@]}";
    then
        npx eslint --version
    fi
}

script() {
    if bash ops/travis/helpers/test_for_changes "${FOLDER_CHECKS[@]}";
    then
	npm install
        npm run linter
        pushd services/web/client
        echo "Building build version"
        npx qx compile --machine-readable --target=build
        echo "Building source version"
        npx qx serve --machine-readable --target=source  --listen-port=8080 &
        SERVER_PID=$!
        echo "Waiting for build to complete"
        while ! nc -z localhost 8080; do
          sleep 1 # wait for 10 second before check again
        done
        node source-output/resource/qxl/testtapper/run.js --diag --verbose http://localhost:8080/source-output/testtapper/
        kill $SERVER_PID
        popd
    else
        echo "No changes detected. Skipping linting of node.js."
    fi

}

after_success() {
    # prepare documentation site ...
    git clone --depth 1 https://github.com/ITISFoundation/itisfoundation.github.io.git
    rm -rf itisfoundation.github.io/.git

    # if we have old cruft hanging around, we should remove all this will
    # only trigger once
    if [ -d itisfoundation.github.io/transpiled ]; then
      rm -rf itisfoundation.github.io/*
    fi

    # add the default homepage
    cp -rp docs/webdocroot/* itisfoundation.github.io

    # add our build
    if [ -d services/web/client/build-output ]; then
      rm -rf itisfoundation.github.io/frontend
      cp -rp services/web/client/build-output itisfoundation.github.io/frontend
    fi
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "'$1' is not a known function name" >&2
  exit 1
fi
