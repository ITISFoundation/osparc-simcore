dist: bionic
env:
  global:
    - DOCKER_COMPOSE_VERSION=1.25.0
    - DOCKER_VERSION=5:19.03.5~3-0~ubuntu-bionic
    # - DOCKER_BUILDKIT=1
    # - COMPOSE_DOCKER_CLI_BUILD=1
services:
  - docker
addons:
  apt:
    packages:
      - docker-ce
      - expect-dev # for unbuffer: brings color back into travis logs

stages:
  - name: build / unit-testing
    if: tag IS blank
  - name: integration-testing / system-testing
    if: tag IS blank
  - deployment

jobs:
  include:
    # build images ----------------------------------------------------------------------
    - stage: build / unit-testing
      # in pull request we do not have credentials to push, so this is useless
      if: NOT type = pull_request AND tag IS blank
      name: build simcore images
      sudo: required
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
      before_install:
        - sudo bash ci/travis/build/test-images before_install
      install:
        - unbuffer bash ci/travis/build/test-images install
      before_script:
        - unbuffer bash ci/travis/build/test-images before_script
      script:
        - unbuffer bash ci/travis/build/test-images script
      after_success:
        - unbuffer bash ci/travis/build/test-images after_success
      after_failure:
        - unbuffer bash ci/travis/build/test-images after_failure
      deploy:
        - provider: script
          skip_cleanup: true
          script: unbuffer bash ci/deploy/dockerhub-test-images
          on:
            all_branches: true

    # frontend testing ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: front end testing
      language: node_js
      node_js:
        - "10"
      addons:
        apt:
          packages:
            - libgconf-2-4

      before_install:
        - bash ci/travis/unit-testing/frontend before_install
      install:
        - bash ci/travis/unit-testing/frontend install
      before_script:
        - bash ci/travis/unit-testing/frontend before_script
      script:
        - bash ci/travis/unit-testing/frontend script
      after_success:
        - bash ci/travis/unit-testing/frontend after_success
      after_failure:
        - bash ci/travis/unit-testing/frontend after_failure

      deploy:
        # https://docs.travis-ci.com/user/deployment/pages/
        provider: pages
        target-branch: master
        # Set in travis-ci.org dashboard, marked secure
        github-token: $GH_PAGES_TOKEN
        skip-cleanup: true
        keep-history: false
        local-dir: itisfoundation.github.io
        repo: ITISFoundation/itisfoundation.github.io
        verbose: true
        on:
          repo: ITISFoundation/osparc-simcore
          branch: master

    # test python, webserver ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: webserver
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/webserver before_install
      install:
        - unbuffer bash ci/travis/unit-testing/webserver install
      before_script:
        - unbuffer bash ci/travis/unit-testing/webserver before_script
      script:
        - unbuffer bash ci/travis/unit-testing/webserver script
      after_success:
        - unbuffer bash ci/travis/unit-testing/webserver after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/webserver after_failure

    # test python, catalog ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: catalog
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/catalog before_install
      install:
        - unbuffer bash ci/travis/unit-testing/catalog install
      before_script:
        - unbuffer bash ci/travis/unit-testing/catalog before_script
      script:
        - unbuffer bash ci/travis/unit-testing/catalog script
      after_success:
        - unbuffer bash ci/travis/unit-testing/catalog after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/catalog after_failure

    # test python, director ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: director
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/director before_install
      install:
        - unbuffer bash ci/travis/unit-testing/director install
      before_script:
        - unbuffer bash ci/travis/unit-testing/director before_script
      script:
        - unbuffer bash ci/travis/unit-testing/director script
      after_success:
        - unbuffer bash ci/travis/unit-testing/director after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/director after_failure

    # test python, sidecar ----------------------------------------------------------------------
    # TODO: activate when sidecar tests are READY!
    # - stage: build / unit-testing
    #   name: sidecar
    #   language: python
    #   python:
    #     - "3.6"
    #   sudo: required
    #   cache: pip
    #   before_install:
    #     - sudo bash ci/travis/unit-testing/sidecar before_install
    #   install:
    #     - bash ci/travis/unit-testing/sidecar install
    #   before_script:
    #     - bash ci/travis/unit-testing/sidecar before_script
    #   script:
    #     - bash ci/travis/unit-testing/sidecar script
    #   after_success:
    #     - bash ci/travis/unit-testing/sidecar after_success
    #   after_failure:
    #     - bash ci/travis/unit-testing/sidecar after_failure

    # test python, service-library ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: service-library
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/service-library before_install
      install:
        - bash ci/travis/unit-testing/service-library install
      before_script:
        - bash ci/travis/unit-testing/service-library before_script
      script:
        - bash ci/travis/unit-testing/service-library script
      after_success:
        - bash ci/travis/unit-testing/service-library after_success
      after_failure:
        - bash ci/travis/unit-testing/service-library after_failure

    # test python, service-library ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: simcore-sdk
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/simcore-sdk before_install
      install:
        - bash ci/travis/unit-testing/simcore-sdk install
      before_script:
        - bash ci/travis/unit-testing/simcore-sdk before_script
      script:
        - bash ci/travis/unit-testing/simcore-sdk script
      after_success:
        - bash ci/travis/unit-testing/simcore-sdk after_success
      after_failure:
        - bash ci/travis/unit-testing/simcore-sdk after_failure

    # test python, storage ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: storage
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/storage before_install
      install:
        - unbuffer bash ci/travis/unit-testing/storage install
      before_script:
        - unbuffer bash ci/travis/unit-testing/storage before_script
      script:
        - unbuffer bash ci/travis/unit-testing/storage script
      after_success:
        - unbuffer bash ci/travis/unit-testing/storage after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/storage after_failure

    # test python, api ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: api
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/api before_install
      install:
        - unbuffer bash ci/travis/unit-testing/api install
      before_script:
        - unbuffer bash ci/travis/unit-testing/api before_script
      script:
        - unbuffer bash ci/travis/unit-testing/api script
      after_success:
        - unbuffer bash ci/travis/unit-testing/api after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/api after_failure

    # test python, linting ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: python linting
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/python-linting before_install
      install:
        - unbuffer bash ci/travis/unit-testing/python-linting install
      before_script:
        - unbuffer bash ci/travis/unit-testing/python-linting before_script
      script:
        - unbuffer bash ci/travis/unit-testing/python-linting script
      after_success:
        - unbuffer bash ci/travis/unit-testing/python-linting after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/python-linting after_failure

    # integrate webserver in swarm -------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: webserver in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/integration-testing/webserver before_install
      install:
        - unbuffer bash ci/travis/integration-testing/webserver install
      before_script:
        - unbuffer bash ci/travis/integration-testing/webserver before_script
      script:
        - unbuffer bash ci/travis/integration-testing/webserver script
      after_success:
        - unbuffer bash ci/travis/integration-testing/webserver after_success
      after_failure:
        - unbuffer bash ci/travis/integration-testing/webserver after_failure

    # integrate simcore-sdk in swarm -------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: simcore-sdk in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/integration-testing/simcore-sdk before_install
      install:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk install
      before_script:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk before_script
      script:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk script
      after_success:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk after_success
      after_failure:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk after_failure

    # system testing swarm deploy ----------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: swarm deploy
      sudo: required
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ci/travis/system-testing/swarm-deploy before_install
      install:
        - unbuffer bash ci/travis/system-testing/swarm-deploy install
      before_script:
        - unbuffer bash ci/travis/system-testing/swarm-deploy before_script
      script:
        - unbuffer bash ci/travis/system-testing/swarm-deploy script
      after_success:
        - unbuffer bash ci/travis/system-testing/swarm-deploy after_success
      after_failure:
        - unbuffer bash ci/travis/system-testing/swarm-deploy after_failure

    # system testing e2e testing -----------------------------------------------------------------
    # https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-on-travis-ci
    - stage: integration-testing / system-testing
      name: e2e testing
      language: node_js
      node_js:
        - "10"
      sudo: required
      services:
        - xvfb
      addons:
        apt:
          packages:
            - libnss3 # This is required to run new chrome on old trusty
            - expect-dev # for unbuffer: brings color back into travis logs
            - docker-ce
            - python3-venv
      notifications:
        email: false
      cache:
        directories:
          - node_modules
      before_install:
        - sudo bash ci/travis/system-testing/e2e before_install
      install:
        - unbuffer bash ci/travis/system-testing/e2e install
      before_script:
        - unbuffer bash ci/travis/system-testing/e2e before_script
      script:
        - unbuffer bash ci/travis/system-testing/e2e script
      after_success:
        - unbuffer bash ci/travis/system-testing/e2e after_success
      after_failure:
        - unbuffer bash ci/travis/system-testing/e2e after_failure

    - stage: deployment
      name: master
      if: branch = master
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=master
      git:
        depth: false
      script: echo "Deploy master"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-deploy
          on:
            branch: master
    - stage: deployment
      name: staging
      if: branch = staging
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=staging
      git:
        depth: false
      script: echo "Deploy staging"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-deploy
          on:
            branch: staging
    - stage: deployment
      name: production/release
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=staging
        - GIT_TAG=${TRAVIS_TAG}
      git:
        depth: false
      script: echo "Deploy production version $TRAVIS_TAG"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-release
          on:
            all_branches: true
            tags: true
            condition: $TRAVIS_TAG =~ ^v[0-9]+.[0-9]+.[0-9]+$
notifications:
  email:
    on_success: never
    on_failure: always
