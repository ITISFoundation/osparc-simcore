dist: xenial
env:
  global:
    - DOCKER_COMPOSE_VERSION=1.23.2
services:
  - docker
addons:
  apt:
    packages:
      - docker-ce
      - expect-dev # for unbuffer: brings color back into travis logs

stages:
  - build / unit-testing
  - integration-testing
  - system-testing
  - deployment

jobs:
  include:
    # build images ----------------------------------------------------------------------
    - stage: build / unit-testing
      # in pull request we do not have credentials to push, so this is useless
      if: NOT type = pull_request AND tag IS blank
      name: build simcore images
      sudo: required
      before_install:
        - sudo bash ops/travis/build/test-images.sh before_install
      install:
        - unbuffer bash ops/travis/build/test-images.sh install
      before_script:
        - unbuffer bash ops/travis/build/test-images.sh before_script
      script:
        - unbuffer bash ops/travis/build/test-images.sh script
      after_success:
        - unbuffer bash ops/travis/build/test-images.sh after_success
      after_failure:
        - unbuffer bash ops/travis/build/test-images.sh after_failure
      deploy:
        - provider: script
          skip_cleanup: true
          script: bash ops/travis/deploy/test-images.sh
          on:
            all_branches: true

    # frontend testing ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: front end testing
      language: node_js
      node_js:
        - "10"
      addons:
        apt:
          packages:
            - libgconf-2-4

      before_install:
        - bash ops/travis/unit-testing/frontend.sh before_install
      install:
        - bash ops/travis/unit-testing/frontend.sh install
      before_script:
        - bash ops/travis/unit-testing/frontend.sh before_script
      script:
        - bash ops/travis/unit-testing/frontend.sh script
      after_success:
        - bash ops/travis/unit-testing/frontend.sh after_success
      after_failure:
        - bash ops/travis/unit-testing/frontend.sh after_failure

      deploy:
        # https://docs.travis-ci.com/user/deployment/pages/
        provider: pages
        target-branch: master
        # Set in travis-ci.org dashboard, marked secure
        github-token: $GH_PAGES_TOKEN
        skip-cleanup: true
        keep-history: false
        local-dir: itisfoundation.github.io
        repo: ITISFoundation/itisfoundation.github.io
        verbose: true
        on:
          repo: ITISFoundation/osparc-simcore
          branch: master

    # test python, webserver ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: webserver
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/webserver.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/webserver.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/webserver.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/webserver.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/webserver.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/webserver.sh after_failure

    # test python, director ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: director
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/director.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/director.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/director.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/director.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/director.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/director.sh after_failure

    # test python, sidecar ----------------------------------------------------------------------
    # TODO: activate when sidecar tests are READY!
    # - stage: unit testing
    #   name: sidecar
    #   language: python
    #   python:
    #     - "3.6"
    #   sudo: required
    #   cache: pip
    #   before_install:
    #     - sudo bash ops/travis/unit-testing/sidecar before_install
    #   install:
    #     - bash ops/travis/unit-testing/sidecar install
    #   before_script:
    #     - bash ops/travis/unit-testing/sidecar before_script
    #   script:
    #     - bash ops/travis/unit-testing/sidecar script
    #   after_success:
    #     - bash ops/travis/unit-testing/sidecar after_success

    # test python, simcore-sdk ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: simcore-sdk
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/simcore-sdk.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/simcore-sdk.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/simcore-sdk.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/simcore-sdk.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/simcore-sdk.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/simcore-sdk.sh after_failure

    # test python, service-library ----------------------------------------------------------------------
    - stage: unit testing
      name: service-library
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/service-library before_install
      install:
        - bash ops/travis/unit-testing/service-library install
      before_script:
        - bash ops/travis/unit-testing/service-library before_script
      script:
        - bash ops/travis/unit-testing/service-library script
      after_success:
        - bash ops/travis/unit-testing/service-library after_success

    # test python, storage ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: storage
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/storage.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/storage.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/storage.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/storage.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/storage.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/storage.sh after_failure

    # test python, apihub ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: apihub
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/apihub.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/apihub.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/apihub.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/apihub.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/apihub.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/apihub.sh after_failure

    # test python, linting ----------------------------------------------------------------------
    - stage: build / unit-testing
      if: tag IS blank
      name: python linting
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ops/travis/unit-testing/python-linting.sh before_install
      install:
        - unbuffer bash ops/travis/unit-testing/python-linting.sh install
      before_script:
        - unbuffer bash ops/travis/unit-testing/python-linting.sh before_script
      script:
        - unbuffer bash ops/travis/unit-testing/python-linting.sh script
      after_success:
        - unbuffer bash ops/travis/unit-testing/python-linting.sh after_success
      after_failure:
        - unbuffer bash ops/travis/unit-testing/python-linting.sh after_failure

    # integrate webserver in swarm -------------------------------------------------------------
    - stage: integration-testing
      if: tag IS blank
      name: webserver in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/integration-testing/webserver.sh before_install
      install:
        - unbuffer bash ops/travis/integration-testing/webserver.sh install
      before_script:
        - unbuffer bash ops/travis/integration-testing/webserver.sh before_script
      script:
        - unbuffer bash ops/travis/integration-testing/webserver.sh script
      after_success:
        - unbuffer bash ops/travis/integration-testing/webserver.sh after_success
      after_failure:
        - unbuffer bash ops/travis/integration-testing/webserver.sh after_failure

    # integrate simcore-sdk in swarm -------------------------------------------------------------
    - stage: integration-testing
      if: tag IS blank
      name: simcore-sdk in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ops/travis/integration-testing/simcore-sdk.sh before_install
      install:
        - unbuffer bash ops/travis/integration-testing/simcore-sdk.sh install
      before_script:
        - unbuffer bash ops/travis/integration-testing/simcore-sdk.sh before_script
      script:
        - unbuffer bash ops/travis/integration-testing/simcore-sdk.sh script
      after_success:
        - unbuffer bash ops/travis/integration-testing/simcore-sdk.sh after_success
      after_failure:
        - unbuffer bash ops/travis/integration-testing/simcore-sdk.sh after_failure

    - stage: system-testing
      if: tag IS blank
      sudo: required
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ops/travis/system-testing/build_and_run.sh before_install
      install:
        - unbuffer bash ops/travis/system-testing/build_and_run.sh install
      before_script:
        - unbuffer bash ops/travis/system-testing/build_and_run.sh before_script
      script:
        - unbuffer bash ops/travis/system-testing/build_and_run.sh script
      after_success:
        - unbuffer bash ops/travis/system-testing/build_and_run.sh after_success
      after_failure:
        - unbuffer bash ops/travis/system-testing/build_and_run.sh after_failure

    - stage: deployment
      name: master
      if: branch = master
      git:
        depth: false
      script: echo "Deploy master"
      deploy:
        - provider: script
          script: bash ops/travis/deploy/master.sh
          on:
            branch: master
    - stage: deployment
      name: staging
      if: branch = staging
      git:
        depth: false
      script: echo "Deploy staging"
      deploy:
        - provider: script
          script: bash ops/travis/deploy/staging.sh
          on:
            branch: staging
    - stage: deployment
      name: production/release
      git:
        depth: false
      script: echo "Deploy production version $TRAVIS_TAG"
      deploy:
        - provider: script
          script: ops/travis/deploy/production.sh
          on:
            all_branches: true
            tags: true
            condition: $TRAVIS_TAG =~ ^v[0-9]+.[0-9]+.[0-9]+$
notifications:
  email:
    on_success: never
    on_failure: always
