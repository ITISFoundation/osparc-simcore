dist: bionic
env:
  global:
    - DOCKER_COMPOSE_VERSION=1.25.0
    - DOCKER_VERSION=5:19.03.5~3-0~ubuntu-bionic
    # - DOCKER_BUILDKIT=1
    # - COMPOSE_DOCKER_CLI_BUILD=1
services:
  - docker
addons:
  apt:
    packages:
      - docker-ce
      - expect-dev # for unbuffer: brings color back into travis logs

stages:
  - name: build / unit-testing
    if: tag IS blank
  - name: integration-testing / system-testing
    if: tag IS blank
  - deployment

jobs:
  include:
    # build images ----------------------------------------------------------------------
    - stage: build / unit-testing
      # in pull request we do not have credentials to push, so this is useless
      if: NOT type = pull_request AND tag IS blank
      name: build simcore images
      sudo: required
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
      before_install:
        - sudo bash ci/travis/build/test-images.bash before_install
      install:
        - unbuffer bash ci/travis/build/test-images.bash install
      before_script:
        - unbuffer bash ci/travis/build/test-images.bash before_script
      script:
        - unbuffer bash ci/travis/build/test-images.bash script
      after_success:
        - unbuffer bash ci/travis/build/test-images.bash after_success
      after_failure:
        - unbuffer bash ci/travis/build/test-images.bash after_failure
      deploy:
        - provider: script
          skip_cleanup: true
          script: unbuffer bash ci/deploy/dockerhub-test-images.bash
          on:
            all_branches: true

    # frontend testing ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: front end testing
      language: node_js
      node_js:
        - "10"
      addons:
        apt:
          packages:
            - libgconf-2-4

      before_install:
        - bash ci/travis/unit-testing/frontend.bash before_install
      install:
        - bash ci/travis/unit-testing/frontend.bash install
      before_script:
        - bash ci/travis/unit-testing/frontend.bash before_script
      script:
        - bash ci/travis/unit-testing/frontend.bash script
      after_success:
        - bash ci/travis/unit-testing/frontend.bash after_success
      after_failure:
        - bash ci/travis/unit-testing/frontend.bash after_failure

      deploy:
        # https://docs.travis-ci.com/user/deployment/pages/
        provider: pages
        target-branch: master
        # Set in travis-ci.org dashboard, marked secure
        github-token: $GH_PAGES_TOKEN
        skip-cleanup: true
        keep-history: false
        local-dir: itisfoundation.github.io
        repo: ITISFoundation/itisfoundation.github.io
        verbose: true
        on:
          repo: ITISFoundation/osparc-simcore
          branch: master

    # test python, webserver ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: webserver
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/webserver.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/webserver.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/webserver.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/webserver.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/webserver.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/webserver.bash after_failure

    # test python, api-gateway ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: api-gateway
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/api-gateway.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/api-gateway.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/api-gateway.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/api-gateway.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/api-gateway.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/api-gateway.bash after_failure

    # test python, catalog ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: catalog
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/catalog.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/catalog.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/catalog.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/catalog.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/catalog.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/catalog.bash after_failure

    # test python, director ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: director
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/director.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/director.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/director.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/director.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/director.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/director.bash after_failure

    # test python, service-library ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: service-library
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/service-library.bash before_install
      install:
        - bash ci/travis/unit-testing/service-library.bash install
      before_script:
        - bash ci/travis/unit-testing/service-library.bash before_script
      script:
        - bash ci/travis/unit-testing/service-library.bash script
      after_success:
        - bash ci/travis/unit-testing/service-library.bash after_success
      after_failure:
        - bash ci/travis/unit-testing/service-library.bash after_failure

    # test python, service-library ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: simcore-sdk
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/simcore-sdk.bash before_install
      install:
        - bash ci/travis/unit-testing/simcore-sdk.bash install
      before_script:
        - bash ci/travis/unit-testing/simcore-sdk.bash before_script
      script:
        - bash ci/travis/unit-testing/simcore-sdk.bash script
      after_success:
        - bash ci/travis/unit-testing/simcore-sdk.bash after_success
      after_failure:
        - bash ci/travis/unit-testing/simcore-sdk.bash after_failure

    # test python, storage ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: storage
      language: python
      python:
        - "3.6"
      sudo: required
      services:
        - docker
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/storage.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/storage.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/storage.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/storage.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/storage.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/storage.bash after_failure

    # test python, api ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: api
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/api.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/api.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/api.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/api.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/api.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/api.bash after_failure

    # test python, linting ----------------------------------------------------------------------
    - stage: build / unit-testing
      name: python linting
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ci/travis/unit-testing/python-linting.bash before_install
      install:
        - unbuffer bash ci/travis/unit-testing/python-linting.bash install
      before_script:
        - unbuffer bash ci/travis/unit-testing/python-linting.bash before_script
      script:
        - unbuffer bash ci/travis/unit-testing/python-linting.bash script
      after_success:
        - unbuffer bash ci/travis/unit-testing/python-linting.bash after_success
      after_failure:
        - unbuffer bash ci/travis/unit-testing/python-linting.bash after_failure

    # integrate webserver in swarm -------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: webserver in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/integration-testing/webserver.bash before_install
      install:
        - unbuffer bash ci/travis/integration-testing/webserver.bash install
      before_script:
        - unbuffer bash ci/travis/integration-testing/webserver.bash before_script
      script:
        - unbuffer bash ci/travis/integration-testing/webserver.bash script
      after_success:
        - unbuffer bash ci/travis/integration-testing/webserver.bash after_success
      after_failure:
        - unbuffer bash ci/travis/integration-testing/webserver.bash after_failure

    # integrate simcore-sdk in swarm -------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: simcore-sdk in swarm
      language: python
      python:
        - "3.6"
      sudo: required
      cache: pip
      before_install:
        - sudo bash ci/travis/integration-testing/simcore-sdk.bash before_install
      install:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk.bash install
      before_script:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk.bash before_script
      script:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk.bash script
      after_success:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk.bash after_success
      after_failure:
        - unbuffer bash ci/travis/integration-testing/simcore-sdk.bash after_failure

    # system testing swarm deploy ----------------------------------------------------------------
    - stage: integration-testing / system-testing
      name: swarm deploy
      sudo: required
      language: python
      python:
        - "3.6"
      cache: pip
      before_install:
        - sudo bash ci/travis/system-testing/swarm-deploy.bash before_install
      install:
        - unbuffer bash ci/travis/system-testing/swarm-deploy.bash install
      before_script:
        - unbuffer bash ci/travis/system-testing/swarm-deploy.bash before_script
      script:
        - unbuffer bash ci/travis/system-testing/swarm-deploy.bash script
      after_success:
        - unbuffer bash ci/travis/system-testing/swarm-deploy.bash after_success
      after_failure:
        - unbuffer bash ci/travis/system-testing/swarm-deploy.bash after_failure

    # system testing e2e testing -----------------------------------------------------------------
    # https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-on-travis-ci
    - stage: integration-testing / system-testing
      name: e2e testing
      language: node_js
      node_js:
        - "10"
      sudo: required
      services:
        - xvfb
      addons:
        apt:
          packages:
            - libnss3 # This is required to run new chrome on old trusty
            - expect-dev # for unbuffer: brings color back into travis logs
            - docker-ce
            - python3-venv
      notifications:
        email: false
      cache:
        directories:
          - node_modules
      before_install:
        - sudo bash ci/travis/system-testing/e2e.bash before_install
      install:
        - unbuffer bash ci/travis/system-testing/e2e.bash install
      before_script:
        - unbuffer bash ci/travis/system-testing/e2e.bash before_script
      script:
        - unbuffer bash ci/travis/system-testing/e2e.bash script
      after_success:
        - unbuffer bash ci/travis/system-testing/e2e.bash after_success
      after_failure:
        - unbuffer bash ci/travis/system-testing/e2e.bash after_failure

    - stage: deployment
      name: master
      if: branch = master
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=master
      git:
        depth: false
      script: echo "Deploy master"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-deploy.bash
          on:
            branch: master
    - stage: deployment
      name: staging
      if: branch = staging
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=staging
      git:
        depth: false
      script: echo "Deploy staging"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-deploy.bash
          on:
            branch: staging
    - stage: deployment
      name: production/release
      env:
        - OWNER=${TRAVIS_REPO_SLUG%/*}
        - TAG_PREFIX=staging
        - GIT_TAG=${TRAVIS_TAG}
      git:
        depth: false
      script: echo "Deploy production version $TRAVIS_TAG"
      deploy:
        - provider: script
          script: unbuffer bash ci/deploy/dockerhub-release.bash
          on:
            all_branches: true
            tags: true
            condition: $TRAVIS_TAG =~ ^v[0-9]+.[0-9]+.[0-9]+$
notifications:
  email:
    on_success: never
    on_failure: always
