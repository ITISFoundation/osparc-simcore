#!/bin/bash
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
# https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-on-travis-ci
set -euo pipefail
IFS=$'\n\t'

# in case it's a Pull request, the env are never available, default to itisfoundation to get a maybe not too old version for caching
export DOCKER_IMAGE_TAG=$(exec ci/github/helpers/build_docker_image_tag)

install() {
    # show environ
    env
    # pull simcore
    make pull-version || ((make pull-cache || true) && make build tag-version)
    make info-images
    # configure simcore for testing with a private registry
    make .env
    # disable email verification
    echo WEBSERVER_LOGIN_REGISTRATION_INVITATION_REQUIRED=0 >>.env
    echo WEBSERVER_LOGIN_REGISTRATION_CONFIRMATION_REQUIRED=0 >>.env
    # set up insecure internal registry
    echo REGISTRY_AUTH=False >> .env
    echo REGISTRY_SSL=False >> .env
    echo REGISTRY_URL=registry:5000 >> .env
    # disable registry caching to ensure services are fetched
    echo REGISTRY_CACHING=False >> .env
    # add host name to the insecure registry
    sudo bash -c "echo '127.0.0.1 registry' >> /etc/hosts"
    # add insecure registry into docker daemon and restart daemon
    echo "------------------------ before modifying docker daemon"
    sudo cat /etc/docker/daemon.json
    sudo bash -c "echo '{\"insecure-registries\": [\"registry:5000\"]}' >> /etc/docker/daemon.json"
    echo "------------------------ after modifying docker daemon"
    sudo cat /etc/docker/daemon.json
    sudo service docker restart
    # start simcore
    make up-version


    # install testing framework
    pushd tests/e2e
    make install
    make wait-for-services

    # prepare registry
    make transfer-images-to-registry
}

test() {
    pushd tests/e2e; make test; popd
}

clean_up() {
    docker images
    make down
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  echo "'$1' is not a known function name" >&2
  exit 1
fi
