openapi: 3.0.0
info:
  description: API definition for simcore-service-storage service
  version: 0.2.1
  title: simcore-service-storage API
  contact:
    name: IT'IS Foundation
    email: support@simcore.io
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE
servers:
  - description: API server
    url: "/v0"
  - description: Development server
    url: http://{host}:{port}/{basePath}
    variables:
      host:
        default: "localhost"
      port:
        default: "8080"
      basePath:
        enum:
          - v0
        default: v0
paths:
  /:
    get:
      summary: Service health-check endpoint
      description: Some general information on the API and state of the service behind
      operationId: health_check
      responses:
        "200":
          description: Service information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /status:
    get:
      summary: checks status of self and connected services
      operationId: get_status
      responses:
        "200":
          description: returns app status check

  /check/{action}:
    post:
      summary: Test checkpoint to ask server to fail or echo back the transmitted data
      parameters:
        - in: path
          required: true
          name: action
          schema:
            type: string
            default: "echo"
            enum: ["fail", "echo"]
        - in: query
          name: data
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Fake"
      responses:
        "200":
          description: Echoes response based on action
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FakeEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations:
    get:
      summary: Lists available storage locations
      operationId: get_storage_locations
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "List of available storage locations"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileLocationArrayEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations/{location_id}/datasets:
    get:
      summary: Lists all dataset's metadata
      operationId: get_datasets_metadata
      parameters:
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "list of dataset meta-datas"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetMetaDataArrayEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations/{location_id}/files/metadata:
    get:
      summary: Lists all file's metadata
      operationId: get_files_metadata
      parameters:
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
        - name: uuid_filter
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "list of file meta-datas"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataArrayEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations/{location_id}/datasets/{dataset_id}/metadata:
    get:
      summary: Get dataset metadata
      operationId: get_files_metadata_dataset
      parameters:
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: dataset_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "list of file meta-datas"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataArrayEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations/{location_id}/files/{fileId}/metadata:
    get:
      summary: Get file metadata
      operationId: get_file_metadata
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Returns file metadata"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
    patch:
      summary: Update file metadata
      operationId: update_file_meta_data
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: location_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FileMetaData"
      responses:
        "200":
          description: "Returns file metadata"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /locations/{location_id}/files/{fileId}:
    get:
      summary: Gets download link for file at location
      operationId: download_file
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Returns presigned link"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedLinkEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
    put:
      summary: Returns upload link or performs copy operation to datcore
      operationId: upload_file
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
        - name: extra_location
          in: query
          required: false
          schema:
            type: string
        - name: extra_source
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: "Returns presigned link"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedLinkEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
    delete:
      summary: Deletes file
      operationId: delete_file
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: string
        - name: location_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "204":
          description: everything is OK, but there is no content to return
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /simcore-s3/files/metadata:search:
    post:
      summary: Returns metadata for all files matching a pattern
      operationId: search_files_starting_with
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
        - name: startswith
          description: matches starting string of the file_uuid
          in: query
          schema:
            type: string
            default: ""
      responses:
        "200":
          description: list of matching files found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataArrayEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /simcore-s3/folders:
    post:
      summary: Deep copies of all data from source to destination project in s3
      operationId: copy_folders_from_project
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  $ref: "#/components/schemas/Project"
                destination:
                  $ref: "#/components/schemas/Project"
                nodes_map:
                  type: object
                  description: maps source and destination node uuids
                  additionalProperties:
                    type: string
      responses:
        "201":
          description: Data from destination project copied and returns project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /simcore-s3/folders/{folder_id}:
    delete:
      summary: Deletes all objects within a node_id or within a project_id if node_id is omitted
      operationId: delete_folders_of_project
      parameters:
        - name: folder_id
          in: path
          required: true
          schema:
            type: string
        - name: node_id
          in: query
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: string
      responses:
        "204":
          description: folder has been successfully deleted

  /files/{file_id}:soft-copy:
    post:
      summary: Copy as soft link
      operationId: copy_as_soft_link
      parameters:
        - name: file_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - link_id
              properties:
                link_id:
                  type: string
      responses:
        "200":
          description: "Returns link metadata"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetaDataEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"
components:
  schemas:
    HealthCheckEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/HealthCheck"
        error:
          nullable: true
          default: null

    HealthCheck:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
        api_version:
          type: string
        version:
          type: string
      example:
        name: "simcore-director-service"
        status: SERVICE_RUNNING
        api_version: 0.1.0-dev+NJuzzD9S
        version: 0.1.0-dev+N127Mfv9H

    ErrorEnveloped:
      # - notice that data is defaulted to null
      #
      type: object
      required:
        - data
        - error
      properties:
        data:
          nullable: true
          default: null
        error:
          $ref: "#/components/schemas/Error"

    Error:
      #  - Normally transmitted as a response from server to client
      #  - can exchage log messages between server and client. Possible applications:
      #     - e.g. client side can render a widget to display messages logged to 'user'
      #  - contains meta-information to allow client programatically understand the error. Possible applications:
      #     - e.g. metadata can serialize an exception in server that can be reproduced in client side
      #
      type: object
      properties:
        logs:
          description: log messages
          type: array
          items:
            $ref: "#/components/schemas/LogMessage"
        errors:
          description: errors metadata
          type: array
          items:
            $ref: "#/components/schemas/ErrorItem"
        status:
          description: HTTP error code
          type: integer
      example:
        BadRequestError:
          logs:
            - message: "Requested information is incomplete or malformed"
              level: ERROR
            - message: "Invalid email and password"
              level: ERROR
              logger: USER
          errors:
            - code: "InvalidEmail"
              message: "Email is malformed"
              field: email
            - code: "UnsavePassword"
              message: "Password is not secure"
              field: pasword
          status: 400

    ErrorItem:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Typically the name of the exception that produced it otherwise some known error code
        message:
          type: string
          description: Error message specific to this item
        resource:
          type: string
          description: API resource affected by this error
        field:
          type: string
          description: Specific field within the resource

    LogMessageEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/LogMessage"
        error:
          nullable: true
          default: null

    LogMessage:
      # - logger can be use as a way for the client to filter messages.
      # - E.g. logger naming can be hierarchical, and all including "*.user.*"
      #   are displayed as a flash message in the front-end
      #
      type: object
      properties:
        level:
          description: log level
          type: string
          default: INFO
          enum:
            - DEBUG
            - WARNING
            - INFO
            - ERROR
        message:
          description: log message. If logger is USER, then it MUST be human readable
          type: string
        logger:
          description: name of the logger receiving this message
          type: string
      required:
        - message
      example:
        message: "Hi there, Mr user"
        level: INFO
        logger: user-logger

    FakeEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/Fake"
        error:
          nullable: true
          default: null

    Fake:
      type: object
      required:
        - path_value
        - query_value
        - body_value
      properties:
        path_value:
          type: string
        query_value:
          type: string
        body_value:
          type: object
          additionalProperties: true
      example:
        path_value: foo
        query_value: bar
        body_value:
          key1: value1
          key2: value2

    FileLocationArrayEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/FileLocationArray"
        error:
          nullable: true
          default: null

    FileLocationArray:
      type: array
      items:
        $ref: "#/components/schemas/FileLocation"

    FileLocationEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/FileLocation"
        error:
          nullable: true
          default: null

    FileLocation:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
      example:
        filename: "simcore.s3"
        id: 0

    DatasetMetaDataArrayEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/DatasetMetaDataArray"
        error:
          nullable: true
          default: null

    DatasetMetaDataEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/DatasetMetaData"
        error:
          nullable: true
          default: null

    DatasetMetaData:
      type: object
      properties:
        dataset_id:
          type: string
        display_name:
          type: string
      example:
        dataset_uuid: "N:id-aaaa"
        display_name: "simcore-testing"

    DatasetMetaDataArray:
      type: array
      items:
        $ref: "#/components/schemas/DatasetMetaData"

    FileMetaDataEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/FileMetaData"
        error:
          nullable: true
          default: null

    FileMetaData:
      type: object
      properties:
        file_uuid:
          type: string
        location_id:
          type: string
        location:
          type: string
        bucket_name:
          type: string
        object_name:
          type: string
        project_id:
          type: string
        project_name:
          type: string
        node_id:
          type: string
        node_name:
          type: string
        file_name:
          type: string
        user_id:
          type: string
        user_name:
          type: string
        file_id:
          type: string
        raw_file_path:
          type: string
        display_file_path:
          type: string
        created_at:
          type: string
        last_modified:
          type: string
        file_size:
          type: integer
        parent_id:
          type: string
        entity_tag:
          type: string

    FileMetaDataArrayEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/FileMetaDataArray"
        error:
          nullable: true
          default: null

    FileMetaDataArray:
      type: array
      items:
        $ref: "#/components/schemas/FileMetaData"

    PresignedLinkEnveloped:
      type: object
      required:
        - data
        - error
      properties:
        data:
          $ref: "#/components/schemas/PresignedLink"
        error:
          nullable: true
          default: null

    PresignedLink:
      type: object
      required:
        - link
      properties:
        link:
          type: string
      example:
        link: "example_link"

    Project:
      $ref: "../common/schemas/project.yaml#/components/schemas/ProjectIn"

  responses:
    DefaultErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorEnveloped"
