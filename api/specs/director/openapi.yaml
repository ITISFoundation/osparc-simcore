openapi: "3.0.0"
info:
  description: This is the oSparc's director API
  version: 0.1.0
  title: Director API
  contact:
    name: IT'IS Foundation
    email: support@simcore.com
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE

servers:
  - description: Development server
    url: http://{host}:{port}/{version}
    variables:
      host:
        default: "localhost"
      port:
        default: "8080"
      version:
        default: "v0"
        enum:
          - "v0"
  - description: Production server
    url: http://director:{port}/{version}
    variables:
      port:
        default: "8080"
      version:
        default: "v0"
        enum:
          - "v0"

# tags are used for organizing operations
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
  - name: users
    description: Operations available to regular users

paths:
  /:
    get:
      tags:
        - users
      summary: Service health-check endpoint
      description: Some general information on the API and state of the service behind
      operationId: root_get
      responses:
        "200":
          description: Service information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheckEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

  /services:
    get:
      tags:
        - users
      summary: Lists available services in the oSparc platform
      description: Lists available services in the oSparc platform
      operationId: services_get
      parameters:
        - $ref: "#/components/parameters/ServiceType"
      responses:
        "200":
          description: Success, returns the list of available services
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesEnveloped"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

  /services/{service_key}/{service_version}:
    get:
      tags:
        - users
      summary: Returns details of the selected service if available in the oSparc platform
      description: Returns details of the selected service if available in the oSparc platform
      operationId: services_by_key_version_get
      parameters:
        - $ref: "#/components/parameters/ServiceKeyPath"
        - $ref: "#/components/parameters/ServiceVersionPath"
      responses:
        "200":
          description: Success, returns the details of the service
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicesEnveloped"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

  /service_extras/{service_key}/{service_version}:
    get:
      tags:
        - users
      summary: Returns the service's details which should be hidden from the user defined as extras.
      description: Currently returns the node_requirements an array of resoruces needed for scheduling.
      operationId: service_extras_by_key_version_get
      parameters:
        - $ref: "#/components/parameters/ServiceKeyPath"
        - $ref: "#/components/parameters/ServiceVersionPath"
      responses:
        "200":
          description: Success, returns an object containing details hidden from the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceExtrasEnveloped"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

  /running_interactive_services:
    get:
      tags:
        - users
      summary: Returns a list of interactive services
      operationId: running_interactive_services_list_get
      parameters:
        - in: query
          name: user_id
          required: false
          schema:
            type: string
        - in: query
          name: project_id
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Returns the running services instances
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunningServicesEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
    post:
      tags:
        - users
      summary: Starts an interactive service in the oSparc platform
      operationId: running_interactive_services_post
      parameters:
        - $ref: "#/components/parameters/UserId"
        - $ref: "#/components/parameters/ProjectId"
        - $ref: "#/components/parameters/ServiceKey"
        - $ref: "#/components/parameters/ServiceVersion"
        - $ref: "#/components/parameters/AssignmentUuid"
        - $ref: "#/components/parameters/ServiceBasePath"
      responses:
        "201":
          description: Succesfully created the service in the oSparc platform. Returns the location where the service runs.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunningServiceEnveloped"
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "409":
          description: A service with the same uuid already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

  /running_interactive_services/{service_uuid}:
    get:
      tags:
        - users
      summary: Succesfully returns if a service with the defined uuid is up and running
      description: Succesfully returns if a service with the defined uuid is up and running
      operationId: running_interactive_services_get
      parameters:
        - $ref: "#/components/parameters/ServiceUuid"
      responses:
        "200":
          description: OK service exists and runs. Returns service location.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunningServiceEnveloped"
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
    delete:
      tags:
        - users
      summary: Stops and removes an interactive service from the oSparc platform
      description: Stops and removes an interactive service from the oSparc platform
      operationId: running_interactive_services_delete
      parameters:
        - $ref: "#/components/parameters/ServiceUuid"
      responses:
        "204":
          description: Succesfully stopped and removed the service from the oSparc platform
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorEnveloped"

components:
  parameters:
    UserId:
      in: query
      name: user_id
      description: The ID of the user that starts the service
      required: true
      schema:
        type: string
        example: asdfgj233
    ProjectId:
      in: query
      name: project_id
      description: The ID of the project in which the service starts
      required: true
      schema:
        type: string
        example: asdfgj233
    AssignmentUuid:
      in: query
      name: service_uuid
      description: The uuid to assign the service with
      required: true
      schema:
        type: string
        # format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000

    ServiceKeyPath:
      in: path
      name: service_key
      description: The key (url) of the service
      required: true
      schema:
        type: string
        description: distinctive name for the node based on the docker registry path
        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\w/-]+)+$'
        example:
          - simcore/services/comp/itis/sleeper
          - simcore/services/dynamic/3dviewer

    ServiceKey:
      in: query
      name: service_key
      description: The key (url) of the service
      required: true
      schema:
        type: string
        description: distinctive name for the node based on the docker registry path
        pattern: '^(simcore)/(services)/(comp|dynamic)(/[\w/-]+)+$'
        example:
          - simcore/services/comp/itis/sleeper
          - simcore/services/dynamic/3dviewer

    ServiceType:
      in: query
      name: service_type
      description: |
        The service type:
          * computational - a computational service
          * interactive - an interactive service
      required: false
      schema:
        type: string
        enum:
          - computational
          - interactive
        example: computational

    ServiceBasePath:
      in: query
      name: service_basepath
      description: predefined basepath for the backend service otherwise uses root
      required: false
      schema:
        type: string
        example: "/x/EycCXbU0H/"
        default: ""

    ServiceUuid:
      in: path
      name: service_uuid
      description: The uuid of the service
      required: true
      schema:
        type: string
        # format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000

    ServiceVersionPath:
      in: path
      name: service_version
      description: The tag/version of the service
      required: true
      schema:
        type: string
        description: semantic version number
        pattern: >-
          ^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$
        example:
          - 1.0.0
          - 0.0.1

    ServiceVersion:
      in: query
      name: service_tag
      description: The tag/version of the service
      required: false
      schema:
        type: string
        description: semantic version number
        pattern: >-
          ^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$
        example:
          - 1.0.0
          - 0.0.1

  schemas:
    ErrorEnveloped:
      $ref: "../common/schemas/error.yaml#/components/schemas/ErrorEnveloped"

    RunningServiceEnveloped:
      $ref: "../common/schemas/running_service.yaml#/components/schemas/RunningServiceEnveloped"

    RunningServicesEnveloped:
      $ref: "../common/schemas/running_service.yaml#/components/schemas/RunningServicesEnveloped"

    ServicesEnveloped:
      $ref: "../common/schemas/services.yaml#/components/schemas/ServicesEnveloped"

    ServiceExtrasEnveloped:
      $ref: "../common/schemas/services.yaml#/components/schemas/ServiceExtrasEnveloped"

    HealthCheckEnveloped:
      $ref: "../common/schemas/health_check.yaml#/components/schemas/HealthCheckEnveloped"
