openapi: 3.0.0
info:
  title: "osparc-simcore web API"
  version: 0.6.0
  description: "API designed for the front-end app"
  contact:
    name: IT'IS Foundation
    email: support@simcore.io
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE
servers:
  - description: API server
    url: "/v0"
  - description: Development server
    url: http://{host}:{port}/{basePath}
    variables:
      host:
        default: "localhost"
      port:
        default: "8001"
      basePath:
        enum:
          - v0
        default: v0
tags:
  - name: authentication
  - name: user
  - name: project
  - name: catalog
  - name: storage
  - name: service
  - name: activity
  - name: tag
    description: |
      Grouping the paths and operations that perform changes on the TAG entity.
      Tags are customized visual elements that help the user group and quickly identify different items
      on the interface. They can also be used for searching and filtering purposes.
  - name: node
    description: |
      The simcore frontend provides a bunch of custom ui elements for nodes to interact with users.
      The frontend uses these api calls to query the nodes about the gui elemets they want to use, and it
      defines the protocol for the frontend to interact with the node.
  - name: configuration
  - name: maintenance
  - name: publication
    description: |
      oSPARC users can make publications. Starting from submission of new service candidates, but this could
      end up accepting other types of publications.
  - name: viewer

paths:
  # DIAGNOSTICS ---------------------------------------------------------
  /:
    $ref: "./openapi-diagnostics.yaml#/paths/~1"

  /health:
    $ref: "./openapi-diagnostics.yaml#/paths/~1health"

  /status:
    $ref: "./openapi-diagnostics.yaml#/paths/~1status"

  /status/diagnostics:
    $ref: "./openapi-diagnostics.yaml#/paths/~1status~1diagnostics"

  /status/{service_name}:
    $ref: "./openapi-diagnostics.yaml#/paths/~1status~1{service_name}"

  /check/{action}:
    $ref: "./openapi-diagnostics.yaml#/paths/~1check~1{action}"

  /config:
    $ref: "./openapi-diagnostics.yaml#/paths/~1config"

  # AUTHENTICATION & AUTHORIZATION --------------------------------------

  /auth/register:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1register"

  /auth/login:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1login"

  /auth/logout:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1logout"

  /auth/reset-password:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1reset-password"

  /auth/reset-password/{code}:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1reset-password~1{code}"

  /auth/change-email:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1change-email"

  /auth/change-password:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1change-password"

  /auth/confirmation/{code}:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1confirmation~1{code}"

  /auth/api-keys:
    $ref: "./openapi-auth.yaml#/paths/~1auth~1api-keys"
  # USER SETTINGS ------------------------------------------------------------------

  /me:
    $ref: "./openapi-user.yaml#/paths/~1me"

  /me/tokens:
    $ref: "./openapi-user.yaml#/paths/~1me~1tokens"

  /me/tokens/{service}:
    $ref: "./openapi-user.yaml#/paths/~1me~1tokens~1{service}"

  # GROUP SETTINGS ------------------------------------------------------------------

  /groups:
    $ref: "./openapi-groups.yaml#/paths/~1groups"

  /groups/{gid}:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1{gid}"

  /groups/{gid}/users:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1{gid}~1users"

  /groups/{gid}/users/{uid}:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1{gid}~1users~1{uid}"

  /groups/{gid}/classifiers:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1{gid}~1classifiers"

  /groups/sparc/classifiers/scicrunch-resources/{rrid}:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1sparc~1classifiers~1scicrunch-resources~1{rrid}"

  /groups/sparc/classifiers/scicrunch-resources:search:
    $ref: "./openapi-groups.yaml#/paths/~1groups~1sparc~1classifiers~1scicrunch-resources:search"

  # DATA STORAGE SERVICES ----------------------------------------------------------

  /storage/locations:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations"

  /storage/locations/{location_id}:sync:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}:sync"

  /storage/locations/{location_id}/files/metadata:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1metadata"

  /storage/locations/{location_id}/files/{fileId}:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1{fileId}"

  /storage/locations/{location_id}/files/{fileId}/metadata:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1{fileId}~1metadata"

  /storage/locations/{location_id}/datasets/{dataset_id}/metadata:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1datasets~1{dataset_id}~1metadata"

  /storage/locations/{location_id}/datasets:
    $ref: "./openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1datasets"

  # SERVICES ------------------------------------------------------------------------
  /computation/pipeline/{project_id}:start:
    $ref: "./openapi-services.yaml#/paths/~1computation~1pipeline~1{project_id}~1start"
  /computation/pipeline/{project_id}:stop:
    $ref: "./openapi-services.yaml#/paths/~1computation~1pipeline~1{project_id}~1stop"

  # PROJECT SERVICES -----------------------------------------------------------------

  /projects:
    $ref: "./openapi-projects.yaml#/paths/~1projects"

  /projects/active:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1active"

  /projects/{project_id}:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}"

  /projects/{project_id}:open:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1open"

  /projects/{project_id}/state:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1state"

  /projects/{project_id}:xport: # do not change there "export" will not work
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1xport"

  /projects/{project_id}:duplicate:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1duplicate"

  /projects:import:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1import"

  /projects/{project_id}:close:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1close"

  /projects/{project_id}/nodes:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1nodes"

  /projects/{project_id}/nodes/{node_id}:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{project_id}~1nodes~1{node_id}"

  /nodes/{nodeInstanceUUID}/outputUi/{outputKey}:
    $ref: "./openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1outputUi~1{outputKey}"

  /nodes/{nodeInstanceUUID}/outputUi/{outputKey}/{apiCall}:
    $ref: "./openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1outputUi~1{outputKey}~1{apiCall}"

  /nodes/{nodeInstanceUUID}/iframe:
    $ref: "./openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1iframe"

  /projects/{study_uuid}/tags/{tag_id}:
    $ref: "./openapi-projects.yaml#/paths/~1projects~1{study_uuid}~1tags~1{tag_id}"

  # ACTIVITY -------------------------------------------------------------------------
  /activity/status:
    $ref: "./openapi-activity.yaml#/paths/~1activity~1status"

  # TAGS -------------------------------------------------------------------------
  /tags:
    $ref: "./openapi-tags.yaml#/paths/~1tags"

  /tags/{tag_id}:
    $ref: "./openapi-tags.yaml#/paths/~1tags~1{tag_id}"

  # PUBLICATIONS -------------------------------------------------------------------------
  /publications/service-submission:
    $ref: "./openapi-publications.yaml#/paths/~1publications~1service-submission"

  # CATALOG -------------------------------------------------------------------------
  /catalog/dags:
    $ref: "./openapi-catalog.yaml#/paths/~1catalog~1dags"
  /catalog/dags/{dag_id}:
    $ref: "./openapi-catalog.yaml#/paths/~1catalog~1dags~1{dag_id}"

  /catalog/services:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services"
  /catalog/services/{service_key}/{service_version}:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version"
  /catalog/services/{service_key}/{service_version}/inputs:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_inputs"
  /catalog/services/{service_key}/{service_version}/inputs/{input_key}:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_inputs_input_key"
  /catalog/services/{service_key}/{service_version}/inputs:match:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_inputs_match"
  /catalog/services/{service_key}/{service_version}/outputs:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_outputs"
  /catalog/services/{service_key}/{service_version}/outputs/{output_key}:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_outputs_output_key"
  /catalog/services/{service_key}/{service_version}/outputs:match:
    $ref: "./openapi-catalog.yaml#/paths/catalog_services_service_key_service_version_outputs_match"

  # VIEWER -------------------------------------------------------------------------
  /viewers:
    $ref: "./openapi-viewer.yaml#/paths/~1viewers"

  /viewers/default:
    $ref: "./openapi-viewer.yaml#/paths/~1viewers~1default"

components:
  responses:
    DefaultErrorResponse:
      description: Default http error response body
      content:
        application/json:
          schema:
            $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
