openapi: 3.0.0
info:
  title: simcore-service-webserver API
  version: 0.1.0
  description: API definition for simcore-service-webserver service
  contact:
    name: IT'IS Foundation
    email: support@simcore.io
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE
servers:
  - description: API server
    url: '/v0'
  - description: Development server
    url: http://{host}:{port}/{basePath}
    variables:
      host:
        default: 'localhost'
      port:
        default: '8001'
      basePath:
        enum:
          - v0
        default: v0
paths:

  # DIAGNOSTICS ---------------------------------------------------------
  /:
    $ref: './openapi-diagnostics.yaml#/paths/~1'

  /check/{action}:
    $ref: './openapi-diagnostics.yaml#/paths/~1check~1{action}'

  # AUTHENTICATION & AUTHORIZATION --------------------------------------

  /auth/register:
    $ref: './openapi-auth.yaml#/paths/~1auth~1register'

  /auth/login:
    $ref: './openapi-auth.yaml#/paths/~1auth~1login'

  /auth/logout:
    $ref: './openapi-auth.yaml#/paths/~1auth~1logout'

  /auth/change-email:
    $ref: './openapi-auth.yaml#/paths/~1auth~1change-email'

  /auth/confirmation/{code}:
    $ref: './openapi-auth.yaml#/paths/~1auth~1confirmation~1{code}'

  # USER SETTINGS ------------------------------------------------------------------

  /my:
    $ref: './openapi-user.yaml#/paths/~1my'

  /my/tokens:
    $ref: './openapi-user.yaml#/paths/~1my~1tokens'

  /my/tokens/{service}:
    $ref: './openapi-user.yaml#/paths/~1my~1tokens~1{service}'

  # DATA STORAGE SERVICES ----------------------------------------------------------

  /storage/locations:
    $ref: './openapi-storage.yaml#/paths/~1storage~1locations'

  /storage/locations/{location_id}/files/metadata:
    $ref: './openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1metadata'

  /storage/locations/{location_id}/files/{fileId}:
    $ref: './openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1{fileId}'

  /storage/locations/{location_id}/files/{fileId}/metadata:
    $ref: './openapi-storage.yaml#/paths/~1storage~1locations~1{location_id}~1files~1{fileId}~1metadata'

  # COMPUTATIONAL SERVICES ----------------------------------------------------------

  /running_interactive_services:
    post:
      description: Starts an interactive service in the oSparc platform and returns its entrypoint
      operationId: running_interactive_services_post
      parameters:
        - $ref: '#/components/parameters/ServiceKey'
        - $ref: '#/components/parameters/ServiceVersion'
        - $ref: '#/components/parameters/AssignmentUuid'
      responses:
        "200":
          description: Project already running
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/running_service.yaml#/components/schemas/RunningServiceEnveloped'
        "201":
          description: Succesfully created the service in the oSparc platform. Returns the location where the service runs.
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/running_service.yaml#/components/schemas/RunningServiceEnveloped'
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        "409":
          description: A service with the same uuid already exists
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'

  /running_interactive_services/{service_uuid}:
    get:
      description: Succesfully returns if a service with the defined uuid is up and running
      operationId: running_interactive_services_get
      parameters:
        - $ref: '#/components/parameters/ServiceUuid'
      responses:
        "204":
          description: OK service exists and runs
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/response204.yaml#/components/schemas/Response204Enveloped'
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
    delete:
      description: Stops and removes an interactive service from the oSparc platform
      operationId: running_interactive_services_delete
      parameters:
        - $ref: '#/components/parameters/ServiceUuid'
      responses:
        "204":
          description: Succesfully stopped and removed the service from the oSparc platform
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/response204.yaml#/components/schemas/Response204Enveloped'
        "400":
          description: Malformed function call, missing field
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        "404":
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'

  /services:

    get:
      description: Lists available services in the oSparc platform
      operationId: services_get
      parameters:
        - $ref: '#/components/parameters/ServiceType'
      responses:
        "200":
          description: Success, returns the list of available services
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/services.yaml#/components/schemas/ServicesEnveloped'
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'

  /computation/pipeline/{project_id}:
    put:
      description: Update a pipeline
      operationId: update_pipeline
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        $ref: '#/components/requestBodies/PipelineBody'
      responses:
        "204":
          description: Succesfully updated the pipeline
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'

  /computation/pipeline/{project_id}/start:
    post:
      description: Starts a pipeline
      operationId: start_pipeline
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        $ref: '#/components/requestBodies/PipelineBody'
      responses:
        "200":
          description: Succesffully started the pipeline
          content:
            application/json:
              schema:
                $ref: './components/schemas/pipeline.yaml#/components/schemas/PipelineCreatedEnveloped'

        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '../../shared/schemas/error.yaml#/components/schemas/ErrorEnveloped'

  # PROJECT SERVICES -----------------------------------------------------------------

  /projects:
    $ref: './openapi-projects.yaml#/paths/~1projects'

  /projects/{project_id}:
    $ref: './openapi-projects.yaml#/paths/~1projects~1{project_id}'

  /nodes/{nodeInstanceUUID}/outputUi/{outputKey}:
    $ref: './openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1outputUi~1{outputKey}'

  /nodes/{nodeInstanceUUID}/outputUi/{outputKey}/{apiCall}:
    $ref: './openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1outputUi~1{outputKey}~1{apiCall}'

  /nodes/{nodeInstanceUUID}/iframe:
    $ref: './openapi-node-v0.0.1.yaml#/paths/~1nodes~1{nodeInstanceUUID}~1iframe'

components:
  parameters:
    ProjectId:
      in: path
      name: project_id
      required: true
      description: starts the pipeline
      schema:
        type: string
        # format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000

    AssignmentUuid:
      in: query
      name: service_uuid
      description: The uuid to assign the service with
      required: true
      schema:
        type: string
        # format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000

    ServiceKey:
      in: query
      name: service_key
      description: The key (url) of the service
      required: true
      schema:
        type: string
        # format: url
        example: simcore/services/dynamic/3d-viewer

    ServiceType:
      in: query
      name: service_type
      description: |
        The service type:
          * computational - a computational service
          * interactive - an interactive service
      required: false
      schema:
        type: string
        enum:
          - computational
          - interactive
        example: computational

    ServiceUuid:
      in: path
      name: service_uuid
      description: The uuid of the service
      required: true
      schema:
        type: string
        # format: uuid
        example: 123e4567-e89b-12d3-a456-426655440000

    ServiceVersion:
      in: query
      name: service_tag
      description: The tag/version of the service
      required: false
      schema:
        type: string
        example: "1.4"

  responses:
    DefaultErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: './components/schemas/error.yaml#/ErrorEnveloped'

  requestBodies:
    PipelineBody:
      content:
        application/json:
          schema:
            type: object
            required:
              - workbench
            properties:
              workbench:
                $ref: './components/schemas/workbench-converted.yaml'
            # $ref: './components/schemas/pipeline.yaml#/components/schemas/WorkbenchType'
