paths:
  /auth/register:
    post:
      operationId: auth_register
      tags:
        - authentication
      requestBody:
        description: user registration
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationType"
        required: true
      responses:
        "200":
          description: User has been succesfully registered.
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/verify-phone-number:
    post:
      summary: user tries to verify phone number for 2 Factor Authentication when registering
      tags:
        - authentication
      operationId: auth_verify_2fa_phone
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Verify2FAPhone"
      responses:
        "202":
          description: Accepted, SMS sent
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/validate-code-register:
    post:
      summary: user enters 2 Factor Authentication code when registering
      tags:
        - authentication
      operationId: auth_validate_2fa_register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Validate2FAPhone"
      responses:
        "200":
          description: Succesfully validated
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/login:
    post:
      summary: user logs in
      tags:
        - authentication
      operationId: auth_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginForm"
      responses:
        "200":
          description: Succesfully logged in
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        "202":
          description: Accepted, but 2 Factor Authentication required
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/validate-code-login:
    post:
      summary: user enters 2 Factor Authentication code when login in
      tags:
        - authentication
      operationId: auth_validate_2fa_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login2FAForm"
      responses:
        "200":
          description: Succesfully logged in
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/logout:
    post:
      tags:
        - authentication
      operationId: auth_logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequest"
      responses:
        "200":
          description: Succesfully logged out
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/reset-password:
    post:
      summary: "a non logged-in user requests a password reset"
      tags:
        - authentication
      operationId: auth_reset_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          description: confirmation email sent to user
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        "503":
          description: failed to send confirmation email
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"

  /auth/reset-password/{code}:
    post:
      tags:
        - authentication
      summary: changes password using a token code without being logged in
      operationId: auth_reset_password_allowed
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordForm"
      responses:
        "200":
          description: password was successfully changed
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        "401":
          description: unauthorized reset due to invalid token code
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/change-email:
    post:
      summary: logged in user changes email
      tags:
        - authentication
      operationId: auth_change_email
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailForm"
      responses:
        "200":
          description: confirmation sent to new email to complete operation
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        "401":
          description: "unauthorized user. Login required"
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        "503":
          description: unable to send confirmation email
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/change-password:
    post:
      summary: logged in user changes password
      tags:
        - authentication
      operationId: auth_change_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordForm"
      responses:
        "200":
          description: password was successfully changed
          content:
            application/json:
              schema:
                $ref: "./components/schemas/log_message.yaml#/LogMessageEnveloped"
        "401":
          description: "unauthorized user. Login required"
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        "409":
          description: "mismatch between new and confirmation passwords"
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        "422":
          description: current password is invalid
          content:
            application/json:
              schema:
                $ref: "./components/schemas/error.yaml#/ErrorEnveloped"
        default:
          $ref: "#/components/responses/DefaultErrorResponse"

  /auth/confirmation/{code}:
    get:
      summary: email link sent to user to confirm an action
      tags:
        - authentication
      operationId: auth_confirmation
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
      responses:
        "3XX":
          description: redirection to specific ui application page

  /auth/api-keys:
    get:
      summary: lists display names of API keys by this user
      tags:
        - authentication
      operationId: list_api_keys
      responses:
        "200":
          description: returns the display names of API keys
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        "401":
          description: requires login to  list keys
        "403":
          description: not enough permissions to list keys

    post:
      summary: creates API keys to access public API
      tags:
        - authentication
      operationId: create_api_key
      requestBody:
        description: user registration
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyCreate"
      responses:
        "200":
          description: Authorization granted returning API key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyGet"
        "400":
          description: key name requested is invalid
        "401":
          description: requires login to  create a key
        "403":
          description: not enough permissions to create a key

    delete:
      summary: deletes API key by name
      tags:
        - authentication
      operationId: delete_api_key
      requestBody:
        description: deletes given api key by name
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyCreate"
      responses:
        "204":
          description: api key successfully deleted
        "401":
          description: requires login to  delete a key
        "403":
          description: not enough permissions to delete a key

components:
  responses:
    DefaultErrorResponse:
      $ref: "./openapi.yaml#/components/responses/DefaultErrorResponse"
  schemas:
    LogoutRequest:
      type: object
      properties:
        client_session_id:
          type: string
          example: 5ac57685-c40f-448f-8711-70be1936fd63
    ApiKeyCreate:
      type: object
      required:
        - display_name
      properties:
        display_name:
          type: string
        expiration:
          type: number
          description: expiration delta in seconds
    ApiKeyGet:
      type: object
      properties:
        display_name:
          type: string
        api_key:
          type: string
        api_secret:
          type: string

    RegistrationType:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        confirm:
          type: string
        invitation:
          type: string
          description: "Invitation code"
      required:
        - email
        - password

      example:
        email: foo@mymail.com
        password: "my secret"
        confirm: "my secret"
        invitation: 33c451d4-17b7-4e65-9880-694559b8ffc2

    LoginEnveloped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/LoginFormType"
        error:
          nullable: true
          default: null

    LoginForm:
      type: object
      properties:
        email:
          type: string
          #FIXME: format: email
        password:
          type: string
      example:
        email: foo@mymail.com
        password: "my secret"

    Verify2FAPhone:
      type: object
      required:
        - email
        - phone
      properties:
        email:
          type: string
          #FIXME: format: email
        phone:
          type: string
          description: "Phone number E.164, needed on the deployments with 2FA"
          #FIXME: format: phone number https://en.wikipedia.org/wiki/E.164
      example:
        email: foo@mymail.com
        phone: "+41123456789"

    Validate2FAPhone:
      type: object
      required:
        - email
        - phone
        - code
      properties:
        email:
          type: string
          #FIXME: format: email
        phone:
          type: string
          description: "Phone number E.164, needed on the deployments with 2FA"
          #FIXME: format: phone number https://en.wikipedia.org/wiki/E.164
        code:
          type: string
      example:
        email: foo@mymail.com
        phone: "+41123456789"
        code: "1234"

    Login2FAForm:
      type: object
      required:
        - email
        - code
      properties:
        email:
          type: string
          #FIXME: format: email
        code:
          type: string
      example:
        email: foo@mymail.com
        code: "1234"

    ChangeEmailForm:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          # FIXME: format: email
      example:
        email: foo@mymail.com

    ResetPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          #FIXME: format: email
      example:
        email: foo@mymail.com

    ResetPasswordForm:
      type: object
      required:
        - password
        - confirm
      properties:
        password:
          type: string
          #FIXME: format: password
        confirm:
          type: string
          #FIXME: format: password
      example:
        password: "my secret"
        confirm: "my secret"

    ChangePasswordForm:
      type: object
      required:
        - current
        - new
        - confirm
      properties:
        current:
          type: string
          #FIXME: format: password
        new:
          type: string
          #FIXME: format: password
        confirm:
          type: string
          #FIXME: format: password
      example:
        current: "my secret"
        new: "my new secret"
        confirm: "my new secret"

    PasswordCheckEnveloped:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/PasswordCheckSchema"
        error:
          nullable: true
          default: null

    PasswordCheckSchema:
      type: object
      required:
        - strength
      properties:
        strength:
          description: The strength of the password ranges from 0 (extremely weak) and 1 (extremely strong)
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        rating:
          description: Human readable rating from infinitely weak to very strong
          type: string
        improvements:
          additionalProperties:
            type: string
      example:
        strength: 0.202
        rating: Extremely weak
        improvements:
          mixin: Use a good mix of numbers, letters and symbols
          duplications: Minimize character duplicates and repetitions
