{
  "openapi": "3.0.2",
  "info": {
    "title": "Components Catalog Service",
    "description": "Manages and maintains a **catalog** of all published components (e.g. macro-algorithms, scripts, etc)",
    "version": "0.3.2"
  },
  "paths": {
    "/v0/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_v0_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/dags": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "List Dags",
        "operationId": "list_dags_v0_dags_get",
        "parameters": [
          {
            "description": "Requests a specific page of the list results",
            "required": false,
            "schema": {
              "title": "Page Token",
              "type": "string",
              "description": "Requests a specific page of the list results"
            },
            "name": "page_token",
            "in": "query"
          },
          {
            "description": "Maximum number of results to be returned by the server",
            "required": false,
            "schema": {
              "title": "Page Size",
              "minimum": 0.0,
              "type": "integer",
              "description": "Maximum number of results to be returned by the server",
              "default": 0
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Sorts in ascending order comma-separated fields",
            "required": false,
            "schema": {
              "title": "Order By",
              "type": "string",
              "description": "Sorts in ascending order comma-separated fields"
            },
            "name": "order_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Dags V0 Dags Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DAGOut"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DAG"
        ],
        "summary": "Create Dag",
        "operationId": "create_dag_v0_dags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Dag V0 Dags Post",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/dags:batchGet": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Batch Get Dags",
        "operationId": "batch_get_dags_v0_dags_batchGet_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/dags:search": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Search Dags",
        "operationId": "search_dags_v0_dags_search_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/dags/{dag_id}": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Get Dag",
        "operationId": "get_dag_v0_dags__dag_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DAG"
        ],
        "summary": "Replace Dag",
        "operationId": "replace_dag_v0_dags__dag_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DAG"
        ],
        "summary": "Delete Dag",
        "operationId": "delete_dag_v0_dags__dag_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DAG"
        ],
        "summary": "Udpate Dag",
        "operationId": "udpate_dag_v0_dags__dag_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Services",
        "operationId": "list_services_v0_services_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": 0.0,
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Details",
              "type": "boolean",
              "default": true
            },
            "name": "details",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "X-Simcore-Products-Name",
              "type": "string"
            },
            "name": "x-simcore-products-name",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Services V0 Services Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceOut"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Service",
        "operationId": "get_service_v0_services__service_key___service_version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Simcore-Products-Name",
              "type": "string"
            },
            "name": "x-simcore-products-name",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "services"
        ],
        "summary": "Modify Service",
        "operationId": "modify_service_v0_services__service_key___service_version__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "X-Simcore-Products-Name",
              "type": "string"
            },
            "name": "x-simcore-products-name",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessEnum": {
        "title": "AccessEnum",
        "enum": [
          "ReadAndWrite",
          "Invisible",
          "ReadOnly"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Author": {
        "title": "Author",
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the author",
            "example": "Jim Knopf"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address",
            "format": "email"
          },
          "affiliation": {
            "title": "Affiliation",
            "type": "string",
            "description": "Affiliation of the author"
          }
        },
        "additionalProperties": false
      },
      "Badge": {
        "title": "Badge",
        "required": [
          "name",
          "image",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the subject"
          },
          "image": {
            "title": "Image",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Url to the badge",
            "format": "uri"
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the status",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "DAGIn": {
        "title": "DAGIn",
        "required": [
          "key",
          "version",
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "example": "simcore/services/frontend/nodes-group/macros/1"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "example": "1.0.0"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "format": "email"
          },
          "workbench": {
            "title": "Workbench",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "DAGOut": {
        "title": "DAGOut",
        "required": [
          "key",
          "version",
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "example": "simcore/services/frontend/nodes-group/macros/1"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "example": "1.0.0"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "format": "email"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "workbench": {
            "title": "Workbench",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "DatCoreFileLink": {
        "title": "DatCoreFileLink",
        "required": [
          "store",
          "path",
          "label",
          "dataset"
        ],
        "type": "object",
        "properties": {
          "store": {
            "title": "Store",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": "The store identifier, '0' or 0 for simcore S3, '1' or 1 for datcore"
          },
          "path": {
            "title": "Path",
            "pattern": "^.+$",
            "type": "string",
            "description": "The path to the file in the storage provider domain"
          },
          "eTag": {
            "title": "Etag",
            "type": "string",
            "description": "Entity tag that uniquely represents the file. The method to generate the tag is not specified (black box)."
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The real file name"
          },
          "dataset": {
            "title": "Dataset",
            "type": "string",
            "description": "Unique identifier to access the dataset on datcore (REQUIRED for datcore)",
            "example": [
              "N:dataset:f9f5ac51-33ea-4861-8e08-5b4faf655041"
            ]
          }
        },
        "additionalProperties": false
      },
      "DownloadLink": {
        "title": "DownloadLink",
        "required": [
          "downloadLink"
        ],
        "type": "object",
        "properties": {
          "downloadLink": {
            "title": "Downloadlink",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "Node": {
        "title": "Node",
        "required": [
          "key",
          "version",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "semantic version number of the node"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The short name of the node"
          },
          "progress": {
            "title": "Progress",
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "number",
            "description": "the node progress value"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url of the latest screenshot of the node",
            "format": "uri"
          },
          "runHash": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "title": "Runhash",
                "description": "the hex digest of the resolved inputs +outputs hash at the time when the last outputs were generated",
                "type": "string"
              }
            ]
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "values of input properties"
          },
          "inputAccess": {
            "type": "object",
            "description": "map with key - access level pairs"
          },
          "inputNodes": {
            "title": "Inputnodes",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "node IDs of where the node is connected to"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "values of output properties"
          },
          "outputNode": {
            "title": "Outputnode",
            "type": "boolean",
            "deprecated": true
          },
          "outputNodes": {
            "title": "Outputnodes",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Used in group-nodes. Node IDs of those connected to the output"
          },
          "parent": {
            "anyOf": [
              {
                "type": "null"
              },
              {
                "title": "Parent",
                "description": "Parent's (group-nodes') node ID s. Used to group",
                "type": "string",
                "format": "uuid"
              }
            ]
          },
          "position": {
            "title": "Position",
            "allOf": [
              {
                "$ref": "#/components/schemas/Position"
              }
            ],
            "deprecated": true
          },
          "state": {
            "title": "State",
            "allOf": [
              {
                "$ref": "#/components/schemas/NodeState"
              }
            ],
            "description": "The node's state object"
          }
        },
        "additionalProperties": false
      },
      "NodeState": {
        "title": "NodeState",
        "type": "object",
        "properties": {
          "modified": {
            "title": "Modified",
            "type": "boolean",
            "description": "true if the node's outputs need to be re-computed",
            "default": true
          },
          "dependencies": {
            "title": "Dependencies",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "contains the node inputs dependencies if they need to be computed first"
          },
          "currentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the node's current state",
            "default": "NOT_STARTED"
          }
        },
        "additionalProperties": false
      },
      "PortLink": {
        "title": "PortLink",
        "required": [
          "nodeUuid",
          "output"
        ],
        "type": "object",
        "properties": {
          "nodeUuid": {
            "title": "Nodeuuid",
            "type": "string",
            "description": "The node to get the port output from",
            "format": "uuid",
            "example": [
              "da5068e0-8a8d-4fb9-9516-56e5ddaef15b"
            ]
          },
          "output": {
            "title": "Output",
            "pattern": "^[-_a-zA-Z0-9]+$",
            "type": "string",
            "description": "The port key in the node given by nodeUuid",
            "example": [
              "out_2"
            ]
          }
        },
        "additionalProperties": false
      },
      "Position": {
        "title": "Position",
        "required": [
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "x": {
            "title": "X",
            "type": "integer",
            "description": "The x position",
            "example": [
              "12"
            ]
          },
          "y": {
            "title": "Y",
            "type": "integer",
            "description": "The y position",
            "example": [
              "15"
            ]
          }
        },
        "additionalProperties": false
      },
      "RunningState": {
        "title": "RunningState",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "STARTED",
          "RETRY",
          "SUCCESS",
          "FAILED",
          "ABORTED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceGroupAccessRights": {
        "title": "ServiceGroupAccessRights",
        "type": "object",
        "properties": {
          "execute_access": {
            "title": "Execute Access",
            "type": "boolean",
            "description": "defines whether the group can execute the service",
            "default": false
          },
          "write_access": {
            "title": "Write Access",
            "type": "boolean",
            "description": "defines whether the group can modify the service",
            "default": false
          }
        }
      },
      "ServiceInput": {
        "title": "ServiceInput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type"
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input port"
      },
      "ServiceOut": {
        "title": "ServiceOut",
        "required": [
          "name",
          "description",
          "key",
          "version",
          "type",
          "authors",
          "contact",
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "short, human readable name for the node",
            "example": "Fast Counter"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the thumbnail",
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "human readable description of the purpose of the node"
          },
          "classifiers": {
            "title": "Classifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quality": {
            "title": "Quality",
            "type": "object",
            "default": {}
          },
          "access_rights": {
            "title": "Access Rights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceGroupAccessRights"
            },
            "description": "service access rights per group id"
          },
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number"
          },
          "integration-version": {
            "title": "Integration-Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "integration version number"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ],
            "description": "service type"
          },
          "badges": {
            "title": "Badges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "authors": {
            "title": "Authors",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "description": "email to correspond to the authors about the node",
            "format": "email"
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "definition of the inputs of this node"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "definition of the outputs of this node"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "format": "email"
          }
        },
        "description": "Service base schema (used for docker labels on docker images)",
        "example": {
          "name": "File Picker",
          "description": "File Picker",
          "classifiers": [],
          "quality": {},
          "access_rights": {
            "1": {
              "execute_access": true,
              "write_access": false
            },
            "4": {
              "execute_access": true,
              "write_access": true
            }
          },
          "key": "simcore/services/frontend/file-picker",
          "version": "1.0.0",
          "type": "dynamic",
          "authors": [
            {
              "name": "Odei Maiz",
              "email": "maiz@itis.swiss"
            }
          ],
          "contact": "maiz@itis.swiss",
          "inputs": {},
          "outputs": {
            "outFile": {
              "displayOrder": 0,
              "label": "File",
              "description": "Chosen File",
              "type": "data:*/*"
            }
          },
          "owner": "maiz@itis.swiss"
        }
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input or output port"
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "computational",
          "dynamic",
          "frontend"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceUpdate": {
        "title": "ServiceUpdate",
        "type": "object",
        "properties": {
          "access_rights": {
            "title": "Access Rights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceGroupAccessRights"
            },
            "description": "service access rights per group id"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "classifiers": {
            "title": "Classifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "quality": {
            "title": "Quality",
            "type": "object",
            "default": {}
          }
        },
        "example": {
          "access_rights": {
            "1": {
              "execute_access": false,
              "write_access": false
            },
            "2": {
              "execute_access": true,
              "write_access": true
            },
            "44": {
              "execute_access": false,
              "write_access": false
            }
          },
          "name": "My Human Readable Service Name",
          "description": "An interesting service that does something",
          "classifiers": [
            "RRID:SCR_018997",
            "RRID:SCR_019001"
          ],
          "quality": {
            "tsr": {
              "r01": {
                "level": 3,
                "references": ""
              },
              "r02": {
                "level": 2,
                "references": ""
              },
              "r03": {
                "level": 0,
                "references": ""
              },
              "r04": {
                "level": 0,
                "references": ""
              },
              "r05": {
                "level": 2,
                "references": ""
              },
              "r06": {
                "level": 0,
                "references": ""
              },
              "r07": {
                "level": 0,
                "references": ""
              },
              "r08": {
                "level": 1,
                "references": ""
              },
              "r09": {
                "level": 0,
                "references": ""
              },
              "r10": {
                "level": 0,
                "references": ""
              }
            },
            "enabled": true,
            "annotations": {
              "vandv": "",
              "purpose": "",
              "standards": "",
              "limitations": "",
              "documentation": "",
              "certificationLink": "",
              "certificationStatus": "Uncertified"
            }
          }
        }
      },
      "SimCoreFileLink": {
        "title": "SimCoreFileLink",
        "required": [
          "store",
          "path"
        ],
        "type": "object",
        "properties": {
          "store": {
            "title": "Store",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": "The store identifier, '0' or 0 for simcore S3, '1' or 1 for datcore"
          },
          "path": {
            "title": "Path",
            "pattern": "^.+$",
            "type": "string",
            "description": "The path to the file in the storage provider domain"
          },
          "eTag": {
            "title": "Etag",
            "type": "string",
            "description": "Entity tag that uniquely represents the file. The method to generate the tag is not specified (black box)."
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "The real file name"
          }
        },
        "additionalProperties": false
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "minimum Height of the textarea"
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
