{
  "openapi": "3.0.2",
  "info": {
    "title": "Components Catalog Service",
    "description": "Manages and maintains a **catalog** of all published components (e.g. macro-algorithms, scripts, etc)",
    "version": "0.3.2"
  },
  "paths": {
    "/v0/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_v0_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/dags": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "List Dags",
        "operationId": "list_dags_v0_dags_get",
        "parameters": [
          {
            "description": "Requests a specific page of the list results",
            "required": false,
            "schema": {
              "title": "Page Token",
              "type": "string",
              "description": "Requests a specific page of the list results"
            },
            "name": "page_token",
            "in": "query"
          },
          {
            "description": "Maximum number of results to be returned by the server",
            "required": false,
            "schema": {
              "title": "Page Size",
              "minimum": 0.0,
              "type": "integer",
              "description": "Maximum number of results to be returned by the server",
              "default": 0
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Sorts in ascending order comma-separated fields",
            "required": false,
            "schema": {
              "title": "Order By",
              "type": "string",
              "description": "Sorts in ascending order comma-separated fields"
            },
            "name": "order_by",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Dags V0 Dags Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DAGOut"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "DAG"
        ],
        "summary": "Create Dag",
        "operationId": "create_dag_v0_dags_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Dag V0 Dags Post",
                  "type": "integer"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/dags:batchGet": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Batch Get Dags",
        "operationId": "batch_get_dags_v0_dags_batchGet_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/dags:search": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Search Dags",
        "operationId": "search_dags_v0_dags_search_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/dags/{dag_id}": {
      "get": {
        "tags": [
          "DAG"
        ],
        "summary": "Get Dag",
        "operationId": "get_dag_v0_dags__dag_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "DAG"
        ],
        "summary": "Replace Dag",
        "operationId": "replace_dag_v0_dags__dag_id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DAG"
        ],
        "summary": "Delete Dag",
        "operationId": "delete_dag_v0_dags__dag_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "DAG"
        ],
        "summary": "Udpate Dag",
        "operationId": "udpate_dag_v0_dags__dag_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Dag Id",
              "type": "integer"
            },
            "name": "dag_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DAGIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DAGOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Services",
        "operationId": "list_services_v0_services_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": 0.0,
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Services V0 Services Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceOut"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Service",
        "operationId": "get_service_v0_services__service_key___service_version__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "services"
        ],
        "summary": "Modify Service",
        "operationId": "modify_service_v0_services__service_key___service_version__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessEnum": {
        "title": "AccessEnum",
        "enum": [
          "ReadAndWrite",
          "Invisible",
          "ReadOnly"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Author": {
        "title": "Author",
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the author",
            "example": "Jim Knopf"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address",
            "format": "email",
            "example": [
              "sun@sense.eight",
              "deleen@minbar.bab"
            ]
          },
          "affiliation": {
            "title": "Affiliation",
            "type": "string",
            "description": "Affiliation of the author",
            "example": [
              "Sense8",
              "Babylon 5"
            ]
          }
        },
        "additionalProperties": false
      },
      "Badge": {
        "title": "Badge",
        "required": [
          "name",
          "image",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the subject",
            "example": [
              "travis-ci",
              "coverals.io",
              "github.io"
            ]
          },
          "image": {
            "title": "Image",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Url to the badge",
            "format": "uri",
            "example": [
              "https://travis-ci.org/ITISFoundation/osparc-simcore.svg?branch=master",
              "https://coveralls.io/repos/github/ITISFoundation/osparc-simcore/badge.svg?branch=master",
              "https://img.shields.io/website-up-down-green-red/https/itisfoundation.github.io.svg?label=documentation"
            ]
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the status",
            "format": "uri",
            "example": [
              "https://travis-ci.org/ITISFoundation/osparc-simcore 'State of CI: build, test and pushing images'",
              "https://coveralls.io/github/ITISFoundation/osparc-simcore?branch=master 'Test coverage'",
              "https://itisfoundation.github.io/"
            ]
          }
        },
        "additionalProperties": false
      },
      "Connection": {
        "title": "Connection",
        "type": "object",
        "properties": {
          "nodeUuid": {
            "title": "Nodeuuid",
            "type": "string"
          },
          "output": {
            "title": "Output",
            "type": "string"
          }
        }
      },
      "DAGIn": {
        "title": "DAGIn",
        "required": [
          "key",
          "version",
          "name"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)(/demodec)?/(comp|dynamic|frontend)(/[^\\s]+)+$",
            "type": "string",
            "example": "simcore/services/frontend/nodes-group/macros/1"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "example": "1.0.0"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "format": "email"
          },
          "workbench": {
            "title": "Workbench",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "DAGOut": {
        "title": "DAGOut",
        "required": [
          "key",
          "version",
          "name",
          "id"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)(/demodec)?/(comp|dynamic|frontend)(/[^\\s]+)+$",
            "type": "string",
            "example": "simcore/services/frontend/nodes-group/macros/1"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "example": "1.0.0"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "format": "email"
          },
          "id": {
            "title": "Id",
            "type": "integer"
          },
          "workbench": {
            "title": "Workbench",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Node"
            }
          }
        }
      },
      "FilePickerOutput": {
        "title": "FilePickerOutput",
        "required": [
          "store",
          "path",
          "label"
        ],
        "type": "object",
        "properties": {
          "store": {
            "title": "Store",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          },
          "dataset": {
            "title": "Dataset",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "Node": {
        "title": "Node",
        "required": [
          "key",
          "version",
          "label",
          "position"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)(/demodec)?/(comp|dynamic|frontend)(/[^\\s]+)+$",
            "type": "string",
            "example": "simcore/services/comp/sleeper"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "example": "6.2.0"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "progress": {
            "title": "Progress",
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "number",
            "default": 0
          },
          "thumbnail": {
            "title": "Thumbnail",
            "type": "string"
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "$ref": "#/components/schemas/Connection"
                },
                {
                  "$ref": "#/components/schemas/FilePickerOutput"
                }
              ]
            }
          },
          "inputAccess": {
            "title": "Inputaccess",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AccessEnum"
            }
          },
          "inputNodes": {
            "title": "Inputnodes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "$ref": "#/components/schemas/FilePickerOutput"
                }
              ]
            }
          },
          "outputNode": {
            "title": "Outputnode",
            "type": "boolean",
            "deprecated": true
          },
          "outputNodes": {
            "title": "Outputnodes",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "parent": {
            "title": "Parent",
            "type": "string",
            "description": "Parent's (group-nodes') node ID s.",
            "example": "nodeUUid1"
          },
          "position": {
            "$ref": "#/components/schemas/Position"
          }
        }
      },
      "Position": {
        "title": "Position",
        "required": [
          "x",
          "y"
        ],
        "type": "object",
        "properties": {
          "x": {
            "title": "X",
            "type": "integer"
          },
          "y": {
            "title": "Y",
            "type": "integer"
          }
        }
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceGroupAccessRights": {
        "title": "ServiceGroupAccessRights",
        "type": "object",
        "properties": {
          "execute_access": {
            "title": "Execute Access",
            "type": "boolean",
            "description": "defines whether the group can execute the service",
            "default": false
          },
          "write_access": {
            "title": "Write Access",
            "type": "boolean",
            "description": "defines whether the group can modify the service",
            "default": false
          }
        }
      },
      "ServiceInput": {
        "title": "ServiceInput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display",
            "example": [
              1,
              -0.2
            ]
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed",
            "example": [
              "number",
              "boolean",
              "data:*/*",
              "data:text/*",
              "data:[image/jpeg,image/png]",
              "data:application/json",
              "data:application/json;schema=https://my-schema/not/really/schema.json",
              "data:application/vnd.ms-excel",
              "data:text/plain",
              "data:application/hdf5",
              "data:application/edu.ucdavis@ceclancy.xyz"
            ]
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files",
            "example": [
              {
                "dir/input1.txt": "key_1",
                "dir33/input2.txt": "key2"
              }
            ]
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "example": [
              "Dog",
              true
            ]
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type"
          }
        },
        "additionalProperties": false
      },
      "ServiceOut": {
        "title": "simcore node",
        "required": [
          "name",
          "description",
          "key",
          "version",
          "type",
          "authors",
          "contact",
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "short, human readable name for the node",
            "example": "Fast Counter"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the thumbnail",
            "format": "uri",
            "example": "https://user-images.githubusercontent.com/32800795/61083844-ff48fb00-a42c-11e9-8e63-fa2d709c8baf.png"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "human readable description of the purpose of the node",
            "example": [
              "Our best node type",
              "The mother of all nodes, makes your numbers shine!"
            ]
          },
          "classifiers": {
            "title": "Classifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "access_rights": {
            "title": "Access Rights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceGroupAccessRights"
            },
            "description": "service access rights per group id"
          },
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path",
            "example": [
              "simcore/services/comp/itis/sleeper",
              "simcore/services/dynamic/3dviewer"
            ]
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number",
            "example": [
              "1.0.0",
              "0.0.1"
            ]
          },
          "integration-version": {
            "title": "Integration-Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "integration version number",
            "example": "1.0.0"
          },
          "type": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "badges": {
            "title": "Badges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "authors": {
            "title": "Authors",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "description": "email to correspond to the authors about the node",
            "format": "email",
            "example": [
              "lab@net.flix"
            ]
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "definition of the inputs of this node"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "definition of the outputs of this node"
          },
          "owner": {
            "title": "Owner",
            "type": "string",
            "format": "email"
          }
        },
        "additionalProperties": false
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display",
            "example": [
              1,
              -0.2
            ]
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed",
            "example": [
              "number",
              "boolean",
              "data:*/*",
              "data:text/*",
              "data:[image/jpeg,image/png]",
              "data:application/json",
              "data:application/json;schema=https://my-schema/not/really/schema.json",
              "data:application/vnd.ms-excel",
              "data:text/plain",
              "data:application/hdf5",
              "data:application/edu.ucdavis@ceclancy.xyz"
            ]
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files",
            "example": [
              {
                "dir/input1.txt": "key_1",
                "dir33/input2.txt": "key2"
              }
            ]
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              },
              {
                "type": "integer"
              }
            ],
            "example": [
              "Dog",
              true
            ]
          }
        },
        "additionalProperties": false
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "computational",
          "dynamic"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceUpdate": {
        "title": "ServiceUpdate",
        "type": "object",
        "properties": {
          "access_rights": {
            "title": "Access Rights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceGroupAccessRights"
            },
            "description": "service access rights per group id"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "classifiers": {
            "title": "Classifiers",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "minimum Height of the textarea"
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/WidgetType"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
