# This config shall not be used alone but after docker-compose.yml
#
# NOTES:
# - Overrides docker-compose.yml config when deploying services locally
# - Should not introduce a substantial different with respect the configuration deployed
# - Added ports to enforce they are published in the swarm (e.g. for integration testing).
# - sidecar cannot publish port with ingress mode since it can't be used with dnsrr mode
# - Port bindings "800X:8000" reserved for rest apis (e.g. /docs, /redoc)
# - Port bindings "300X:3000" reserved for remote debugging
#   - debug mode can be activated if SC_BOOT_MODE=debug-ptvsd (this is the default in devel).
#   - use vscode debugger "Python: Remote Attach *" config in  ''.vscode-template/launch.json'
#
x-common-environment: &common_environment
  SWARM_STACK_NAME : ${SWARM_STACK_NAME:-simcore_local}
services:
  api-server:
    environment:
      <<: *common_environment
      API_SERVER_REMOTE_DEBUG_PORT : 3000
    ports:
      - "8006:8000"
      - "3006:3000"

  autoscaling:
    environment:
      <<: *common_environment
      AUTOSCALING_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8007:8000"
      - "3012:3000"

  catalog:
    environment:
      <<: *common_environment
      CATALOG_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8005:8000"
      - "3005:3000"

  clusters-keeper:
    environment:
      <<: *common_environment
      CLUSTERS_KEEPER_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8010:8000"
      - "3015:3000"

  director:
    environment:
      <<: *common_environment
    ports:
      - "8080"
      - "3004:3000"

  director-v2:
    environment:
      <<: *common_environment
      DYNAMIC_SIDECAR_PROMETHEUS_SERVICE_LABELS : "{}"
      DIRECTOR_V2_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8000"
      - "3009:3000"

  datcore-adapter:
    environment:
      <<: *common_environment
      DATCORE_ADAPTER_REMOTE_DEBUG_PORT : 3000
    ports:
      - "8000"
      - "3010:3000"

  efs-guardian:
    environment:
      <<: *common_environment
      EFS_GUARDIAN_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8013:8000"
      - "3020:3000"

  invitations:
    environment:
      <<: *common_environment
      INVITATIONS_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8008:8000"
      - "3017:3000"

  payments:
    environment:
      <<: *common_environment
      PAYMENTS_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8011:8000"
      - "3018:3000"

  dynamic-schdlr:
    environment:
      <<: *common_environment
      DYNAMIC_SCHEDULER_REMOTE_DEBUGGING_PORT : 3000
    ports:
     - "8012:8000"
     - "3016:3000"
    deploy:
      replicas: 2

  resource-usage-tracker:
    environment:
      RESOURCE_USAGE_TRACKER_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8009:8000"
      - "3014:3000"

  storage:
    environment:
      <<: *common_environment
      STORAGE_REMOTE_DEBUGGING_PORT : 3000
    ports:
      - "8080"
      - "3003:3000"

  webserver:
    environment: &webserver_environment_local
      <<: *common_environment
    ports:
      - "8080"
      - "3001:3000"
    deploy:
      labels:
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.sticky.cookie.secure=false
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver_local.service=${SWARM_STACK_NAME}_webserver
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver_local.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver_local.rule=hostregexp(`{host:.+}`) && PathPrefix(`/dev/`)
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver_local.priority=3
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver_local.middlewares=${SWARM_STACK_NAME}_gzip@docker, ${SWARM_STACK_NAME_NO_HYPHEN}_sslheader@docker, ${SWARM_STACK_NAME}_webserver_retry

  wb-api-server:
    environment:
      <<: *webserver_environment_local
    ports:
      - "8080"
      - "3019:3000"

  wb-db-event-listener:
    environment:
      <<: *webserver_environment_local
    ports:
      - "8080"
      - "3013:3000"

  wb-garbage-collector:
    environment:
      <<: *webserver_environment_local
    ports:
      - "8080"
      - "3011:3000"

  agent:
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes/:/var/lib/docker/volumes/
    environment:
      <<: *common_environment
      AGENT_VOLUMES_CLEANUP_TARGET_SWARM_STACK_NAME : ${SWARM_STACK_NAME:-simcore_local}

  dask-sidecar:
    environment:
      <<: *common_environment

  dask-scheduler:
    environment:
      <<: *common_environment
    ports:
      # dashboard UI
      - "8787:8787"
      # scheduler API
      - "8786:8786"

  postgres:
    ports:
      - "5432:5432"
    # https://www.postgresql.org/docs/10/runtime-config-logging.html#GUC-LOG-STATEMENT
    command:
      [
        "postgres",
        "-c",
        "tcp_keepalives_idle=600",
        "-c",
        "tcp_keepalives_interval=600",
        "-c",
        "tcp_keepalives_count=5",
        "-c",
        "log_statement=all",
        "-c",
        "log_connections=true",
        "-c",
        "log_disconnections=true",
        "-c",
        "log_duration=true",
        "-c",
        "log_line_prefix=%m [%p] %q%u@%d/%a ",
        "-c",
        'listen_addresses="*"',
        "-c",
        "max_connections=413",
        "-c",
        "shared_buffers=256MB"
      ]

  rabbit:
    ports:
      - "5672"
      - "15672:15672"
      - "15692"

  redis:
    ports:
      - "6379"

  traefik:
    ports:
      - target: 80
        published: 9081
      - target: 10081
        published: 10081
      - target: 8080
        published: 8080
    deploy:
      labels:
        # traefik dashboard UI accessible through http://127.0.0.1:8080/dashboard/
        # traefik REST API accessible through for example http://127.0.0.1:8080/api/http/routers
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        - traefik.enable=true
        - traefik.http.routers.${SWARM_STACK_NAME}_api_internal.service=api@internal
        - traefik.http.routers.${SWARM_STACK_NAME}_api_internal.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)
        - traefik.http.routers.${SWARM_STACK_NAME}_api_internal.entrypoints=traefik_monitor
        - traefik.http.routers.${SWARM_STACK_NAME}_api_internal.middlewares=${SWARM_STACK_NAME}_gzip@docker
        - traefik.http.services.${SWARM_STACK_NAME}_api_internal.loadbalancer.server.port=8080

  whoami:
    image: "containous/whoami"
    # NOTE: helper service allows to better understand how the host gets forwarded inside the simcore stack
    deploy:
      labels:
        # whoami accessible through http://127.0.0.1:8080/whoami
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_whoami.loadbalancer.server.port=80
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.rule=PathPrefix(`/whoami`)
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.entrypoints=traefik_monitor
        - traefik.http.routers.${SWARM_STACK_NAME}_whoami.middlewares=${SWARM_STACK_NAME}_gzip@docker
