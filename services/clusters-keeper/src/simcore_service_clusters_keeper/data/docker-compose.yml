version: "3.8"
services:
  dask-scheduler:
    image: ${DOCKER_REGISTRY:-itisfoundation}/dask-sidecar:${DOCKER_IMAGE_TAG}
    init: true
    hostname: "{{.Node.Hostname}}-{{.Task.Slot}}"
    networks:
      - cluster
    environment:
      DASK_TLS_CA_FILE: ${DASK_TLS_CA_FILE}
      DASK_TLS_CERT: ${DASK_TLS_CERT}
      DASK_TLS_KEY: ${DASK_TLS_KEY}
      DASK_SCHEDULER_URL: tls://dask-scheduler:8786
      DASK_START_AS_SCHEDULER: 1
      DASK_WORKER_SATURATION: ${DASK_WORKER_SATURATION}
      LOG_LEVEL: ${LOG_LEVEL}
    ports:
      - 8786:8786 # dask-scheduler access
      - 8787:8787 # dashboard
    deploy:
      labels:
        prometheus-job: scheduler
        prometheus-port: 8787
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          memory: 2048M
    secrets:
      - source: dask_tls_ca
        target: ${DASK_TLS_CA_FILE}
        mode: 444
      - source: dask_tls_key
        target: ${DASK_TLS_KEY}
        mode: 444
      - source: dask_tls_cert
        target: ${DASK_TLS_CERT}
        mode: 444

  dask-sidecar:
    image: ${DOCKER_REGISTRY:-itisfoundation}/dask-sidecar:${DOCKER_IMAGE_TAG}
    init: true
    hostname: "{{.Node.Hostname}}-{{.Task.Slot}}"
    volumes:
      - computational_shared_data:${SIDECAR_COMP_SERVICES_SHARED_FOLDER:-/home/scu/computational_shared_data}
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${ETC_HOSTNAME:-/etc/hostname}:/home/scu/hostname:ro
    networks:
      - cluster
    environment:
      DASK_LOG_FORMAT_LOCAL_DEV_ENABLED: 1
      DASK_NPROCS: 1
      DASK_NTHREADS: ${DASK_NTHREADS}
      DASK_SCHEDULER_URL: tls://dask-scheduler:8786
      DASK_SIDECAR_NON_USABLE_RAM: 0
      DASK_SIDECAR_NUM_NON_USABLE_CPUS: 0
      DASK_TLS_CA_FILE: ${DASK_TLS_CA_FILE}
      DASK_TLS_CERT: ${DASK_TLS_CERT}
      DASK_TLS_KEY: ${DASK_TLS_KEY}
      DASK_WORKER_SATURATION: ${DASK_WORKER_SATURATION}
      LOG_LEVEL: ${LOG_LEVEL}
      SIDECAR_COMP_SERVICES_SHARED_FOLDER: /home/scu/computational_shared_data
      SIDECAR_COMP_SERVICES_SHARED_VOLUME_NAME: computational_shared_data
    deploy:
      mode: global
      labels:
        prometheus-job: sidecars
        prometheus-port: 8787
      placement:
        constraints:
          - "node.role==worker"
    secrets:
      - source: dask_tls_ca
        target: ${DASK_TLS_CA_FILE}
        mode: 444
      - source: dask_tls_key
        target: ${DASK_TLS_KEY}
        mode: 444
      - source: dask_tls_cert
        target: ${DASK_TLS_CERT}
        mode: 444

  autoscaling:
    image: ${DOCKER_REGISTRY:-itisfoundation}/autoscaling:${DOCKER_IMAGE_TAG}
    init: true
    hostname: "{{.Node.Hostname}}-{{.Task.Slot}}"
    environment:
      AUTOSCALING_EC2_ACCESS_KEY_ID: ${CLUSTERS_KEEPER_EC2_ACCESS_KEY_ID}
      AUTOSCALING_EC2_ENDPOINT: ${CLUSTERS_KEEPER_EC2_ENDPOINT}
      AUTOSCALING_EC2_REGION_NAME: ${CLUSTERS_KEEPER_EC2_REGION_NAME}
      AUTOSCALING_EC2_SECRET_ACCESS_KEY: ${CLUSTERS_KEEPER_EC2_SECRET_ACCESS_KEY}
      AUTOSCALING_NODES_MONITORING: null
      AUTOSCALING_POLL_INTERVAL: 10
      DASK_MONITORING_URL: tls://dask-scheduler:8786
      DASK_SCHEDULER_AUTH: '{"type":"tls","tls_ca_file":"${DASK_TLS_CA_FILE}","tls_client_cert":"${DASK_TLS_CERT}","tls_client_key":"${DASK_TLS_KEY}"}'
      EC2_INSTANCES_ALLOWED_TYPES: ${WORKERS_EC2_INSTANCES_ALLOWED_TYPES}
      EC2_INSTANCES_CUSTOM_TAGS: ${WORKERS_EC2_INSTANCES_CUSTOM_TAGS}
      EC2_INSTANCES_KEY_NAME: ${WORKERS_EC2_INSTANCES_KEY_NAME}
      EC2_INSTANCES_MACHINES_BUFFER: 0
      EC2_INSTANCES_MAX_INSTANCES: ${WORKERS_EC2_INSTANCES_MAX_INSTANCES}
      EC2_INSTANCES_NAME_PREFIX: ${EC2_INSTANCES_NAME_PREFIX}
      EC2_INSTANCES_SECURITY_GROUP_IDS: ${WORKERS_EC2_INSTANCES_SECURITY_GROUP_IDS}
      EC2_INSTANCES_SUBNET_ID: ${WORKERS_EC2_INSTANCES_SUBNET_ID}
      EC2_INSTANCES_TIME_BEFORE_TERMINATION: ${WORKERS_EC2_INSTANCES_TIME_BEFORE_TERMINATION}
      LOG_FORMAT_LOCAL_DEV_ENABLED: 1
      LOG_LEVEL: ${LOG_LEVEL:-WARNING}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - cluster
    deploy:
      labels:
        prometheus-job: autoscaling
        prometheus-port: 8000
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          memory: 512M
    secrets:
      - source: dask_tls_ca
        target: ${DASK_TLS_CA_FILE}
        mode: 444
      - source: dask_tls_key
        target: ${DASK_TLS_KEY}
        mode: 444
      - source: dask_tls_cert
        target: ${DASK_TLS_CERT}
        mode: 444

  redis:
    # NOTE: currently autoscaling requires redis to run
    image: "redis:6.2.6@sha256:4bed291aa5efb9f0d77b76ff7d4ab71eee410962965d052552db1fb80576431d"
    init: true
    hostname: "{{.Node.Hostname}}-{{.Task.Slot}}"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - redis-data:/data
    networks:
      - cluster
    deploy:
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          memory: 512M
          cpus: "0.5"

  prometheus:
    image: prom/prometheus:v2.51.0@sha256:5ccad477d0057e62a7cd1981ffcc43785ac10c5a35522dc207466ff7e7ec845f
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.config.file=/etc/prometheus/web.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.size=1GB"
    ports:
      - 9090:9090
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
      - source: prometheus-web-config
        target: /etc/prometheus/web.yml
    volumes:
      - prometheus-data:/prometheus
      - /var/run/docker.sock:/var/run/docker.sock:ro
    user: root # because of docker
    networks:
      - cluster
    deploy:
      placement:
        constraints:
          - "node.role==manager"
      resources:
        limits:
          memory: 1024M
          cpus: "1.0"

networks:
  cluster:

configs:
  prometheus-config:
    file: ./prometheus.yml
  prometheus-web-config:
    file: ./prometheus-web.yml

volumes:
  computational_shared_data:
    name: computational_shared_data
  redis-data:
  prometheus-data:

secrets:
  dask_tls_ca:
    file: ${DASK_TLS_CA_FILE}
  dask_tls_key:
    file: ${DASK_TLS_KEY}
  dask_tls_cert:
    file: ${DASK_TLS_CERT}
