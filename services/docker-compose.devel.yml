# Overrides docker-compose.yml config when deploying services in development mode,
#  i.e. binding with source code in source
#
# NOTES:
# - port 3000 used for ptsv
#
version: "3.7"
services:
  api-server:
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - ./api-server:/devel/services/api-server
      - ../packages:/devel/packages

  catalog:
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - ./catalog:/devel/services/catalog
      - ../packages:/devel/packages

  director:
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - LOGLEVEL=debug
    volumes:
      - ./director:/devel/services/director
      - ../packages:/devel/packages
      - ../api:/devel/services/api

  director-v2:
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - ./director-v2:/devel/services/director-v2
      - ../packages:/devel/packages

  webserver:
    volumes:
      - ./web/server:/devel/services/web/server
      - ./web/client/source-output:/devel/services/web/client
      - ../packages:/devel/packages
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - WEBSERVER_RESOURCES_DELETION_TIMEOUT_SECONDS=15
      - WEBSERVER_LOGLEVEL=${LOG_LEVEL:-DEBUG}

  sidecar:
    volumes:
      - ./sidecar:/devel/services/sidecar
      - ./storage/client-sdk:/devel/services/storage/client-sdk
      - ../packages:/devel/packages
      - ${ETC_HOSTNAME:-/etc/hostname}:/home/scu/hostname:ro
    environment:
      # force to start as cpu mode otherwise it will boot in gpu mode in development
      - START_AS_MODE_CPU=1
      - SC_BOOT_MODE=debug-ptvsd
      - SIDECAR_LOGLEVEL=DEBUG
    ports:
      - "3002:3000"
    deploy:
      # NOTE: Allows 3002 to be exposed for ptvsd
      endpoint_mode: vip
      replicas: 1

  # adding a separate worker to handling GPU mode for development
  # in production the sidecar autodetects its hardware and start either in MPI, CPU or GPU mode
  sidecar_gpu:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    init: true
    deploy:
      mode: replicated
      replicas: 1
      # NOTE: Allows 3007 to be exposed for ptvsd
      endpoint_mode: vip
      resources:
        reservations:
          cpus: "0.1"
          memory: "100M"
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ./sidecar:/devel/services/sidecar
      - ./storage/client-sdk:/devel/services/storage/client-sdk
      - ../packages:/devel/packages
      - ${ETC_HOSTNAME:-/etc/hostname}:/home/scu/hostname:ro
    ports:
      - "3007:3000"
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - SIDECAR_LOGLEVEL=DEBUG
      - START_AS_MODE_GPU=1
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - RABBIT_CHANNELS=${RABBIT_CHANNELS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_PATH=${REGISTRY_PATH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - SIDECAR_HOST_HOSTNAME_PATH=${SIDECAR_HOST_HOSTNAME_PATH:-/home/scu/hostname}
    networks:
      - computational_services_subnet

  # adding a separate worker to handling MPI mode for development
  # in production the sidecar autodetects its hardware and start either in MPI, CPU or GPU mode
  sidecar_mpi:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    init: true
    deploy:
      mode: replicated
      replicas: 1
      # NOTE: Allows 3007 to be exposed for ptvsd
      endpoint_mode: vip
      resources:
        reservations:
          cpus: "0.1"
          memory: "100M"
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ./sidecar:/devel/services/sidecar
      - ./storage/client-sdk:/devel/services/storage/client-sdk
      - ../packages:/devel/packages
      - ${ETC_HOSTNAME:-/etc/hostname}:/home/scu/hostname:ro
    ports:
      - "3008:3000"
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - SIDECAR_LOGLEVEL=DEBUG
      - START_AS_MODE_CPU=1
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - RABBIT_CHANNELS=${RABBIT_CHANNELS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_PATH=${REGISTRY_PATH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - SIDECAR_HOST_HOSTNAME_PATH=${SIDECAR_HOST_HOSTNAME_PATH:-/home/scu/hostname}
      - TARGET_MPI_NODE_CPU_COUNT=${DEV_PC_CPU_COUNT:-0} # development computer CPU count, if env var is missing put to 0 to disable
    networks:
      - computational_services_subnet

  storage:
    volumes:
      - ./storage:/devel/services/storage
      - ../packages:/devel/packages
    environment:
      - SC_BOOT_MODE=debug-ptvsd
      - STORAGE_LOGLEVEL=DEBUG
