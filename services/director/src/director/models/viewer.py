# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from director.models.base_model_ import Model
from director import util


class Viewer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, port: int=None):  # noqa: E501
        """Viewer - a model defined in Swagger

        :param ip: The ip of this Viewer.  # noqa: E501
        :type ip: str
        :param port: The port of this Viewer.  # noqa: E501
        :type port: int
        """
        self.swagger_types = {
            'ip': str,
            'port': int
        }

        self.attribute_map = {
            'ip': 'ip',
            'port': 'port'
        }

        self._ip = ip
        self._port = port

    @classmethod
    def from_dict(cls, dikt) -> 'Viewer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Viewer of this Viewer.  # noqa: E501
        :rtype: Viewer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this Viewer.

        The IP address where the viewer is served  # noqa: E501

        :return: The ip of this Viewer.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Viewer.

        The IP address where the viewer is served  # noqa: E501

        :param ip: The ip of this Viewer.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def port(self) -> int:
        """Gets the port of this Viewer.

        The port where the viewer is served  # noqa: E501

        :return: The port of this Viewer.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Viewer.

        The port where the viewer is served  # noqa: E501

        :param port: The port of this Viewer.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501
        if port is not None and port < 1:  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port
