# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from director.generated_code.models.base_model_ import Model
from director.generated_code import util


class RunningService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, published_port: int=None, entry_point: str=None):  # noqa: E501
        """RunningService - a model defined in OpenAPI

        :param published_port: The published_port of this RunningService.  # noqa: E501
        :type published_port: int
        :param entry_point: The entry_point of this RunningService.  # noqa: E501
        :type entry_point: str
        """
        self.openapi_types = {
            'published_port': int,
            'entry_point': str
        }

        self.attribute_map = {
            'published_port': 'published_port',
            'entry_point': 'entry_point'
        }

        self._published_port = published_port
        self._entry_point = entry_point

    @classmethod
    def from_dict(cls, dikt) -> 'RunningService':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RunningService of this RunningService.  # noqa: E501
        :rtype: RunningService
        """
        return util.deserialize_model(dikt, cls)

    @property
    def published_port(self) -> int:
        """Gets the published_port of this RunningService.

        The ports where the service provides its interface  # noqa: E501

        :return: The published_port of this RunningService.
        :rtype: int
        """
        return self._published_port

    @published_port.setter
    def published_port(self, published_port: int):
        """Sets the published_port of this RunningService.

        The ports where the service provides its interface  # noqa: E501

        :param published_port: The published_port of this RunningService.
        :type published_port: int
        """
        if published_port is None:
            raise ValueError("Invalid value for `published_port`, must not be `None`")  # noqa: E501
        if published_port is not None and published_port < 1:  # noqa: E501
            raise ValueError("Invalid value for `published_port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._published_port = published_port

    @property
    def entry_point(self) -> str:
        """Gets the entry_point of this RunningService.

        The entry point where the service provides its interface if specified  # noqa: E501

        :return: The entry_point of this RunningService.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point: str):
        """Sets the entry_point of this RunningService.

        The entry point where the service provides its interface if specified  # noqa: E501

        :param entry_point: The entry_point of this RunningService.
        :type entry_point: str
        """

        self._entry_point = entry_point
