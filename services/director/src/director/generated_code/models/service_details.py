# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from director.generated_code.models.base_model_ import Model
from director.generated_code.models.author_details import AuthorDetails  # noqa: F401,E501
from director.generated_code.models.port import Port  # noqa: F401,E501
from director.generated_code.models.viewer import Viewer  # noqa: F401,E501
from director.generated_code import util


class ServiceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authors: AuthorDetails=None, contact: str=None, description: str=None, inputs: List[Port]=None, outputs: List[Port]=None, key: str=None, name: str=None, tag: str=None, viewer: Viewer=None):  # noqa: E501
        """ServiceDetails - a model defined in OpenAPI

        :param authors: The authors of this ServiceDetails.  # noqa: E501
        :type authors: AuthorDetails
        :param contact: The contact of this ServiceDetails.  # noqa: E501
        :type contact: str
        :param description: The description of this ServiceDetails.  # noqa: E501
        :type description: str
        :param inputs: The inputs of this ServiceDetails.  # noqa: E501
        :type inputs: List[Port]
        :param outputs: The outputs of this ServiceDetails.  # noqa: E501
        :type outputs: List[Port]
        :param key: The key of this ServiceDetails.  # noqa: E501
        :type key: str
        :param name: The name of this ServiceDetails.  # noqa: E501
        :type name: str
        :param tag: The tag of this ServiceDetails.  # noqa: E501
        :type tag: str
        :param viewer: The viewer of this ServiceDetails.  # noqa: E501
        :type viewer: Viewer
        """
        self.openapi_types = {
            'authors': AuthorDetails,
            'contact': str,
            'description': str,
            'inputs': List[Port],
            'outputs': List[Port],
            'key': str,
            'name': str,
            'tag': str,
            'viewer': Viewer
        }

        self.attribute_map = {
            'authors': 'authors',
            'contact': 'contact',
            'description': 'description',
            'inputs': 'inputs',
            'outputs': 'outputs',
            'key': 'key',
            'name': 'name',
            'tag': 'tag',
            'viewer': 'viewer'
        }

        self._authors = authors
        self._contact = contact
        self._description = description
        self._inputs = inputs
        self._outputs = outputs
        self._key = key
        self._name = name
        self._tag = tag
        self._viewer = viewer

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDetails of this ServiceDetails.  # noqa: E501
        :rtype: ServiceDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authors(self) -> AuthorDetails:
        """Gets the authors of this ServiceDetails.


        :return: The authors of this ServiceDetails.
        :rtype: AuthorDetails
        """
        return self._authors

    @authors.setter
    def authors(self, authors: AuthorDetails):
        """Sets the authors of this ServiceDetails.


        :param authors: The authors of this ServiceDetails.
        :type authors: AuthorDetails
        """
        if authors is None:
            raise ValueError("Invalid value for `authors`, must not be `None`")  # noqa: E501

        self._authors = authors

    @property
    def contact(self) -> str:
        """Gets the contact of this ServiceDetails.

        The email address to go for questions on the service  # noqa: E501

        :return: The contact of this ServiceDetails.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact: str):
        """Sets the contact of this ServiceDetails.

        The email address to go for questions on the service  # noqa: E501

        :param contact: The contact of this ServiceDetails.
        :type contact: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def description(self) -> str:
        """Gets the description of this ServiceDetails.

        The human readable description of the service  # noqa: E501

        :return: The description of this ServiceDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ServiceDetails.

        The human readable description of the service  # noqa: E501

        :param description: The description of this ServiceDetails.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def inputs(self) -> List[Port]:
        """Gets the inputs of this ServiceDetails.

        The inputs of the service  # noqa: E501

        :return: The inputs of this ServiceDetails.
        :rtype: List[Port]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[Port]):
        """Sets the inputs of this ServiceDetails.

        The inputs of the service  # noqa: E501

        :param inputs: The inputs of this ServiceDetails.
        :type inputs: List[Port]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def outputs(self) -> List[Port]:
        """Gets the outputs of this ServiceDetails.

        The outputs of the service  # noqa: E501

        :return: The outputs of this ServiceDetails.
        :rtype: List[Port]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[Port]):
        """Sets the outputs of this ServiceDetails.

        The outputs of the service  # noqa: E501

        :param outputs: The outputs of this ServiceDetails.
        :type outputs: List[Port]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs

    @property
    def key(self) -> str:
        """Gets the key of this ServiceDetails.

        The location of the service  # noqa: E501

        :return: The key of this ServiceDetails.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ServiceDetails.

        The location of the service  # noqa: E501

        :param key: The key of this ServiceDetails.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this ServiceDetails.

        The name of the service  # noqa: E501

        :return: The name of this ServiceDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ServiceDetails.

        The name of the service  # noqa: E501

        :param name: The name of this ServiceDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tag(self) -> str:
        """Gets the tag of this ServiceDetails.

        The tag/version of the service  # noqa: E501

        :return: The tag of this ServiceDetails.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this ServiceDetails.

        The tag/version of the service  # noqa: E501

        :param tag: The tag of this ServiceDetails.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def viewer(self) -> Viewer:
        """Gets the viewer of this ServiceDetails.


        :return: The viewer of this ServiceDetails.
        :rtype: Viewer
        """
        return self._viewer

    @viewer.setter
    def viewer(self, viewer: Viewer):
        """Sets the viewer of this ServiceDetails.


        :param viewer: The viewer of this ServiceDetails.
        :type viewer: Viewer
        """

        self._viewer = viewer
