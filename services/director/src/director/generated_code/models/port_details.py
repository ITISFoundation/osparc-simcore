# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from director.generated_code.models.base_model_ import Model
from director.generated_code import util


class PortDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, label: str=None, desc: str=None, type: str=None, value: str=None):  # noqa: E501
        """PortDetails - a model defined in OpenAPI

        :param key: The key of this PortDetails.  # noqa: E501
        :type key: str
        :param label: The label of this PortDetails.  # noqa: E501
        :type label: str
        :param desc: The desc of this PortDetails.  # noqa: E501
        :type desc: str
        :param type: The type of this PortDetails.  # noqa: E501
        :type type: str
        :param value: The value of this PortDetails.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'key': str,
            'label': str,
            'desc': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'key': 'key',
            'label': 'label',
            'desc': 'desc',
            'type': 'type',
            'value': 'value'
        }

        self._key = key
        self._label = label
        self._desc = desc
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'PortDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PortDetails of this PortDetails.  # noqa: E501
        :rtype: PortDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this PortDetails.

        The unique key of the port  # noqa: E501

        :return: The key of this PortDetails.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this PortDetails.

        The unique key of the port  # noqa: E501

        :param key: The key of this PortDetails.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def label(self) -> str:
        """Gets the label of this PortDetails.

        The label of the port  # noqa: E501

        :return: The label of this PortDetails.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this PortDetails.

        The label of the port  # noqa: E501

        :param label: The label of this PortDetails.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def desc(self) -> str:
        """Gets the desc of this PortDetails.

        The human readable description of what the port is for  # noqa: E501

        :return: The desc of this PortDetails.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc: str):
        """Sets the desc of this PortDetails.

        The human readable description of what the port is for  # noqa: E501

        :param desc: The desc of this PortDetails.
        :type desc: str
        """
        if desc is None:
            raise ValueError("Invalid value for `desc`, must not be `None`")  # noqa: E501

        self._desc = desc

    @property
    def type(self) -> str:
        """Gets the type of this PortDetails.

        The type of the port:   * integer - An signed integer   * number - A floating point number   * bool - A boolean, True or False   * string - A chain of characters   * file-url - A URL pointing to a file   * folder-url - A URL pointing to a folder   # noqa: E501

        :return: The type of this PortDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this PortDetails.

        The type of the port:   * integer - An signed integer   * number - A floating point number   * bool - A boolean, True or False   * string - A chain of characters   * file-url - A URL pointing to a file   * folder-url - A URL pointing to a folder   # noqa: E501

        :param type: The type of this PortDetails.
        :type type: str
        """
        allowed_values = ["integer", "number", "bool", "string", "file-url", "folder-url"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> str:
        """Gets the value of this PortDetails.

        The value of the port. May be null if not yet defined.  # noqa: E501

        :return: The value of this PortDetails.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this PortDetails.

        The value of the port. May be null if not yet defined.  # noqa: E501

        :param value: The value of this PortDetails.
        :type value: str
        """
        # if value is None:
        #     raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
