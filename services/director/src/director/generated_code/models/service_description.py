# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from director.generated_code.models.base_model_ import Model
from director.generated_code.models.service_details import ServiceDetails  # noqa: F401,E501
from director.generated_code import util


class ServiceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, repos: List[str]=None, details: List[List[ServiceDetails]]=None):  # noqa: E501
        """ServiceDescription - a model defined in OpenAPI

        :param name: The name of this ServiceDescription.  # noqa: E501
        :type name: str
        :param repos: The repos of this ServiceDescription.  # noqa: E501
        :type repos: List[str]
        :param details: The details of this ServiceDescription.  # noqa: E501
        :type details: List[List[ServiceDetails]]
        """
        self.openapi_types = {
            'name': str,
            'repos': List[str],
            'details': List[List[ServiceDetails]]
        }

        self.attribute_map = {
            'name': 'name',
            'repos': 'repos',
            'details': 'details'
        }

        self._name = name
        self._repos = repos
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDescription of this ServiceDescription.  # noqa: E501
        :rtype: ServiceDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ServiceDescription.

        The name of the service  # noqa: E501

        :return: The name of this ServiceDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ServiceDescription.

        The name of the service  # noqa: E501

        :param name: The name of this ServiceDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def repos(self) -> List[str]:
        """Gets the repos of this ServiceDescription.

        The repositorie(s) that the service depends upon  # noqa: E501

        :return: The repos of this ServiceDescription.
        :rtype: List[str]
        """
        return self._repos

    @repos.setter
    def repos(self, repos: List[str]):
        """Sets the repos of this ServiceDescription.

        The repositorie(s) that the service depends upon  # noqa: E501

        :param repos: The repos of this ServiceDescription.
        :type repos: List[str]
        """
        if repos is None:
            raise ValueError("Invalid value for `repos`, must not be `None`")  # noqa: E501

        self._repos = repos

    @property
    def details(self) -> List[List[ServiceDetails]]:
        """Gets the details of this ServiceDescription.

        The details of the service  # noqa: E501

        :return: The details of this ServiceDescription.
        :rtype: List[List[ServiceDetails]]
        """
        return self._details

    @details.setter
    def details(self, details: List[List[ServiceDetails]]):
        """Sets the details of this ServiceDescription.

        The details of the service  # noqa: E501

        :param details: The details of this ServiceDescription.
        :type details: List[List[ServiceDetails]]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details
