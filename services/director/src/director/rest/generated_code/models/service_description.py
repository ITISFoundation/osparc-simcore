# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .service_details import ServiceDetails  # noqa: F401,E501
from .. import util


class ServiceDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, details: List[ServiceDetails]=None):  # noqa: E501
        """ServiceDescription - a model defined in OpenAPI

        :param key: The key of this ServiceDescription.  # noqa: E501
        :type key: str
        :param details: The details of this ServiceDescription.  # noqa: E501
        :type details: List[ServiceDetails]
        """
        self.openapi_types = {
            'key': str,
            'details': List[ServiceDetails]
        }

        self.attribute_map = {
            'key': 'key',
            'details': 'details'
        }

        self._key = key
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceDescription of this ServiceDescription.  # noqa: E501
        :rtype: ServiceDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this ServiceDescription.

        The key of the service  # noqa: E501

        :return: The key of this ServiceDescription.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ServiceDescription.

        The key of the service  # noqa: E501

        :param key: The key of this ServiceDescription.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def details(self) -> List[ServiceDetails]:
        """Gets the details of this ServiceDescription.

        The details of the service  # noqa: E501

        :return: The details of this ServiceDescription.
        :rtype: List[ServiceDetails]
        """
        return self._details

    @details.setter
    def details(self, details: List[ServiceDetails]):
        """Sets the details of this ServiceDescription.

        The details of the service  # noqa: E501

        :param details: The details of this ServiceDescription.
        :type details: List[ServiceDetails]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details
