# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .node_meta_v0 import NodeMetaV0  # noqa: F401,E501
from .. import util


class ServicesEnveloped(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[NodeMetaV0]=None, status: int=None):  # noqa: E501
        """ServicesEnveloped - a model defined in OpenAPI

        :param data: The data of this ServicesEnveloped.  # noqa: E501
        :type data: List[NodeMetaV0]
        :param status: The status of this ServicesEnveloped.  # noqa: E501
        :type status: int
        """
        self.openapi_types = {
            'data': List[NodeMetaV0],
            'status': int
        }

        self.attribute_map = {
            'data': 'data',
            'status': 'status'
        }

        self._data = data
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ServicesEnveloped':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServicesEnveloped of this ServicesEnveloped.  # noqa: E501
        :rtype: ServicesEnveloped
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[NodeMetaV0]:
        """Gets the data of this ServicesEnveloped.


        :return: The data of this ServicesEnveloped.
        :rtype: List[NodeMetaV0]
        """
        return self._data

    @data.setter
    def data(self, data: List[NodeMetaV0]):
        """Sets the data of this ServicesEnveloped.


        :param data: The data of this ServicesEnveloped.
        :type data: List[NodeMetaV0]
        """

        self._data = data

    @property
    def status(self) -> int:
        """Gets the status of this ServicesEnveloped.


        :return: The status of this ServicesEnveloped.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this ServicesEnveloped.


        :param status: The status of this ServicesEnveloped.
        :type status: int
        """

        self._status = status
