# coding: utf-8

from datetime import date, datetime
from typing import Dict, List, Type

from .. import util
from .base_model_ import Model


class InlineResponse2002DataNodeRequirements(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(
        self, cpu: float = 1, gpu: int = None, ram: int = None, mpi: int = None
    ):
        """InlineResponse2002DataNodeRequirements - a model defined in OpenAPI

        :param cpu: The cpu of this InlineResponse2002DataNodeRequirements.
        :param gpu: The gpu of this InlineResponse2002DataNodeRequirements.
        :param ram: The ram of this InlineResponse2002DataNodeRequirements.
        :param mpi: The mpi of this InlineResponse2002DataNodeRequirements.
        """
        self.openapi_types = {"cpu": float, "gpu": int, "ram": int, "mpi": int}

        self.attribute_map = {"cpu": "CPU", "gpu": "GPU", "ram": "RAM", "mpi": "MPI"}

        self._cpu = cpu
        self._gpu = gpu
        self._ram = ram
        self._mpi = mpi

    @classmethod
    def from_dict(cls, dikt: dict) -> "InlineResponse2002DataNodeRequirements":
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_response_200_2_data_node_requirements of this InlineResponse2002DataNodeRequirements.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this InlineResponse2002DataNodeRequirements.


        :return: The cpu of this InlineResponse2002DataNodeRequirements.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this InlineResponse2002DataNodeRequirements.


        :param cpu: The cpu of this InlineResponse2002DataNodeRequirements.
        :type cpu: float
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")
        if cpu is not None and cpu < 1:
            raise ValueError(
                "Invalid value for `cpu`, must be a value greater than or equal to `1`"
            )

        self._cpu = cpu

    @property
    def gpu(self):
        """Gets the gpu of this InlineResponse2002DataNodeRequirements.


        :return: The gpu of this InlineResponse2002DataNodeRequirements.
        :rtype: int
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this InlineResponse2002DataNodeRequirements.


        :param gpu: The gpu of this InlineResponse2002DataNodeRequirements.
        :type gpu: int
        """
        if gpu is not None and gpu < 0:
            raise ValueError(
                "Invalid value for `gpu`, must be a value greater than or equal to `0`"
            )

        self._gpu = gpu

    @property
    def ram(self):
        """Gets the ram of this InlineResponse2002DataNodeRequirements.


        :return: The ram of this InlineResponse2002DataNodeRequirements.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this InlineResponse2002DataNodeRequirements.


        :param ram: The ram of this InlineResponse2002DataNodeRequirements.
        :type ram: int
        """
        if ram is None:
            raise ValueError("Invalid value for `ram`, must not be `None`")
        if ram is not None and ram < 1024:
            raise ValueError(
                "Invalid value for `ram`, must be a value greater than or equal to `1024`"
            )

        self._ram = ram

    @property
    def mpi(self):
        """Gets the mpi of this InlineResponse2002DataNodeRequirements.


        :return: The mpi of this InlineResponse2002DataNodeRequirements.
        :rtype: int
        """
        return self._mpi

    @mpi.setter
    def mpi(self, mpi):
        """Sets the mpi of this InlineResponse2002DataNodeRequirements.


        :param mpi: The mpi of this InlineResponse2002DataNodeRequirements.
        :type mpi: int
        """
        if mpi is not None and mpi > 1:
            raise ValueError(
                "Invalid value for `mpi`, must be a value less than or equal to `1`"
            )

        self._mpi = mpi
