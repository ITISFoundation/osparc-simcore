# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from .base_model_ import Model
from .. import util


class InlineResponse2001Badges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, image: str=None, url: str=None):
        """InlineResponse2001Badges - a model defined in OpenAPI

        :param name: The name of this InlineResponse2001Badges.
        :param image: The image of this InlineResponse2001Badges.
        :param url: The url of this InlineResponse2001Badges.
        """
        self.openapi_types = {
            'name': str,
            'image': str,
            'url': str
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'url': 'url'
        }

        self._name = name
        self._image = image
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineResponse2001Badges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_response_200_1_badges of this InlineResponse2001Badges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this InlineResponse2001Badges.

        Name of the subject

        :return: The name of this InlineResponse2001Badges.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2001Badges.

        Name of the subject

        :param name: The name of this InlineResponse2001Badges.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def image(self):
        """Gets the image of this InlineResponse2001Badges.

        Url to the shield

        :return: The image of this InlineResponse2001Badges.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this InlineResponse2001Badges.

        Url to the shield

        :param image: The image of this InlineResponse2001Badges.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def url(self):
        """Gets the url of this InlineResponse2001Badges.

        Link to status

        :return: The url of this InlineResponse2001Badges.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse2001Badges.

        Link to status

        :param url: The url of this InlineResponse2001Badges.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
