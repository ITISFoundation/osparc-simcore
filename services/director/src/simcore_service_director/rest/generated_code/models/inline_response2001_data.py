# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from .base_model_ import Model
import re
from .. import util


class InlineResponse2001Data(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_point: str=None, published_port: int=None, service_basepath: str='', service_host: str=None, service_key: str=None, service_message: str=None, service_port: int=None, service_state: str=None, service_uuid: str=None, service_version: str=None):
        """InlineResponse2001Data - a model defined in OpenAPI

        :param entry_point: The entry_point of this InlineResponse2001Data.
        :param published_port: The published_port of this InlineResponse2001Data.
        :param service_basepath: The service_basepath of this InlineResponse2001Data.
        :param service_host: The service_host of this InlineResponse2001Data.
        :param service_key: The service_key of this InlineResponse2001Data.
        :param service_message: The service_message of this InlineResponse2001Data.
        :param service_port: The service_port of this InlineResponse2001Data.
        :param service_state: The service_state of this InlineResponse2001Data.
        :param service_uuid: The service_uuid of this InlineResponse2001Data.
        :param service_version: The service_version of this InlineResponse2001Data.
        """
        self.openapi_types = {
            'entry_point': str,
            'published_port': int,
            'service_basepath': str,
            'service_host': str,
            'service_key': str,
            'service_message': str,
            'service_port': int,
            'service_state': str,
            'service_uuid': str,
            'service_version': str
        }

        self.attribute_map = {
            'entry_point': 'entry_point',
            'published_port': 'published_port',
            'service_basepath': 'service_basepath',
            'service_host': 'service_host',
            'service_key': 'service_key',
            'service_message': 'service_message',
            'service_port': 'service_port',
            'service_state': 'service_state',
            'service_uuid': 'service_uuid',
            'service_version': 'service_version'
        }

        self._entry_point = entry_point
        self._published_port = published_port
        self._service_basepath = service_basepath
        self._service_host = service_host
        self._service_key = service_key
        self._service_message = service_message
        self._service_port = service_port
        self._service_state = service_state
        self._service_uuid = service_uuid
        self._service_version = service_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InlineResponse2001Data':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The inline_response_200_1_data of this InlineResponse2001Data.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_point(self):
        """Gets the entry_point of this InlineResponse2001Data.

        The entry point where the service provides its interface if specified

        :return: The entry_point of this InlineResponse2001Data.
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this InlineResponse2001Data.

        The entry point where the service provides its interface if specified

        :param entry_point: The entry_point of this InlineResponse2001Data.
        :type entry_point: str
        """

        self._entry_point = entry_point

    @property
    def published_port(self):
        """Gets the published_port of this InlineResponse2001Data.

        The ports where the service provides its interface

        :return: The published_port of this InlineResponse2001Data.
        :rtype: int
        """
        return self._published_port

    @published_port.setter
    def published_port(self, published_port):
        """Sets the published_port of this InlineResponse2001Data.

        The ports where the service provides its interface

        :param published_port: The published_port of this InlineResponse2001Data.
        :type published_port: int
        """
        if published_port is None:
            raise ValueError("Invalid value for `published_port`, must not be `None`")
        if published_port is not None and published_port < 1:
            raise ValueError("Invalid value for `published_port`, must be a value greater than or equal to `1`")

        self._published_port = published_port

    @property
    def service_basepath(self):
        """Gets the service_basepath of this InlineResponse2001Data.

        different base path where current service is mounted otherwise defaults to root

        :return: The service_basepath of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_basepath

    @service_basepath.setter
    def service_basepath(self, service_basepath):
        """Sets the service_basepath of this InlineResponse2001Data.

        different base path where current service is mounted otherwise defaults to root

        :param service_basepath: The service_basepath of this InlineResponse2001Data.
        :type service_basepath: str
        """

        self._service_basepath = service_basepath

    @property
    def service_host(self):
        """Gets the service_host of this InlineResponse2001Data.

        service host name within the network

        :return: The service_host of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_host

    @service_host.setter
    def service_host(self, service_host):
        """Sets the service_host of this InlineResponse2001Data.

        service host name within the network

        :param service_host: The service_host of this InlineResponse2001Data.
        :type service_host: str
        """
        if service_host is None:
            raise ValueError("Invalid value for `service_host`, must not be `None`")

        self._service_host = service_host

    @property
    def service_key(self):
        """Gets the service_key of this InlineResponse2001Data.

        distinctive name for the node based on the docker registry path

        :return: The service_key of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this InlineResponse2001Data.

        distinctive name for the node based on the docker registry path

        :param service_key: The service_key of this InlineResponse2001Data.
        :type service_key: str
        """
        if service_key is None:
            raise ValueError("Invalid value for `service_key`, must not be `None`")
        if service_key is not None and not re.search(r'^(simcore)\/(services)\/(comp|dynamic)(\/[^\s\/]+)+$', service_key):
            raise ValueError("Invalid value for `service_key`, must be a follow pattern or equal to `/^(simcore)\/(services)\/(comp|dynamic)(\/[^\s\/]+)+$/`")

        self._service_key = service_key

    @property
    def service_message(self):
        """Gets the service_message of this InlineResponse2001Data.

        the service message

        :return: The service_message of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_message

    @service_message.setter
    def service_message(self, service_message):
        """Sets the service_message of this InlineResponse2001Data.

        the service message

        :param service_message: The service_message of this InlineResponse2001Data.
        :type service_message: str
        """

        self._service_message = service_message

    @property
    def service_port(self):
        """Gets the service_port of this InlineResponse2001Data.

        port to access the service within the network

        :return: The service_port of this InlineResponse2001Data.
        :rtype: int
        """
        return self._service_port

    @service_port.setter
    def service_port(self, service_port):
        """Sets the service_port of this InlineResponse2001Data.

        port to access the service within the network

        :param service_port: The service_port of this InlineResponse2001Data.
        :type service_port: int
        """
        if service_port is None:
            raise ValueError("Invalid value for `service_port`, must not be `None`")
        if service_port is not None and service_port < 1:
            raise ValueError("Invalid value for `service_port`, must be a value greater than or equal to `1`")

        self._service_port = service_port

    @property
    def service_state(self):
        """Gets the service_state of this InlineResponse2001Data.

        the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start 

        :return: The service_state of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_state

    @service_state.setter
    def service_state(self, service_state):
        """Sets the service_state of this InlineResponse2001Data.

        the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start 

        :param service_state: The service_state of this InlineResponse2001Data.
        :type service_state: str
        """
        allowed_values = ["pending", "pulling", "starting", "running", "complete", "failed"]
        if service_state not in allowed_values:
            raise ValueError(
                "Invalid value for `service_state` ({0}), must be one of {1}"
                .format(service_state, allowed_values)
            )

        self._service_state = service_state

    @property
    def service_uuid(self):
        """Gets the service_uuid of this InlineResponse2001Data.

        The UUID attached to this service

        :return: The service_uuid of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_uuid

    @service_uuid.setter
    def service_uuid(self, service_uuid):
        """Sets the service_uuid of this InlineResponse2001Data.

        The UUID attached to this service

        :param service_uuid: The service_uuid of this InlineResponse2001Data.
        :type service_uuid: str
        """
        if service_uuid is None:
            raise ValueError("Invalid value for `service_uuid`, must not be `None`")

        self._service_uuid = service_uuid

    @property
    def service_version(self):
        """Gets the service_version of this InlineResponse2001Data.

        semantic version number

        :return: The service_version of this InlineResponse2001Data.
        :rtype: str
        """
        return self._service_version

    @service_version.setter
    def service_version(self, service_version):
        """Sets the service_version of this InlineResponse2001Data.

        semantic version number

        :param service_version: The service_version of this InlineResponse2001Data.
        :type service_version: str
        """
        if service_version is None:
            raise ValueError("Invalid value for `service_version`, must not be `None`")
        if service_version is not None and not re.search(r'^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$', service_version):
            raise ValueError("Invalid value for `service_version`, must be a follow pattern or equal to `/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){2}(-(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*)(\.(0|[1-9]\d*|\d*[-a-zA-Z][-\da-zA-Z]*))*)?(\+[-\da-zA-Z]+(\.[-\da-zA-Z-]+)*)?$/`")

        self._service_version = service_version
