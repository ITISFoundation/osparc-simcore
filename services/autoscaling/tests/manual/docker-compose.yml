services:
  rabbit:
    image: itisfoundation/rabbitmq:3.11.2-management
    init: true
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}-{{.Task.Slot}}"
    ports:
      # - "5672:5672"
      - "15672:15672"
      - "15692"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    healthcheck:
      # see https://www.rabbitmq.com/monitoring.html#individual-checks for info about health-checks available in rabbitmq
      test: rabbitmq-diagnostics -q status
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s

  redis:
    image: "redis:6.2.6@sha256:4bed291aa5efb9f0d77b76ff7d4ab71eee410962965d052552db1fb80576431d"
    init: true
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}-{{.Task.Slot}}"
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 50
    volumes:
      - redis-data:/data

  autoscaling:
    image: local/autoscaling:development
    init: true
    hostname: "{{.Node.Hostname}}-{{.Service.Name}}-{{.Task.Slot}}"
    ports:
      - "8006:8000"
      - "3012:3000"
    env_file:
      - .env
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ../../:/devel/services/autoscaling
      - ../../../../packages:/devel/packages
    deploy:
      placement:
        constraints:
          - "node.role==manager"
volumes:
  redis-data:
