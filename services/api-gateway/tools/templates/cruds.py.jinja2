import json
from typing import List, Optional

import sqlalchemy as sa

from .. import db
from ..orm import orm_{{ rnp }} as orm
from ..schemas import schemas_{{ rnp }} as schemas


async def list_{{ rnp }}(conn: db.SAConnection) -> List[schemas.DAGAtDB]:
    {{ rnp }} = []
    async for row in conn.execute(orm.{{ rnp }}.select()):
        if row:
            {{ rnp }}.append(schemas.DAGAtDB(**row))
    return {{ rnp }}


async def get_{{ rn }}(conn: db.SAConnection, {{ rn }}_id: int) -> Optional[schemas.DAGAtDB]:
    stmt = orm.{{ rnp }}.select().where(orm.{{ rnp }}.c.id == {{ rn }}_id)
    row: db.RowProxy = await (await conn.execute(stmt)).first()
    if row:
        return schemas.DAGAtDB(**row)
    return None


async def create_{{ rn }}(conn: db.SAConnection, {{ rn }}: schemas.DAGIn):
    stmt = orm.{{ rnp }}.insert().values(
        workbench=json.dumps({{ rn }}.dict()["workbench"]), **{{ rn }}.dict(exclude={"workbench"})
    )
    new_id: int = await (await conn.execute(stmt)).scalar()
    return new_id


async def replace_{{ rn }}(conn: db.SAConnection, {{ rn }}_id: int, {{ rn }}: schemas.DAGIn):
    stmt = (
        orm.{{ rnp }}.update()
        .values(
            workbench=json.dumps({{ rn }}.dict()["workbench"]),
            **{{ rn }}.dict(exclude={"workbench"})
        )
        .where(orm.{{ rnp }}.c.id == {{ rn }}_id)
    )
    await conn.execute(stmt)


async def update_{{ rn }}(conn: db.SAConnection, {{ rn }}_id: int, {{ rn }}: schemas.DAGIn):
    patch = {{ rn }}.dict(exclude_unset=True, exclude={"workbench"})
    if "workbench" in {{ rn }}.__fields_set__:
        patch["workbench"] = json.dumps(patch["workbench"])

    stmt = sa.update(orm.{{ rnp }}).values(**patch).where(orm.{{ rnp }}.c.id == {{ rn }}_id)
    res = await conn.execute(stmt)

    # TODO: dev asserts
    assert res.returns_rows == False  # nosec


async def delete_{{ rn }}(conn: db.SAConnection, {{ rn }}_id: int):
    stmt = sa.delete(orm.{{ rnp }}).where(orm.{{ rnp }}.c.id == {{ rn }}_id)
    await conn.execute(stmt)
