//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./modeler_types');
//HELPER FUNCTIONS AND STRUCTURES

var Modeler_GetApiVersion_args = function(args) {
};
Modeler_GetApiVersion_args.prototype = {};
Modeler_GetApiVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetApiVersion_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetApiVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetApiVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ApiVersion(args.success);
    }
  }
};
Modeler_GetApiVersion_result.prototype = {};
Modeler_GetApiVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ApiVersion();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetApiVersion_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetApiVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetRootGroup_args = function(args) {
};
Modeler_GetRootGroup_args.prototype = {};
Modeler_GetRootGroup_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetRootGroup_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetRootGroup_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetRootGroup_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Entity(args.success);
    }
  }
};
Modeler_GetRootGroup_result.prototype = {};
Modeler_GetRootGroup_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Entity();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetRootGroup_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetRootGroup_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntities_args = function(args) {
};
Modeler_GetEntities_args.prototype = {};
Modeler_GetEntities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntities_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntities_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Entity]);
    }
  }
};
Modeler_GetEntities_result.prototype = {};
Modeler_GetEntities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Entity();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntities_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetFilteredEntities_args = function(args) {
  this.filterType = null;
  if (args) {
    if (args.filterType !== undefined && args.filterType !== null) {
      this.filterType = args.filterType;
    }
  }
};
Modeler_GetFilteredEntities_args.prototype = {};
Modeler_GetFilteredEntities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.filterType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetFilteredEntities_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetFilteredEntities_args');
  if (this.filterType !== null && this.filterType !== undefined) {
    output.writeFieldBegin('filterType', Thrift.Type.I32, 1);
    output.writeI32(this.filterType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetFilteredEntities_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Entity]);
    }
  }
};
Modeler_GetFilteredEntities_result.prototype = {};
Modeler_GetFilteredEntities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Entity();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetFilteredEntities_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetFilteredEntities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_RemoveEntity_args = function(args) {
  this.uuid = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_RemoveEntity_args.prototype = {};
Modeler_RemoveEntity_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_RemoveEntity_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_RemoveEntity_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_RemoveEntity_result = function(args) {
};
Modeler_RemoveEntity_result.prototype = {};
Modeler_RemoveEntity_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_RemoveEntity_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_RemoveEntity_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_ImportModel_args = function(args) {
  this.file_path_utf8 = null;
  if (args) {
    if (args.file_path_utf8 !== undefined && args.file_path_utf8 !== null) {
      this.file_path_utf8 = args.file_path_utf8;
    }
  }
};
Modeler_ImportModel_args.prototype = {};
Modeler_ImportModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path_utf8 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_ImportModel_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_ImportModel_args');
  if (this.file_path_utf8 !== null && this.file_path_utf8 !== undefined) {
    output.writeFieldBegin('file_path_utf8', Thrift.Type.STRING, 1);
    output.writeString(this.file_path_utf8);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_ImportModel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_ImportModel_result.prototype = {};
Modeler_ImportModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_ImportModel_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_ImportModel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidCylinder_args = function(args) {
  this.pointA = null;
  this.pointB = null;
  this.radius = null;
  this.uuid = '';
  if (args) {
    if (args.pointA !== undefined && args.pointA !== null) {
      this.pointA = new ttypes.Vertex(args.pointA);
    }
    if (args.pointB !== undefined && args.pointB !== null) {
      this.pointB = new ttypes.Vertex(args.pointB);
    }
    if (args.radius !== undefined && args.radius !== null) {
      this.radius = args.radius;
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_CreateSolidCylinder_args.prototype = {};
Modeler_CreateSolidCylinder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pointA = new ttypes.Vertex();
        this.pointA.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pointB = new ttypes.Vertex();
        this.pointB.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radius = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidCylinder_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidCylinder_args');
  if (this.pointA !== null && this.pointA !== undefined) {
    output.writeFieldBegin('pointA', Thrift.Type.STRUCT, 1);
    this.pointA.write(output);
    output.writeFieldEnd();
  }
  if (this.pointB !== null && this.pointB !== undefined) {
    output.writeFieldBegin('pointB', Thrift.Type.STRUCT, 2);
    this.pointB.write(output);
    output.writeFieldEnd();
  }
  if (this.radius !== null && this.radius !== undefined) {
    output.writeFieldBegin('radius', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.radius);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 4);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidCylinder_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_CreateSolidCylinder_result.prototype = {};
Modeler_CreateSolidCylinder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidCylinder_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidCylinder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidSphere_args = function(args) {
  this.center = null;
  this.radius = null;
  this.uuid = '';
  if (args) {
    if (args.center !== undefined && args.center !== null) {
      this.center = new ttypes.Vertex(args.center);
    }
    if (args.radius !== undefined && args.radius !== null) {
      this.radius = args.radius;
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_CreateSolidSphere_args.prototype = {};
Modeler_CreateSolidSphere_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.center = new ttypes.Vertex();
        this.center.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.radius = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidSphere_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidSphere_args');
  if (this.center !== null && this.center !== undefined) {
    output.writeFieldBegin('center', Thrift.Type.STRUCT, 1);
    this.center.write(output);
    output.writeFieldEnd();
  }
  if (this.radius !== null && this.radius !== undefined) {
    output.writeFieldBegin('radius', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.radius);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 3);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidSphere_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_CreateSolidSphere_result.prototype = {};
Modeler_CreateSolidSphere_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidSphere_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidSphere_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidBlock_args = function(args) {
  this.pointA = null;
  this.pointB = null;
  this.uuid = '';
  if (args) {
    if (args.pointA !== undefined && args.pointA !== null) {
      this.pointA = new ttypes.Vertex(args.pointA);
    }
    if (args.pointB !== undefined && args.pointB !== null) {
      this.pointB = new ttypes.Vertex(args.pointB);
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_CreateSolidBlock_args.prototype = {};
Modeler_CreateSolidBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pointA = new ttypes.Vertex();
        this.pointA.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pointB = new ttypes.Vertex();
        this.pointB.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidBlock_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidBlock_args');
  if (this.pointA !== null && this.pointA !== undefined) {
    output.writeFieldBegin('pointA', Thrift.Type.STRUCT, 1);
    this.pointA.write(output);
    output.writeFieldEnd();
  }
  if (this.pointB !== null && this.pointB !== undefined) {
    output.writeFieldBegin('pointB', Thrift.Type.STRUCT, 2);
    this.pointB.write(output);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 3);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSolidBlock_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_CreateSolidBlock_result.prototype = {};
Modeler_CreateSolidBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSolidBlock_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSolidBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateMesh_args = function(args) {
  this.mesh = null;
  this.uuid = '';
  if (args) {
    if (args.mesh !== undefined && args.mesh !== null) {
      this.mesh = new ttypes.EntityMesh(args.mesh);
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_CreateMesh_args.prototype = {};
Modeler_CreateMesh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.mesh = new ttypes.EntityMesh();
        this.mesh.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateMesh_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateMesh_args');
  if (this.mesh !== null && this.mesh !== undefined) {
    output.writeFieldBegin('mesh', Thrift.Type.STRUCT, 1);
    this.mesh.write(output);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateMesh_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_CreateMesh_result.prototype = {};
Modeler_CreateMesh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateMesh_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateMesh_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSpline_args = function(args) {
  this.spline_control_points = null;
  this.uuid = '';
  if (args) {
    if (args.spline_control_points !== undefined && args.spline_control_points !== null) {
      this.spline_control_points = new ttypes.EntityLine(args.spline_control_points);
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_CreateSpline_args.prototype = {};
Modeler_CreateSpline_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.spline_control_points = new ttypes.EntityLine();
        this.spline_control_points.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSpline_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSpline_args');
  if (this.spline_control_points !== null && this.spline_control_points !== undefined) {
    output.writeFieldBegin('spline_control_points', Thrift.Type.STRUCT, 1);
    this.spline_control_points.write(output);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateSpline_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_CreateSpline_result.prototype = {};
Modeler_CreateSpline_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateSpline_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateSpline_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityMeshes_args = function(args) {
  this.uuid = null;
  this.get_normals = false;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
    if (args.get_normals !== undefined && args.get_normals !== null) {
      this.get_normals = args.get_normals;
    }
  }
};
Modeler_GetEntityMeshes_args.prototype = {};
Modeler_GetEntityMeshes_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.get_normals = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityMeshes_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityMeshes_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.get_normals !== null && this.get_normals !== undefined) {
    output.writeFieldBegin('get_normals', Thrift.Type.BOOL, 2);
    output.writeBool(this.get_normals);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityMeshes_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.EntityMesh]);
    }
  }
};
Modeler_GetEntityMeshes_result.prototype = {};
Modeler_GetEntityMeshes_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new ttypes.EntityMesh();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityMeshes_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityMeshes_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntitiesEncodedScene_args = function(args) {
  this.list_of_uuids = null;
  this.format = 0;
  if (args) {
    if (args.list_of_uuids !== undefined && args.list_of_uuids !== null) {
      this.list_of_uuids = Thrift.copyList(args.list_of_uuids, [null]);
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
  }
};
Modeler_GetEntitiesEncodedScene_args.prototype = {};
Modeler_GetEntitiesEncodedScene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.list_of_uuids = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString();
          this.list_of_uuids.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.format = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntitiesEncodedScene_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntitiesEncodedScene_args');
  if (this.list_of_uuids !== null && this.list_of_uuids !== undefined) {
    output.writeFieldBegin('list_of_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.list_of_uuids.length);
    for (var iter103 in this.list_of_uuids)
    {
      if (this.list_of_uuids.hasOwnProperty(iter103))
      {
        iter103 = this.list_of_uuids[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.I32, 2);
    output.writeI32(this.format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntitiesEncodedScene_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.EncodedScene(args.success);
    }
  }
};
Modeler_GetEntitiesEncodedScene_result.prototype = {};
Modeler_GetEntitiesEncodedScene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.EncodedScene();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntitiesEncodedScene_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntitiesEncodedScene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateEntitiesFromScene_args = function(args) {
  this.scene = null;
  if (args) {
    if (args.scene !== undefined && args.scene !== null) {
      this.scene = new ttypes.EncodedScene(args.scene);
    }
  }
};
Modeler_CreateEntitiesFromScene_args.prototype = {};
Modeler_CreateEntitiesFromScene_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.scene = new ttypes.EncodedScene();
        this.scene.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateEntitiesFromScene_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateEntitiesFromScene_args');
  if (this.scene !== null && this.scene !== undefined) {
    output.writeFieldBegin('scene', Thrift.Type.STRUCT, 1);
    this.scene.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CreateEntitiesFromScene_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
Modeler_CreateEntitiesFromScene_result.prototype = {};
Modeler_CreateEntitiesFromScene_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CreateEntitiesFromScene_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CreateEntitiesFromScene_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityWire_args = function(args) {
  this.uuid = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = args.uuid;
    }
  }
};
Modeler_GetEntityWire_args.prototype = {};
Modeler_GetEntityWire_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityWire_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityWire_args');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_GetEntityWire_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Vertex]);
    }
  }
};
Modeler_GetEntityWire_result.prototype = {};
Modeler_GetEntityWire_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new ttypes.Vertex();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_GetEntityWire_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_GetEntityWire_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_TransformOperation_args = function(args) {
  this.list_of_uuids = null;
  this.transform4x4 = null;
  if (args) {
    if (args.list_of_uuids !== undefined && args.list_of_uuids !== null) {
      this.list_of_uuids = Thrift.copyList(args.list_of_uuids, [null]);
    }
    if (args.transform4x4 !== undefined && args.transform4x4 !== null) {
      this.transform4x4 = Thrift.copyList(args.transform4x4, [null]);
    }
  }
};
Modeler_TransformOperation_args.prototype = {};
Modeler_TransformOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.list_of_uuids = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readString();
          this.list_of_uuids.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.transform4x4 = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = input.readDouble();
          this.transform4x4.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_TransformOperation_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_TransformOperation_args');
  if (this.list_of_uuids !== null && this.list_of_uuids !== undefined) {
    output.writeFieldBegin('list_of_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.list_of_uuids.length);
    for (var iter134 in this.list_of_uuids)
    {
      if (this.list_of_uuids.hasOwnProperty(iter134))
      {
        iter134 = this.list_of_uuids[iter134];
        output.writeString(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.transform4x4 !== null && this.transform4x4 !== undefined) {
    output.writeFieldBegin('transform4x4', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.transform4x4.length);
    for (var iter135 in this.transform4x4)
    {
      if (this.transform4x4.hasOwnProperty(iter135))
      {
        iter135 = this.transform4x4[iter135];
        output.writeDouble(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_TransformOperation_result = function(args) {
};
Modeler_TransformOperation_result.prototype = {};
Modeler_TransformOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_TransformOperation_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_TransformOperation_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CutOperation_args = function(args) {
  this.list_of_uuids = null;
  this.point_on_plane = null;
  this.normal = null;
  if (args) {
    if (args.list_of_uuids !== undefined && args.list_of_uuids !== null) {
      this.list_of_uuids = Thrift.copyList(args.list_of_uuids, [null]);
    }
    if (args.point_on_plane !== undefined && args.point_on_plane !== null) {
      this.point_on_plane = new ttypes.Vertex(args.point_on_plane);
    }
    if (args.normal !== undefined && args.normal !== null) {
      this.normal = new ttypes.Vector(args.normal);
    }
  }
};
Modeler_CutOperation_args.prototype = {};
Modeler_CutOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.list_of_uuids = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString();
          this.list_of_uuids.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.point_on_plane = new ttypes.Vertex();
        this.point_on_plane.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.normal = new ttypes.Vector();
        this.normal.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CutOperation_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CutOperation_args');
  if (this.list_of_uuids !== null && this.list_of_uuids !== undefined) {
    output.writeFieldBegin('list_of_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.list_of_uuids.length);
    for (var iter143 in this.list_of_uuids)
    {
      if (this.list_of_uuids.hasOwnProperty(iter143))
      {
        iter143 = this.list_of_uuids[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.point_on_plane !== null && this.point_on_plane !== undefined) {
    output.writeFieldBegin('point_on_plane', Thrift.Type.STRUCT, 2);
    this.point_on_plane.write(output);
    output.writeFieldEnd();
  }
  if (this.normal !== null && this.normal !== undefined) {
    output.writeFieldBegin('normal', Thrift.Type.STRUCT, 3);
    this.normal.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_CutOperation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Modeler_CutOperation_result.prototype = {};
Modeler_CutOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_CutOperation_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_CutOperation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_BooleanOperation_args = function(args) {
  this.list_of_uuids = null;
  this.type = null;
  if (args) {
    if (args.list_of_uuids !== undefined && args.list_of_uuids !== null) {
      this.list_of_uuids = Thrift.copyList(args.list_of_uuids, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Modeler_BooleanOperation_args.prototype = {};
Modeler_BooleanOperation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.list_of_uuids = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readString();
          this.list_of_uuids.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_BooleanOperation_args.prototype.write = function(output) {
  output.writeStructBegin('Modeler_BooleanOperation_args');
  if (this.list_of_uuids !== null && this.list_of_uuids !== undefined) {
    output.writeFieldBegin('list_of_uuids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.list_of_uuids.length);
    for (var iter151 in this.list_of_uuids)
    {
      if (this.list_of_uuids.hasOwnProperty(iter151))
      {
        iter151 = this.list_of_uuids[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Modeler_BooleanOperation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ModelerException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
Modeler_BooleanOperation_result.prototype = {};
Modeler_BooleanOperation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ModelerException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Modeler_BooleanOperation_result.prototype.write = function(output) {
  output.writeStructBegin('Modeler_BooleanOperation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ModelerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ModelerClient.prototype = {};
ModelerClient.prototype.seqid = function() { return this._seqid; };
ModelerClient.prototype.new_seqid = function() { return this._seqid += 1; };
ModelerClient.prototype.GetApiVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetApiVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetApiVersion();
  }
};

ModelerClient.prototype.send_GetApiVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetApiVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new Modeler_GetApiVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetApiVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetApiVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetApiVersion failed: unknown result');
};
ModelerClient.prototype.GetRootGroup = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetRootGroup();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetRootGroup();
  }
};

ModelerClient.prototype.send_GetRootGroup = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetRootGroup', Thrift.MessageType.CALL, this.seqid());
  var args = new Modeler_GetRootGroup_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetRootGroup = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetRootGroup_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetRootGroup failed: unknown result');
};
ModelerClient.prototype.GetEntities = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntities();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntities();
  }
};

ModelerClient.prototype.send_GetEntities = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntities', Thrift.MessageType.CALL, this.seqid());
  var args = new Modeler_GetEntities_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntities failed: unknown result');
};
ModelerClient.prototype.GetFilteredEntities = function(filterType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetFilteredEntities(filterType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetFilteredEntities(filterType);
  }
};

ModelerClient.prototype.send_GetFilteredEntities = function(filterType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetFilteredEntities', Thrift.MessageType.CALL, this.seqid());
  var params = {
    filterType: filterType
  };
  var args = new Modeler_GetFilteredEntities_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetFilteredEntities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetFilteredEntities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetFilteredEntities failed: unknown result');
};
ModelerClient.prototype.RemoveEntity = function(uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RemoveEntity(uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RemoveEntity(uuid);
  }
};

ModelerClient.prototype.send_RemoveEntity = function(uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RemoveEntity', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid
  };
  var args = new Modeler_RemoveEntity_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_RemoveEntity = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_RemoveEntity_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ModelerClient.prototype.ImportModel = function(file_path_utf8, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ImportModel(file_path_utf8);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ImportModel(file_path_utf8);
  }
};

ModelerClient.prototype.send_ImportModel = function(file_path_utf8) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ImportModel', Thrift.MessageType.CALL, this.seqid());
  var params = {
    file_path_utf8: file_path_utf8
  };
  var args = new Modeler_ImportModel_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_ImportModel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_ImportModel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};
ModelerClient.prototype.CreateSolidCylinder = function(pointA, pointB, radius, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateSolidCylinder(pointA, pointB, radius, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateSolidCylinder(pointA, pointB, radius, uuid);
  }
};

ModelerClient.prototype.send_CreateSolidCylinder = function(pointA, pointB, radius, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateSolidCylinder', Thrift.MessageType.CALL, this.seqid());
  var params = {
    pointA: pointA,
    pointB: pointB,
    radius: radius,
    uuid: uuid
  };
  var args = new Modeler_CreateSolidCylinder_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateSolidCylinder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateSolidCylinder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateSolidCylinder failed: unknown result');
};
ModelerClient.prototype.CreateSolidSphere = function(center, radius, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateSolidSphere(center, radius, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateSolidSphere(center, radius, uuid);
  }
};

ModelerClient.prototype.send_CreateSolidSphere = function(center, radius, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateSolidSphere', Thrift.MessageType.CALL, this.seqid());
  var params = {
    center: center,
    radius: radius,
    uuid: uuid
  };
  var args = new Modeler_CreateSolidSphere_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateSolidSphere = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateSolidSphere_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateSolidSphere failed: unknown result');
};
ModelerClient.prototype.CreateSolidBlock = function(pointA, pointB, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateSolidBlock(pointA, pointB, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateSolidBlock(pointA, pointB, uuid);
  }
};

ModelerClient.prototype.send_CreateSolidBlock = function(pointA, pointB, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateSolidBlock', Thrift.MessageType.CALL, this.seqid());
  var params = {
    pointA: pointA,
    pointB: pointB,
    uuid: uuid
  };
  var args = new Modeler_CreateSolidBlock_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateSolidBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateSolidBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateSolidBlock failed: unknown result');
};
ModelerClient.prototype.CreateMesh = function(mesh, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateMesh(mesh, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateMesh(mesh, uuid);
  }
};

ModelerClient.prototype.send_CreateMesh = function(mesh, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateMesh', Thrift.MessageType.CALL, this.seqid());
  var params = {
    mesh: mesh,
    uuid: uuid
  };
  var args = new Modeler_CreateMesh_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateMesh = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateMesh_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateMesh failed: unknown result');
};
ModelerClient.prototype.CreateSpline = function(spline_control_points, uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateSpline(spline_control_points, uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateSpline(spline_control_points, uuid);
  }
};

ModelerClient.prototype.send_CreateSpline = function(spline_control_points, uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateSpline', Thrift.MessageType.CALL, this.seqid());
  var params = {
    spline_control_points: spline_control_points,
    uuid: uuid
  };
  var args = new Modeler_CreateSpline_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateSpline = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateSpline_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateSpline failed: unknown result');
};
ModelerClient.prototype.GetEntityMeshes = function(uuid, get_normals, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntityMeshes(uuid, get_normals);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntityMeshes(uuid, get_normals);
  }
};

ModelerClient.prototype.send_GetEntityMeshes = function(uuid, get_normals) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntityMeshes', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid,
    get_normals: get_normals
  };
  var args = new Modeler_GetEntityMeshes_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntityMeshes = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntityMeshes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntityMeshes failed: unknown result');
};
ModelerClient.prototype.GetEntitiesEncodedScene = function(list_of_uuids, format, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntitiesEncodedScene(list_of_uuids, format);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntitiesEncodedScene(list_of_uuids, format);
  }
};

ModelerClient.prototype.send_GetEntitiesEncodedScene = function(list_of_uuids, format) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntitiesEncodedScene', Thrift.MessageType.CALL, this.seqid());
  var params = {
    list_of_uuids: list_of_uuids,
    format: format
  };
  var args = new Modeler_GetEntitiesEncodedScene_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntitiesEncodedScene = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntitiesEncodedScene_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntitiesEncodedScene failed: unknown result');
};
ModelerClient.prototype.CreateEntitiesFromScene = function(scene, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateEntitiesFromScene(scene);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateEntitiesFromScene(scene);
  }
};

ModelerClient.prototype.send_CreateEntitiesFromScene = function(scene) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateEntitiesFromScene', Thrift.MessageType.CALL, this.seqid());
  var params = {
    scene: scene
  };
  var args = new Modeler_CreateEntitiesFromScene_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CreateEntitiesFromScene = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CreateEntitiesFromScene_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateEntitiesFromScene failed: unknown result');
};
ModelerClient.prototype.GetEntityWire = function(uuid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetEntityWire(uuid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetEntityWire(uuid);
  }
};

ModelerClient.prototype.send_GetEntityWire = function(uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetEntityWire', Thrift.MessageType.CALL, this.seqid());
  var params = {
    uuid: uuid
  };
  var args = new Modeler_GetEntityWire_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_GetEntityWire = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_GetEntityWire_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetEntityWire failed: unknown result');
};
ModelerClient.prototype.TransformOperation = function(list_of_uuids, transform4x4, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_TransformOperation(list_of_uuids, transform4x4);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_TransformOperation(list_of_uuids, transform4x4);
  }
};

ModelerClient.prototype.send_TransformOperation = function(list_of_uuids, transform4x4) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('TransformOperation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    list_of_uuids: list_of_uuids,
    transform4x4: transform4x4
  };
  var args = new Modeler_TransformOperation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_TransformOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_TransformOperation_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ModelerClient.prototype.CutOperation = function(list_of_uuids, point_on_plane, normal, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CutOperation(list_of_uuids, point_on_plane, normal);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CutOperation(list_of_uuids, point_on_plane, normal);
  }
};

ModelerClient.prototype.send_CutOperation = function(list_of_uuids, point_on_plane, normal) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CutOperation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    list_of_uuids: list_of_uuids,
    point_on_plane: point_on_plane,
    normal: normal
  };
  var args = new Modeler_CutOperation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_CutOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_CutOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CutOperation failed: unknown result');
};
ModelerClient.prototype.BooleanOperation = function(list_of_uuids, type, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_BooleanOperation(list_of_uuids, type);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_BooleanOperation(list_of_uuids, type);
  }
};

ModelerClient.prototype.send_BooleanOperation = function(list_of_uuids, type) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('BooleanOperation', Thrift.MessageType.CALL, this.seqid());
  var params = {
    list_of_uuids: list_of_uuids,
    type: type
  };
  var args = new Modeler_BooleanOperation_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelerClient.prototype.recv_BooleanOperation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Modeler_BooleanOperation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('BooleanOperation failed: unknown result');
};
var ModelerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ModelerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ModelerProcessor.prototype.process_GetApiVersion = function(seqid, input, output) {
  var args = new Modeler_GetApiVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetApiVersion.length === 0) {
    Q.fcall(this._handler.GetApiVersion.bind(this._handler))
      .then(function(result) {
        var result_obj = new Modeler_GetApiVersion_result({success: result});
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetApiVersion(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetApiVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetRootGroup = function(seqid, input, output) {
  var args = new Modeler_GetRootGroup_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetRootGroup.length === 0) {
    Q.fcall(this._handler.GetRootGroup.bind(this._handler))
      .then(function(result) {
        var result_obj = new Modeler_GetRootGroup_result({success: result});
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetRootGroup(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetRootGroup_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetRootGroup", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntities = function(seqid, input, output) {
  var args = new Modeler_GetEntities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntities.length === 0) {
    Q.fcall(this._handler.GetEntities.bind(this._handler))
      .then(function(result) {
        var result_obj = new Modeler_GetEntities_result({success: result});
        output.writeMessageBegin("GetEntities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntities", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntities(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntities", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetFilteredEntities = function(seqid, input, output) {
  var args = new Modeler_GetFilteredEntities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetFilteredEntities.length === 1) {
    Q.fcall(this._handler.GetFilteredEntities.bind(this._handler), args.filterType)
      .then(function(result) {
        var result_obj = new Modeler_GetFilteredEntities_result({success: result});
        output.writeMessageBegin("GetFilteredEntities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetFilteredEntities", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetFilteredEntities(args.filterType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetFilteredEntities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetFilteredEntities", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetFilteredEntities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_RemoveEntity = function(seqid, input, output) {
  var args = new Modeler_RemoveEntity_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RemoveEntity.length === 1) {
    Q.fcall(this._handler.RemoveEntity.bind(this._handler), args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_RemoveEntity_result({success: result});
        output.writeMessageBegin("RemoveEntity", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveEntity", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RemoveEntity(args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_RemoveEntity_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RemoveEntity", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RemoveEntity", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_ImportModel = function(seqid, input, output) {
  var args = new Modeler_ImportModel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ImportModel.length === 1) {
    Q.fcall(this._handler.ImportModel.bind(this._handler), args.file_path_utf8)
      .then(function(result) {
        var result_obj = new Modeler_ImportModel_result({success: result});
        output.writeMessageBegin("ImportModel", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_ImportModel_result(err);
          output.writeMessageBegin("ImportModel", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ImportModel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ImportModel(args.file_path_utf8, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_ImportModel_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ImportModel", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ImportModel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateSolidCylinder = function(seqid, input, output) {
  var args = new Modeler_CreateSolidCylinder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateSolidCylinder.length === 4) {
    Q.fcall(this._handler.CreateSolidCylinder.bind(this._handler), args.pointA, args.pointB, args.radius, args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_CreateSolidCylinder_result({success: result});
        output.writeMessageBegin("CreateSolidCylinder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_CreateSolidCylinder_result(err);
          output.writeMessageBegin("CreateSolidCylinder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateSolidCylinder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateSolidCylinder(args.pointA, args.pointB, args.radius, args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_CreateSolidCylinder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateSolidCylinder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateSolidCylinder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateSolidSphere = function(seqid, input, output) {
  var args = new Modeler_CreateSolidSphere_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateSolidSphere.length === 3) {
    Q.fcall(this._handler.CreateSolidSphere.bind(this._handler), args.center, args.radius, args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_CreateSolidSphere_result({success: result});
        output.writeMessageBegin("CreateSolidSphere", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_CreateSolidSphere_result(err);
          output.writeMessageBegin("CreateSolidSphere", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateSolidSphere", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateSolidSphere(args.center, args.radius, args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_CreateSolidSphere_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateSolidSphere", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateSolidSphere", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateSolidBlock = function(seqid, input, output) {
  var args = new Modeler_CreateSolidBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateSolidBlock.length === 3) {
    Q.fcall(this._handler.CreateSolidBlock.bind(this._handler), args.pointA, args.pointB, args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_CreateSolidBlock_result({success: result});
        output.writeMessageBegin("CreateSolidBlock", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_CreateSolidBlock_result(err);
          output.writeMessageBegin("CreateSolidBlock", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateSolidBlock", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateSolidBlock(args.pointA, args.pointB, args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_CreateSolidBlock_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateSolidBlock", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateSolidBlock", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateMesh = function(seqid, input, output) {
  var args = new Modeler_CreateMesh_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateMesh.length === 2) {
    Q.fcall(this._handler.CreateMesh.bind(this._handler), args.mesh, args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_CreateMesh_result({success: result});
        output.writeMessageBegin("CreateMesh", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_CreateMesh_result(err);
          output.writeMessageBegin("CreateMesh", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateMesh", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateMesh(args.mesh, args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_CreateMesh_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateMesh", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateMesh", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateSpline = function(seqid, input, output) {
  var args = new Modeler_CreateSpline_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateSpline.length === 2) {
    Q.fcall(this._handler.CreateSpline.bind(this._handler), args.spline_control_points, args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_CreateSpline_result({success: result});
        output.writeMessageBegin("CreateSpline", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_CreateSpline_result(err);
          output.writeMessageBegin("CreateSpline", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateSpline", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateSpline(args.spline_control_points, args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_CreateSpline_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateSpline", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateSpline", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntityMeshes = function(seqid, input, output) {
  var args = new Modeler_GetEntityMeshes_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntityMeshes.length === 2) {
    Q.fcall(this._handler.GetEntityMeshes.bind(this._handler), args.uuid, args.get_normals)
      .then(function(result) {
        var result_obj = new Modeler_GetEntityMeshes_result({success: result});
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntityMeshes(args.uuid, args.get_normals, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntityMeshes_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityMeshes", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntitiesEncodedScene = function(seqid, input, output) {
  var args = new Modeler_GetEntitiesEncodedScene_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntitiesEncodedScene.length === 2) {
    Q.fcall(this._handler.GetEntitiesEncodedScene.bind(this._handler), args.list_of_uuids, args.format)
      .then(function(result) {
        var result_obj = new Modeler_GetEntitiesEncodedScene_result({success: result});
        output.writeMessageBegin("GetEntitiesEncodedScene", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntitiesEncodedScene", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntitiesEncodedScene(args.list_of_uuids, args.format, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntitiesEncodedScene_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntitiesEncodedScene", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntitiesEncodedScene", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CreateEntitiesFromScene = function(seqid, input, output) {
  var args = new Modeler_CreateEntitiesFromScene_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateEntitiesFromScene.length === 1) {
    Q.fcall(this._handler.CreateEntitiesFromScene.bind(this._handler), args.scene)
      .then(function(result) {
        var result_obj = new Modeler_CreateEntitiesFromScene_result({success: result});
        output.writeMessageBegin("CreateEntitiesFromScene", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEntitiesFromScene", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateEntitiesFromScene(args.scene, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_CreateEntitiesFromScene_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateEntitiesFromScene", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateEntitiesFromScene", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_GetEntityWire = function(seqid, input, output) {
  var args = new Modeler_GetEntityWire_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetEntityWire.length === 1) {
    Q.fcall(this._handler.GetEntityWire.bind(this._handler), args.uuid)
      .then(function(result) {
        var result_obj = new Modeler_GetEntityWire_result({success: result});
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetEntityWire(args.uuid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_GetEntityWire_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetEntityWire", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_TransformOperation = function(seqid, input, output) {
  var args = new Modeler_TransformOperation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.TransformOperation.length === 2) {
    Q.fcall(this._handler.TransformOperation.bind(this._handler), args.list_of_uuids, args.transform4x4)
      .then(function(result) {
        var result_obj = new Modeler_TransformOperation_result({success: result});
        output.writeMessageBegin("TransformOperation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransformOperation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.TransformOperation(args.list_of_uuids, args.transform4x4, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_TransformOperation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("TransformOperation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("TransformOperation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_CutOperation = function(seqid, input, output) {
  var args = new Modeler_CutOperation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CutOperation.length === 3) {
    Q.fcall(this._handler.CutOperation.bind(this._handler), args.list_of_uuids, args.point_on_plane, args.normal)
      .then(function(result) {
        var result_obj = new Modeler_CutOperation_result({success: result});
        output.writeMessageBegin("CutOperation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CutOperation", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CutOperation(args.list_of_uuids, args.point_on_plane, args.normal, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Modeler_CutOperation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CutOperation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CutOperation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ModelerProcessor.prototype.process_BooleanOperation = function(seqid, input, output) {
  var args = new Modeler_BooleanOperation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.BooleanOperation.length === 2) {
    Q.fcall(this._handler.BooleanOperation.bind(this._handler), args.list_of_uuids, args.type)
      .then(function(result) {
        var result_obj = new Modeler_BooleanOperation_result({success: result});
        output.writeMessageBegin("BooleanOperation", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.ModelerException) {
          result = new Modeler_BooleanOperation_result(err);
          output.writeMessageBegin("BooleanOperation", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("BooleanOperation", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.BooleanOperation(args.list_of_uuids, args.type, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.ModelerException) {
        result_obj = new Modeler_BooleanOperation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("BooleanOperation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("BooleanOperation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
