//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var SharedService = require('./SharedService');
var SharedServiceClient = SharedService.Client;
var SharedServiceProcessor = SharedService.Processor;
var ttypes = require('./application_types');
//HELPER FUNCTIONS AND STRUCTURES

var Application_GetApiVersion_args = function(args) {
};
Application_GetApiVersion_args.prototype = {};
Application_GetApiVersion_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_GetApiVersion_args.prototype.write = function(output) {
  output.writeStructBegin('Application_GetApiVersion_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_GetApiVersion_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ApiVersion(args.success);
    }
  }
};
Application_GetApiVersion_result.prototype = {};
Application_GetApiVersion_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ApiVersion();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_GetApiVersion_result.prototype.write = function(output) {
  output.writeStructBegin('Application_GetApiVersion_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_Quit_args = function(args) {
};
Application_Quit_args.prototype = {};
Application_Quit_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_Quit_args.prototype.write = function(output) {
  output.writeStructBegin('Application_Quit_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_Quit_result = function(args) {
};
Application_Quit_result.prototype = {};
Application_Quit_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_Quit_result.prototype.write = function(output) {
  output.writeStructBegin('Application_Quit_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_LoadDocument_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
Application_LoadDocument_args.prototype = {};
Application_LoadDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_LoadDocument_args.prototype.write = function(output) {
  output.writeStructBegin('Application_LoadDocument_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_LoadDocument_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Application_LoadDocument_result.prototype = {};
Application_LoadDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_LoadDocument_result.prototype.write = function(output) {
  output.writeStructBegin('Application_LoadDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SaveDocument_args = function(args) {
  this.file_path = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
  }
};
Application_SaveDocument_args.prototype = {};
Application_SaveDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SaveDocument_args.prototype.write = function(output) {
  output.writeStructBegin('Application_SaveDocument_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SaveDocument_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Application_SaveDocument_result.prototype = {};
Application_SaveDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SaveDocument_result.prototype.write = function(output) {
  output.writeStructBegin('Application_SaveDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_NewDocument_args = function(args) {
};
Application_NewDocument_args.prototype = {};
Application_NewDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_NewDocument_args.prototype.write = function(output) {
  output.writeStructBegin('Application_NewDocument_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_NewDocument_result = function(args) {
};
Application_NewDocument_result.prototype = {};
Application_NewDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_NewDocument_result.prototype.write = function(output) {
  output.writeStructBegin('Application_NewDocument_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SendDocument_args = function(args) {
  this.memory_file = null;
  this.file_name = null;
  if (args) {
    if (args.memory_file !== undefined && args.memory_file !== null) {
      this.memory_file = args.memory_file;
    }
    if (args.file_name !== undefined && args.file_name !== null) {
      this.file_name = args.file_name;
    }
  }
};
Application_SendDocument_args.prototype = {};
Application_SendDocument_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.memory_file = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.file_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SendDocument_args.prototype.write = function(output) {
  output.writeStructBegin('Application_SendDocument_args');
  if (this.memory_file !== null && this.memory_file !== undefined) {
    output.writeFieldBegin('memory_file', Thrift.Type.STRING, 1);
    output.writeBinary(this.memory_file);
    output.writeFieldEnd();
  }
  if (this.file_name !== null && this.file_name !== undefined) {
    output.writeFieldBegin('file_name', Thrift.Type.STRING, 2);
    output.writeString(this.file_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SendDocument_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Application_SendDocument_result.prototype = {};
Application_SendDocument_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SendDocument_result.prototype.write = function(output) {
  output.writeStructBegin('Application_SendDocument_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_CreateSession_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined && args.session_id !== null) {
      this.session_id = args.session_id;
    }
  }
};
Application_CreateSession_args.prototype = {};
Application_CreateSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_CreateSession_args.prototype.write = function(output) {
  output.writeStructBegin('Application_CreateSession_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.STRING, 1);
    output.writeString(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_CreateSession_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.SessionInfo(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_CreateSession_result.prototype = {};
Application_CreateSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SessionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_CreateSession_result.prototype.write = function(output) {
  output.writeStructBegin('Application_CreateSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_RestoreSession_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined && args.session_id !== null) {
      this.session_id = args.session_id;
    }
  }
};
Application_RestoreSession_args.prototype = {};
Application_RestoreSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_RestoreSession_args.prototype.write = function(output) {
  output.writeStructBegin('Application_RestoreSession_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.STRING, 1);
    output.writeString(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_RestoreSession_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_RestoreSession_result.prototype = {};
Application_RestoreSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_RestoreSession_result.prototype.write = function(output) {
  output.writeStructBegin('Application_RestoreSession_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_DeleteSession_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined && args.session_id !== null) {
      this.session_id = args.session_id;
    }
  }
};
Application_DeleteSession_args.prototype = {};
Application_DeleteSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_DeleteSession_args.prototype.write = function(output) {
  output.writeStructBegin('Application_DeleteSession_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.STRING, 1);
    output.writeString(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_DeleteSession_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_DeleteSession_result.prototype = {};
Application_DeleteSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_DeleteSession_result.prototype.write = function(output) {
  output.writeStructBegin('Application_DeleteSession_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_CloseSession_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined && args.session_id !== null) {
      this.session_id = args.session_id;
    }
  }
};
Application_CloseSession_args.prototype = {};
Application_CloseSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.session_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_CloseSession_args.prototype.write = function(output) {
  output.writeStructBegin('Application_CloseSession_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.STRING, 1);
    output.writeString(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_CloseSession_result = function(args) {
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_CloseSession_result.prototype = {};
Application_CloseSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_CloseSession_result.prototype.write = function(output) {
  output.writeStructBegin('Application_CloseSession_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_ListSessionFiles_args = function(args) {
  this.folder = null;
  this.recursive = null;
  if (args) {
    if (args.folder !== undefined && args.folder !== null) {
      this.folder = args.folder;
    }
    if (args.recursive !== undefined && args.recursive !== null) {
      this.recursive = args.recursive;
    }
  }
};
Application_ListSessionFiles_args.prototype = {};
Application_ListSessionFiles_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.folder = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_ListSessionFiles_args.prototype.write = function(output) {
  output.writeStructBegin('Application_ListSessionFiles_args');
  if (this.folder !== null && this.folder !== undefined) {
    output.writeFieldBegin('folder', Thrift.Type.STRING, 1);
    output.writeString(this.folder);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 2);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_ListSessionFiles_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FileInfo]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_ListSessionFiles_result.prototype = {};
Application_ListSessionFiles_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.success = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.FileInfo();
          elem32.read(input);
          this.success.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_ListSessionFiles_result.prototype.write = function(output) {
  output.writeStructBegin('Application_ListSessionFiles_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter33 in this.success)
    {
      if (this.success.hasOwnProperty(iter33))
      {
        iter33 = this.success[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_GetFileChunk_args = function(args) {
  this.file_path = null;
  this.chunk = null;
  if (args) {
    if (args.file_path !== undefined && args.file_path !== null) {
      this.file_path = args.file_path;
    }
    if (args.chunk !== undefined && args.chunk !== null) {
      this.chunk = new ttypes.TransferChunk(args.chunk);
    }
  }
};
Application_GetFileChunk_args.prototype = {};
Application_GetFileChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.chunk = new ttypes.TransferChunk();
        this.chunk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_GetFileChunk_args.prototype.write = function(output) {
  output.writeStructBegin('Application_GetFileChunk_args');
  if (this.file_path !== null && this.file_path !== undefined) {
    output.writeFieldBegin('file_path', Thrift.Type.STRING, 1);
    output.writeString(this.file_path);
    output.writeFieldEnd();
  }
  if (this.chunk !== null && this.chunk !== undefined) {
    output.writeFieldBegin('chunk', Thrift.Type.STRUCT, 2);
    this.chunk.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_GetFileChunk_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransferChunk(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_GetFileChunk_result.prototype = {};
Application_GetFileChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransferChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_GetFileChunk_result.prototype.write = function(output) {
  output.writeStructBegin('Application_GetFileChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SendFileChunk_args = function(args) {
  this.remote_file_path = null;
  this.chunk = null;
  if (args) {
    if (args.remote_file_path !== undefined && args.remote_file_path !== null) {
      this.remote_file_path = args.remote_file_path;
    }
    if (args.chunk !== undefined && args.chunk !== null) {
      this.chunk = new ttypes.TransferChunk(args.chunk);
    }
  }
};
Application_SendFileChunk_args.prototype = {};
Application_SendFileChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.remote_file_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.chunk = new ttypes.TransferChunk();
        this.chunk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SendFileChunk_args.prototype.write = function(output) {
  output.writeStructBegin('Application_SendFileChunk_args');
  if (this.remote_file_path !== null && this.remote_file_path !== undefined) {
    output.writeFieldBegin('remote_file_path', Thrift.Type.STRING, 1);
    output.writeString(this.remote_file_path);
    output.writeFieldEnd();
  }
  if (this.chunk !== null && this.chunk !== undefined) {
    output.writeFieldBegin('chunk', Thrift.Type.STRUCT, 2);
    this.chunk.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_SendFileChunk_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ttypes.SessionError) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransferChunk(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Application_SendFileChunk_result.prototype = {};
Application_SendFileChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransferChunk();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ttypes.SessionError();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_SendFileChunk_result.prototype.write = function(output) {
  output.writeStructBegin('Application_SendFileChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_ResetRpcConnectionCount_args = function(args) {
};
Application_ResetRpcConnectionCount_args.prototype = {};
Application_ResetRpcConnectionCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_ResetRpcConnectionCount_args.prototype.write = function(output) {
  output.writeStructBegin('Application_ResetRpcConnectionCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Application_ResetRpcConnectionCount_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Application_ResetRpcConnectionCount_result.prototype = {};
Application_ResetRpcConnectionCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Application_ResetRpcConnectionCount_result.prototype.write = function(output) {
  output.writeStructBegin('Application_ResetRpcConnectionCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApplicationClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(ApplicationClient, SharedServiceClient);
ApplicationClient.prototype.seqid = function() { return this._seqid; };
ApplicationClient.prototype.new_seqid = function() { return this._seqid += 1; };
ApplicationClient.prototype.GetApiVersion = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetApiVersion();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetApiVersion();
  }
};

ApplicationClient.prototype.send_GetApiVersion = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetApiVersion', Thrift.MessageType.CALL, this.seqid());
  var args = new Application_GetApiVersion_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_GetApiVersion = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_GetApiVersion_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetApiVersion failed: unknown result');
};
ApplicationClient.prototype.Quit = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_Quit();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_Quit();
  }
};

ApplicationClient.prototype.send_Quit = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('Quit', Thrift.MessageType.ONEWAY, this.seqid());
  var args = new Application_Quit_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
ApplicationClient.prototype.LoadDocument = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_LoadDocument(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_LoadDocument(file_path);
  }
};

ApplicationClient.prototype.send_LoadDocument = function(file_path) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('LoadDocument', Thrift.MessageType.CALL, this.seqid());
  var params = {
    file_path: file_path
  };
  var args = new Application_LoadDocument_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_LoadDocument = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_LoadDocument_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('LoadDocument failed: unknown result');
};
ApplicationClient.prototype.SaveDocument = function(file_path, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SaveDocument(file_path);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SaveDocument(file_path);
  }
};

ApplicationClient.prototype.send_SaveDocument = function(file_path) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SaveDocument', Thrift.MessageType.CALL, this.seqid());
  var params = {
    file_path: file_path
  };
  var args = new Application_SaveDocument_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_SaveDocument = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_SaveDocument_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SaveDocument failed: unknown result');
};
ApplicationClient.prototype.NewDocument = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_NewDocument();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_NewDocument();
  }
};

ApplicationClient.prototype.send_NewDocument = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('NewDocument', Thrift.MessageType.CALL, this.seqid());
  var args = new Application_NewDocument_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_NewDocument = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_NewDocument_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
ApplicationClient.prototype.SendDocument = function(memory_file, file_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SendDocument(memory_file, file_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SendDocument(memory_file, file_name);
  }
};

ApplicationClient.prototype.send_SendDocument = function(memory_file, file_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SendDocument', Thrift.MessageType.CALL, this.seqid());
  var params = {
    memory_file: memory_file,
    file_name: file_name
  };
  var args = new Application_SendDocument_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_SendDocument = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_SendDocument_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SendDocument failed: unknown result');
};
ApplicationClient.prototype.CreateSession = function(session_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CreateSession(session_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CreateSession(session_id);
  }
};

ApplicationClient.prototype.send_CreateSession = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CreateSession', Thrift.MessageType.CALL, this.seqid());
  var params = {
    session_id: session_id
  };
  var args = new Application_CreateSession_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_CreateSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_CreateSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('CreateSession failed: unknown result');
};
ApplicationClient.prototype.RestoreSession = function(session_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RestoreSession(session_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RestoreSession(session_id);
  }
};

ApplicationClient.prototype.send_RestoreSession = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RestoreSession', Thrift.MessageType.CALL, this.seqid());
  var params = {
    session_id: session_id
  };
  var args = new Application_RestoreSession_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_RestoreSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_RestoreSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null);
};
ApplicationClient.prototype.DeleteSession = function(session_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_DeleteSession(session_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_DeleteSession(session_id);
  }
};

ApplicationClient.prototype.send_DeleteSession = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('DeleteSession', Thrift.MessageType.CALL, this.seqid());
  var params = {
    session_id: session_id
  };
  var args = new Application_DeleteSession_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_DeleteSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_DeleteSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null);
};
ApplicationClient.prototype.CloseSession = function(session_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_CloseSession(session_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_CloseSession(session_id);
  }
};

ApplicationClient.prototype.send_CloseSession = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('CloseSession', Thrift.MessageType.CALL, this.seqid());
  var params = {
    session_id: session_id
  };
  var args = new Application_CloseSession_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_CloseSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_CloseSession_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  callback(null);
};
ApplicationClient.prototype.ListSessionFiles = function(folder, recursive, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ListSessionFiles(folder, recursive);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ListSessionFiles(folder, recursive);
  }
};

ApplicationClient.prototype.send_ListSessionFiles = function(folder, recursive) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ListSessionFiles', Thrift.MessageType.CALL, this.seqid());
  var params = {
    folder: folder,
    recursive: recursive
  };
  var args = new Application_ListSessionFiles_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_ListSessionFiles = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_ListSessionFiles_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ListSessionFiles failed: unknown result');
};
ApplicationClient.prototype.GetFileChunk = function(file_path, chunk, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetFileChunk(file_path, chunk);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetFileChunk(file_path, chunk);
  }
};

ApplicationClient.prototype.send_GetFileChunk = function(file_path, chunk) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetFileChunk', Thrift.MessageType.CALL, this.seqid());
  var params = {
    file_path: file_path,
    chunk: chunk
  };
  var args = new Application_GetFileChunk_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_GetFileChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_GetFileChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetFileChunk failed: unknown result');
};
ApplicationClient.prototype.SendFileChunk = function(remote_file_path, chunk, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_SendFileChunk(remote_file_path, chunk);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_SendFileChunk(remote_file_path, chunk);
  }
};

ApplicationClient.prototype.send_SendFileChunk = function(remote_file_path, chunk) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('SendFileChunk', Thrift.MessageType.CALL, this.seqid());
  var params = {
    remote_file_path: remote_file_path,
    chunk: chunk
  };
  var args = new Application_SendFileChunk_args(params);
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_SendFileChunk = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_SendFileChunk_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ex) {
    return callback(result.ex);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('SendFileChunk failed: unknown result');
};
ApplicationClient.prototype.ResetRpcConnectionCount = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ResetRpcConnectionCount();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ResetRpcConnectionCount();
  }
};

ApplicationClient.prototype.send_ResetRpcConnectionCount = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ResetRpcConnectionCount', Thrift.MessageType.CALL, this.seqid());
  var args = new Application_ResetRpcConnectionCount_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ApplicationClient.prototype.recv_ResetRpcConnectionCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Application_ResetRpcConnectionCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ResetRpcConnectionCount failed: unknown result');
};
var ApplicationProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(ApplicationProcessor, SharedServiceProcessor);
ApplicationProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ApplicationProcessor.prototype.process_GetApiVersion = function(seqid, input, output) {
  var args = new Application_GetApiVersion_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetApiVersion.length === 0) {
    Q.fcall(this._handler.GetApiVersion.bind(this._handler))
      .then(function(result) {
        var result_obj = new Application_GetApiVersion_result({success: result});
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetApiVersion(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_GetApiVersion_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetApiVersion", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_Quit = function(seqid, input, output) {
  var args = new Application_Quit_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.Quit();
}
;
ApplicationProcessor.prototype.process_LoadDocument = function(seqid, input, output) {
  var args = new Application_LoadDocument_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.LoadDocument.length === 1) {
    Q.fcall(this._handler.LoadDocument.bind(this._handler), args.file_path)
      .then(function(result) {
        var result_obj = new Application_LoadDocument_result({success: result});
        output.writeMessageBegin("LoadDocument", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadDocument", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.LoadDocument(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_LoadDocument_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("LoadDocument", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("LoadDocument", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_SaveDocument = function(seqid, input, output) {
  var args = new Application_SaveDocument_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SaveDocument.length === 1) {
    Q.fcall(this._handler.SaveDocument.bind(this._handler), args.file_path)
      .then(function(result) {
        var result_obj = new Application_SaveDocument_result({success: result});
        output.writeMessageBegin("SaveDocument", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveDocument", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SaveDocument(args.file_path, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_SaveDocument_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SaveDocument", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SaveDocument", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_NewDocument = function(seqid, input, output) {
  var args = new Application_NewDocument_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.NewDocument.length === 0) {
    Q.fcall(this._handler.NewDocument.bind(this._handler))
      .then(function(result) {
        var result_obj = new Application_NewDocument_result({success: result});
        output.writeMessageBegin("NewDocument", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("NewDocument", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.NewDocument(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_NewDocument_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("NewDocument", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("NewDocument", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_SendDocument = function(seqid, input, output) {
  var args = new Application_SendDocument_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SendDocument.length === 2) {
    Q.fcall(this._handler.SendDocument.bind(this._handler), args.memory_file, args.file_name)
      .then(function(result) {
        var result_obj = new Application_SendDocument_result({success: result});
        output.writeMessageBegin("SendDocument", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendDocument", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SendDocument(args.memory_file, args.file_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_SendDocument_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SendDocument", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendDocument", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_CreateSession = function(seqid, input, output) {
  var args = new Application_CreateSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CreateSession.length === 1) {
    Q.fcall(this._handler.CreateSession.bind(this._handler), args.session_id)
      .then(function(result) {
        var result_obj = new Application_CreateSession_result({success: result});
        output.writeMessageBegin("CreateSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_CreateSession_result(err);
          output.writeMessageBegin("CreateSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CreateSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CreateSession(args.session_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_CreateSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CreateSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CreateSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_RestoreSession = function(seqid, input, output) {
  var args = new Application_RestoreSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RestoreSession.length === 1) {
    Q.fcall(this._handler.RestoreSession.bind(this._handler), args.session_id)
      .then(function(result) {
        var result_obj = new Application_RestoreSession_result({success: result});
        output.writeMessageBegin("RestoreSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_RestoreSession_result(err);
          output.writeMessageBegin("RestoreSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RestoreSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RestoreSession(args.session_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_RestoreSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("RestoreSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RestoreSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_DeleteSession = function(seqid, input, output) {
  var args = new Application_DeleteSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.DeleteSession.length === 1) {
    Q.fcall(this._handler.DeleteSession.bind(this._handler), args.session_id)
      .then(function(result) {
        var result_obj = new Application_DeleteSession_result({success: result});
        output.writeMessageBegin("DeleteSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_DeleteSession_result(err);
          output.writeMessageBegin("DeleteSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("DeleteSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.DeleteSession(args.session_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_DeleteSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("DeleteSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("DeleteSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_CloseSession = function(seqid, input, output) {
  var args = new Application_CloseSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.CloseSession.length === 1) {
    Q.fcall(this._handler.CloseSession.bind(this._handler), args.session_id)
      .then(function(result) {
        var result_obj = new Application_CloseSession_result({success: result});
        output.writeMessageBegin("CloseSession", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_CloseSession_result(err);
          output.writeMessageBegin("CloseSession", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("CloseSession", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.CloseSession(args.session_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_CloseSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("CloseSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("CloseSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_ListSessionFiles = function(seqid, input, output) {
  var args = new Application_ListSessionFiles_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ListSessionFiles.length === 2) {
    Q.fcall(this._handler.ListSessionFiles.bind(this._handler), args.folder, args.recursive)
      .then(function(result) {
        var result_obj = new Application_ListSessionFiles_result({success: result});
        output.writeMessageBegin("ListSessionFiles", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_ListSessionFiles_result(err);
          output.writeMessageBegin("ListSessionFiles", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("ListSessionFiles", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ListSessionFiles(args.folder, args.recursive, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_ListSessionFiles_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ListSessionFiles", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ListSessionFiles", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_GetFileChunk = function(seqid, input, output) {
  var args = new Application_GetFileChunk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetFileChunk.length === 2) {
    Q.fcall(this._handler.GetFileChunk.bind(this._handler), args.file_path, args.chunk)
      .then(function(result) {
        var result_obj = new Application_GetFileChunk_result({success: result});
        output.writeMessageBegin("GetFileChunk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_GetFileChunk_result(err);
          output.writeMessageBegin("GetFileChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetFileChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetFileChunk(args.file_path, args.chunk, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_GetFileChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("GetFileChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetFileChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_SendFileChunk = function(seqid, input, output) {
  var args = new Application_SendFileChunk_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.SendFileChunk.length === 2) {
    Q.fcall(this._handler.SendFileChunk.bind(this._handler), args.remote_file_path, args.chunk)
      .then(function(result) {
        var result_obj = new Application_SendFileChunk_result({success: result});
        output.writeMessageBegin("SendFileChunk", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof ttypes.SessionError) {
          result = new Application_SendFileChunk_result(err);
          output.writeMessageBegin("SendFileChunk", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("SendFileChunk", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.SendFileChunk(args.remote_file_path, args.chunk, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.SessionError) {
        result_obj = new Application_SendFileChunk_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("SendFileChunk", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("SendFileChunk", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ApplicationProcessor.prototype.process_ResetRpcConnectionCount = function(seqid, input, output) {
  var args = new Application_ResetRpcConnectionCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ResetRpcConnectionCount.length === 0) {
    Q.fcall(this._handler.ResetRpcConnectionCount.bind(this._handler))
      .then(function(result) {
        var result_obj = new Application_ResetRpcConnectionCount_result({success: result});
        output.writeMessageBegin("ResetRpcConnectionCount", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ResetRpcConnectionCount", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ResetRpcConnectionCount(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new Application_ResetRpcConnectionCount_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("ResetRpcConnectionCount", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("ResetRpcConnectionCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
