//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.WMIQueryType = {
  'kVideoControllers' : 0,
  'kProcessors' : 1,
  'kComputerSystems' : 2,
  'kMotherboard' : 3,
  'kNetworkAdapters' : 4,
  'kEnumSize' : 5
};
var ApiVersion = module.exports.ApiVersion = function(args) {
  this.major = 1;
  this.minor = 0;
  if (args) {
    if (args.major !== undefined && args.major !== null) {
      this.major = args.major;
    }
    if (args.minor !== undefined && args.minor !== null) {
      this.minor = args.minor;
    }
  }
};
ApiVersion.prototype = {};
ApiVersion.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.major = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minor = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApiVersion.prototype.write = function(output) {
  output.writeStructBegin('ApiVersion');
  if (this.major !== null && this.major !== undefined) {
    output.writeFieldBegin('major', Thrift.Type.I32, 1);
    output.writeI32(this.major);
    output.writeFieldEnd();
  }
  if (this.minor !== null && this.minor !== undefined) {
    output.writeFieldBegin('minor', Thrift.Type.I32, 2);
    output.writeI32(this.minor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionError = module.exports.SessionError = function(args) {
  Thrift.TException.call(this, "SessionError");
  this.name = "SessionError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(SessionError, Thrift.TException);
SessionError.prototype.name = 'SessionError';
SessionError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionError.prototype.write = function(output) {
  output.writeStructBegin('SessionError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SessionInfo = module.exports.SessionInfo = function(args) {
  this.id = null;
  this.full_local_path = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.full_local_path !== undefined && args.full_local_path !== null) {
      this.full_local_path = args.full_local_path;
    }
  }
};
SessionInfo.prototype = {};
SessionInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.full_local_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SessionInfo.prototype.write = function(output) {
  output.writeStructBegin('SessionInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.full_local_path !== null && this.full_local_path !== undefined) {
    output.writeFieldBegin('full_local_path', Thrift.Type.STRING, 2);
    output.writeString(this.full_local_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TransferChunk = module.exports.TransferChunk = function(args) {
  this.data = null;
  this.position = 0;
  this.bytes_remaining = -1;
  this.chunk_size = 100000;
  this.last_write_time_local = 0;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
    if (args.bytes_remaining !== undefined && args.bytes_remaining !== null) {
      this.bytes_remaining = args.bytes_remaining;
    }
    if (args.chunk_size !== undefined && args.chunk_size !== null) {
      this.chunk_size = args.chunk_size;
    }
    if (args.last_write_time_local !== undefined && args.last_write_time_local !== null) {
      this.last_write_time_local = args.last_write_time_local;
    }
  }
};
TransferChunk.prototype = {};
TransferChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.bytes_remaining = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.chunk_size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.last_write_time_local = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransferChunk.prototype.write = function(output) {
  output.writeStructBegin('TransferChunk');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 1);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 2);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  if (this.bytes_remaining !== null && this.bytes_remaining !== undefined) {
    output.writeFieldBegin('bytes_remaining', Thrift.Type.I64, 3);
    output.writeI64(this.bytes_remaining);
    output.writeFieldEnd();
  }
  if (this.chunk_size !== null && this.chunk_size !== undefined) {
    output.writeFieldBegin('chunk_size', Thrift.Type.I64, 4);
    output.writeI64(this.chunk_size);
    output.writeFieldEnd();
  }
  if (this.last_write_time_local !== null && this.last_write_time_local !== undefined) {
    output.writeFieldBegin('last_write_time_local', Thrift.Type.I64, 5);
    output.writeI64(this.last_write_time_local);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileInfo = module.exports.FileInfo = function(args) {
  this.path = null;
  this.is_directory = null;
  this.size_bytes = 0;
  this.last_write_time_local = 0;
  if (args) {
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.is_directory !== undefined && args.is_directory !== null) {
      this.is_directory = args.is_directory;
    }
    if (args.size_bytes !== undefined && args.size_bytes !== null) {
      this.size_bytes = args.size_bytes;
    }
    if (args.last_write_time_local !== undefined && args.last_write_time_local !== null) {
      this.last_write_time_local = args.last_write_time_local;
    }
  }
};
FileInfo.prototype = {};
FileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_directory = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.size_bytes = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.last_write_time_local = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInfo.prototype.write = function(output) {
  output.writeStructBegin('FileInfo');
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 1);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.is_directory !== null && this.is_directory !== undefined) {
    output.writeFieldBegin('is_directory', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_directory);
    output.writeFieldEnd();
  }
  if (this.size_bytes !== null && this.size_bytes !== undefined) {
    output.writeFieldBegin('size_bytes', Thrift.Type.I64, 3);
    output.writeI64(this.size_bytes);
    output.writeFieldEnd();
  }
  if (this.last_write_time_local !== null && this.last_write_time_local !== undefined) {
    output.writeFieldBegin('last_write_time_local', Thrift.Type.I64, 4);
    output.writeI64(this.last_write_time_local);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WMIDeviceInfo = module.exports.WMIDeviceInfo = function(args) {
  this.entries = null;
  if (args) {
    if (args.entries !== undefined && args.entries !== null) {
      this.entries = Thrift.copyMap(args.entries, [null]);
    }
  }
};
WMIDeviceInfo.prototype = {};
WMIDeviceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.entries = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.entries[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WMIDeviceInfo.prototype.write = function(output) {
  output.writeStructBegin('WMIDeviceInfo');
  if (this.entries !== null && this.entries !== undefined) {
    output.writeFieldBegin('entries', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.entries));
    for (var kiter8 in this.entries)
    {
      if (this.entries.hasOwnProperty(kiter8))
      {
        var viter9 = this.entries[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WMIInfo = module.exports.WMIInfo = function(args) {
  this.devices = null;
  if (args) {
    if (args.devices !== undefined && args.devices !== null) {
      this.devices = Thrift.copyList(args.devices, [ttypes.WMIDeviceInfo]);
    }
  }
};
WMIInfo.prototype = {};
WMIInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.devices = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.WMIDeviceInfo();
          elem16.read(input);
          this.devices.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WMIInfo.prototype.write = function(output) {
  output.writeStructBegin('WMIInfo');
  if (this.devices !== null && this.devices !== undefined) {
    output.writeFieldBegin('devices', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.devices.length);
    for (var iter17 in this.devices)
    {
      if (this.devices.hasOwnProperty(iter17))
      {
        iter17 = this.devices[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkerProcess = module.exports.WorkerProcess = function(args) {
  this.host_name = null;
  this.application_port = null;
  this.pid = 0;
  if (args) {
    if (args.host_name !== undefined && args.host_name !== null) {
      this.host_name = args.host_name;
    }
    if (args.application_port !== undefined && args.application_port !== null) {
      this.application_port = args.application_port;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
  }
};
WorkerProcess.prototype = {};
WorkerProcess.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.application_port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerProcess.prototype.write = function(output) {
  output.writeStructBegin('WorkerProcess');
  if (this.host_name !== null && this.host_name !== undefined) {
    output.writeFieldBegin('host_name', Thrift.Type.STRING, 1);
    output.writeString(this.host_name);
    output.writeFieldEnd();
  }
  if (this.application_port !== null && this.application_port !== undefined) {
    output.writeFieldBegin('application_port', Thrift.Type.I32, 2);
    output.writeI32(this.application_port);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.I32, 3);
    output.writeI32(this.pid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkerProcessOptions = module.exports.WorkerProcessOptions = function(args) {
  this.additional_argv = null;
  if (args) {
    if (args.additional_argv !== undefined && args.additional_argv !== null) {
      this.additional_argv = Thrift.copyList(args.additional_argv, [null]);
    }
  }
};
WorkerProcessOptions.prototype = {};
WorkerProcessOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.additional_argv = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.additional_argv.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkerProcessOptions.prototype.write = function(output) {
  output.writeStructBegin('WorkerProcessOptions');
  if (this.additional_argv !== null && this.additional_argv !== undefined) {
    output.writeFieldBegin('additional_argv', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.additional_argv.length);
    for (var iter25 in this.additional_argv)
    {
      if (this.additional_argv.hasOwnProperty(iter25))
      {
        iter25 = this.additional_argv[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ProcessFactoryConfig = module.exports.ProcessFactoryConfig = function(args) {
  this.max_number_of_processes = 1;
  if (args) {
    if (args.max_number_of_processes !== undefined && args.max_number_of_processes !== null) {
      this.max_number_of_processes = args.max_number_of_processes;
    }
  }
};
ProcessFactoryConfig.prototype = {};
ProcessFactoryConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.max_number_of_processes = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProcessFactoryConfig.prototype.write = function(output) {
  output.writeStructBegin('ProcessFactoryConfig');
  if (this.max_number_of_processes !== null && this.max_number_of_processes !== undefined) {
    output.writeFieldBegin('max_number_of_processes', Thrift.Type.I32, 1);
    output.writeI32(this.max_number_of_processes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

