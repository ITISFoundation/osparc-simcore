{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Endpoint",
        "operationId": "health_endpoint_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationHealth"
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        }
      }
    },
    "/v1/containers": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Containers Docker Inspect",
        "description": "Returns entire docker inspect data, if only_state is True,\nthe status of the containers is returned",
        "operationId": "containers_docker_inspect_v1_containers_get",
        "parameters": [
          {
            "description": "if True only show the status of the container",
            "required": false,
            "schema": {
              "title": "Only Status",
              "type": "boolean",
              "description": "if True only show the status of the container",
              "default": false
            },
            "name": "only_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Runs Docker Compose Up",
        "description": "Expects the docker-compose spec as raw-body utf-8 encoded text",
        "operationId": "runs_docker_compose_up_v1_containers_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Cannot validate submitted compose spec"
          }
        }
      }
    },
    "/v1/containers:down": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Runs Docker Compose Down",
        "description": "Removes the previously started service\nand returns the docker-compose output",
        "operationId": "runs_docker_compose_down_v1_containers_down_post",
        "parameters": [
          {
            "description": "docker-compose down command timeout default",
            "required": false,
            "schema": {
              "title": "Command Timeout",
              "type": "number",
              "description": "docker-compose down command timeout default",
              "default": 10.0
            },
            "name": "command_timeout",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No compose spec found"
          },
          "422": {
            "description": "Error while shutting down containers"
          }
        }
      }
    },
    "/v1/containers/{id}/logs": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Get Container Logs",
        "description": "Returns the logs of a given container if found",
        "operationId": "get_container_logs_v1_containers__id__logs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Only return logs since this time, as a UNIX timestamp",
            "required": false,
            "schema": {
              "title": "Timestamp",
              "type": "integer",
              "description": "Only return logs since this time, as a UNIX timestamp",
              "default": 0
            },
            "name": "since",
            "in": "query"
          },
          {
            "description": "Only return logs before this time, as a UNIX timestamp",
            "required": false,
            "schema": {
              "title": "Timestamp",
              "type": "integer",
              "description": "Only return logs before this time, as a UNIX timestamp",
              "default": 0
            },
            "name": "until",
            "in": "query"
          },
          {
            "description": "Enabling this parameter will include timestamps in logs",
            "required": false,
            "schema": {
              "title": "Display timestamps",
              "type": "boolean",
              "description": "Enabling this parameter will include timestamps in logs",
              "default": false
            },
            "name": "timestamps",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Container does not exists"
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/name": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Get Entrypoint Container Name",
        "description": "Searches for the container's name given the network\non which the proxy communicates with it.\nSupported filters:\n    network: name of the network",
        "operationId": "get_entrypoint_container_name_v1_containers_name_get",
        "parameters": [
          {
            "description": "JSON encoded dictionary. FastAPI does not allow for dict as type in query parameters",
            "required": true,
            "schema": {
              "title": "Filters",
              "type": "string",
              "description": "JSON encoded dictionary. FastAPI does not allow for dict as type in query parameters"
            },
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "No entrypoint container found or spec is not yet present"
          },
          "422": {
            "description": "Filters could not be parsed"
          }
        }
      }
    },
    "/v1/containers/{id}": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Inspect Container",
        "description": "Returns information about the container, like docker inspect command",
        "operationId": "inspect_container_v1_containers__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Container does not exist"
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/state:restore": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Restores the state of the dynamic service",
        "description": "When restoring the state:\n- pull inputs via nodeports\n- pull all the extra state paths",
        "operationId": "restore_state_v1_containers_state_restore_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v1/containers/state:save": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Stores the state of the dynamic service",
        "operationId": "save_state_v1_containers_state_save_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v1/containers/ports/inputs:pull": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Pull input ports data",
        "operationId": "pull_input_ports_v1_containers_ports_inputs_pull_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Port Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/directory-watcher:disable": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Disable directory-watcher event propagation",
        "operationId": "disable_directory_watcher_v1_containers_directory_watcher_disable_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v1/containers/directory-watcher:enable": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Enable directory-watcher event propagation",
        "operationId": "enable_directory_watcher_v1_containers_directory_watcher_enable_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v1/containers/ports/outputs:create-dirs": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Creates the output directories declared by the labels",
        "operationId": "create_output_dirs_v1_containers_ports_outputs_create_dirs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDirsRequestItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/outputs:pull": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Pull input ports data",
        "operationId": "pull_output_ports_v1_containers_ports_outputs_pull_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Port Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/outputs:push": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Push output ports data",
        "operationId": "push_output_ports_v1_containers_ports_outputs_push_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Port Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers:restart": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Restarts Containers",
        "description": "Removes the previously started service\nand returns the docker-compose output",
        "operationId": "restarts_containers_v1_containers_restart_post",
        "parameters": [
          {
            "description": "docker-compose stop command timeout default",
            "required": false,
            "schema": {
              "title": "Command Timeout",
              "type": "number",
              "description": "docker-compose stop command timeout default",
              "default": 10.0
            },
            "name": "command_timeout",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Container does not exist"
          },
          "422": {
            "description": "Error while running docker-compose command"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationHealth": {
        "title": "ApplicationHealth",
        "type": "object",
        "properties": {
          "is_healthy": {
            "title": "Is Healthy",
            "type": "boolean",
            "description": "returns True if the service sis running correctly",
            "default": true
          },
          "error_message": {
            "title": "Error Message",
            "type": "string",
            "description": "in case of error this gets set"
          }
        }
      },
      "CreateDirsRequestItem": {
        "title": "CreateDirsRequestItem",
        "required": [
          "outputs_labels"
        ],
        "type": "object",
        "properties": {
          "outputs_labels": {
            "title": "Outputs Labels",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceOutput"
            }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "DEPRECATED: new display order is taken from the item position. This will be removed.",
            "deprecated": true
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input or output port"
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "minimum Height of the textarea",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
