{
  "openapi": "3.0.2",
  "info": {
    "title": "simcore-service-dynamic-sidecar",
    "description": " Implements a sidecar service to manage user's dynamic/interactive services",
    "version": "1.1.1"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default server: requests directed to serving url"
    },
    {
      "url": "http://{host}:{port}",
      "description": "Development server: can configure any base url",
      "variables": {
        "host": {
          "default": "127.0.0.1"
        },
        "port": {
          "default": "8000"
        }
      }
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "summary": "Health Endpoint",
        "operationId": "health_endpoint_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationHealth"
                }
              }
            }
          },
          "503": {
            "description": "Service is unhealthy"
          }
        }
      }
    },
    "/v1/containers": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Containers Docker Inspect",
        "description": "Returns entire docker inspect data, if only_state is True,\nthe status of the containers is returned",
        "operationId": "containers_docker_inspect_v1_containers_get",
        "parameters": [
          {
            "description": "if True only show the status of the container",
            "required": false,
            "schema": {
              "title": "Only Status",
              "type": "boolean",
              "description": "if True only show the status of the container",
              "default": false
            },
            "name": "only_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Containers Docker Inspect V1 Containers Get",
                  "type": "object"
                }
              }
            }
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Starts the containers as defined in ContainerCreate by:\n- cleaning up resources from previous runs if any\n- pulling the needed images\n- starting the containers\n\nProgress may be obtained through URL\nProcess may be cancelled through URL",
        "operationId": "create_service_containers_task_v1_containers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContainersCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Create Service Containers Task V1 Containers Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/logs": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Get Container Logs",
        "description": "Returns the logs of a given container if found",
        "operationId": "get_container_logs_v1_containers__id__logs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          },
          {
            "description": "Only return logs since this time, as a UNIX timestamp",
            "required": false,
            "schema": {
              "title": "Timestamp",
              "type": "integer",
              "description": "Only return logs since this time, as a UNIX timestamp",
              "default": 0
            },
            "name": "since",
            "in": "query"
          },
          {
            "description": "Only return logs before this time, as a UNIX timestamp",
            "required": false,
            "schema": {
              "title": "Timestamp",
              "type": "integer",
              "description": "Only return logs before this time, as a UNIX timestamp",
              "default": 0
            },
            "name": "until",
            "in": "query"
          },
          {
            "description": "Enabling this parameter will include timestamps in logs",
            "required": false,
            "schema": {
              "title": "Display timestamps",
              "type": "boolean",
              "description": "Enabling this parameter will include timestamps in logs",
              "default": false
            },
            "name": "timestamps",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Container Logs V1 Containers  Id  Logs Get",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Container does not exists"
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/name": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Get Containers Name",
        "description": "Searches for the container's name given the network\non which the proxy communicates with it.\nSupported filters:\n    network: matches against the exact network name\n        assigned to the container; `will include`\n        containers\n    exclude: matches if contained in the name of the\n        container; `will exclude` containers",
        "operationId": "get_containers_name_v1_containers_name_get",
        "parameters": [
          {
            "description": "JSON encoded dictionary. FastAPI does not allow for dict as type in query parameters",
            "required": true,
            "schema": {
              "title": "Filters",
              "type": "string",
              "description": "JSON encoded dictionary. FastAPI does not allow for dict as type in query parameters"
            },
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Containers Name V1 Containers Name Get",
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "No entrypoint container found or spec is not yet present"
          },
          "422": {
            "description": "Filters could not be parsed"
          }
        }
      }
    },
    "/v1/containers/{id}": {
      "get": {
        "tags": [
          "containers"
        ],
        "summary": "Inspect Container",
        "description": "Returns information about the container, like docker inspect command",
        "operationId": "inspect_container_v1_containers__id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Inspect Container V1 Containers  Id  Get",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "Container does not exist"
          },
          "500": {
            "description": "Errors in container"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/directory-watcher": {
      "patch": {
        "tags": [
          "containers"
        ],
        "summary": "Enable/disable directory-watcher event propagation",
        "operationId": "toggle_directory_watcher_v1_containers_directory_watcher_patch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDirectoryWatcherItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/outputs/dirs": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Creates the output directories declared by the docker images's labels. It is more convenient to pass the labels from director-v2, since it already has all the machinery to call into director-v0 to retrieve them.",
        "operationId": "create_output_dirs_v1_containers_ports_outputs_dirs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDirsRequestItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/networks:attach": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "attach container to a network, if not already attached",
        "operationId": "attach_container_to_network_v1_containers__id__networks_attach_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachContainerToNetworkItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/{id}/networks:detach": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "detach container from a network, if not already detached",
        "operationId": "detach_container_from_network_v1_containers__id__networks_detach_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Id",
              "type": "string"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachContainerFromNetworkItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers:down": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Remove the previously started containers",
        "operationId": "runs_docker_compose_down_task_v1_containers_down_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Runs Docker Compose Down Task V1 Containers Down Post",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/state:restore": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Restores the state of the dynamic service",
        "operationId": "state_restore_task_v1_containers_state_restore_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response State Restore Task V1 Containers State Restore Post",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/state:save": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Stores the state of the dynamic service",
        "operationId": "state_save_task_v1_containers_state_save_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response State Save Task V1 Containers State Save Post",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/inputs:pull": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Pull input ports data",
        "operationId": "ports_inputs_pull_task_v1_containers_ports_inputs_pull_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Port Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Ports Inputs Pull Task V1 Containers Ports Inputs Pull Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/outputs:pull": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Pull output ports data",
        "operationId": "ports_outputs_pull_task_v1_containers_ports_outputs_pull_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Port Keys",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Ports Outputs Pull Task V1 Containers Ports Outputs Pull Post",
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers/ports/outputs:push": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Push output ports data",
        "operationId": "ports_outputs_push_task_v1_containers_ports_outputs_push_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Ports Outputs Push Task V1 Containers Ports Outputs Push Post",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/containers:restart": {
      "post": {
        "tags": [
          "containers"
        ],
        "summary": "Restarts previously started containers",
        "operationId": "containers_restart_task_v1_containers_restart_post",
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Containers Restart Task V1 Containers Restart Post",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/volumes/{id}": {
      "put": {
        "tags": [
          "volumes"
        ],
        "summary": "Updates the state of the volume",
        "operationId": "put_volume_state_v1_volumes__id__put",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/VolumeCategory"
            },
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutVolumeItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApplicationHealth": {
        "title": "ApplicationHealth",
        "type": "object",
        "properties": {
          "is_healthy": {
            "title": "Is Healthy",
            "type": "boolean",
            "description": "returns True if the service sis running correctly",
            "default": true
          },
          "error_message": {
            "title": "Error Message",
            "type": "string",
            "description": "in case of error this gets set"
          }
        }
      },
      "AttachContainerToNetworkItem": {
        "title": "AttachContainerToNetworkItem",
        "required": [
          "network_id",
          "network_aliases"
        ],
        "type": "object",
        "properties": {
          "network_id": {
            "title": "Network Id",
            "type": "string"
          },
          "network_aliases": {
            "title": "Network Aliases",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ContainersCreate": {
        "title": "ContainersCreate",
        "required": [
          "docker_compose_yaml"
        ],
        "type": "object",
        "properties": {
          "docker_compose_yaml": {
            "title": "Docker Compose Yaml",
            "type": "string"
          }
        }
      },
      "CreateDirsRequestItem": {
        "title": "CreateDirsRequestItem",
        "required": [
          "outputs_labels"
        ],
        "type": "object",
        "properties": {
          "outputs_labels": {
            "title": "Outputs Labels",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceOutput"
            }
          }
        }
      },
      "DetachContainerFromNetworkItem": {
        "title": "DetachContainerFromNetworkItem",
        "required": [
          "network_id"
        ],
        "type": "object",
        "properties": {
          "network_id": {
            "title": "Network Id",
            "type": "string"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "PatchDirectoryWatcherItem": {
        "title": "PatchDirectoryWatcherItem",
        "required": [
          "is_enabled"
        ],
        "type": "object",
        "properties": {
          "is_enabled": {
            "title": "Is Enabled",
            "type": "boolean"
          }
        }
      },
      "PutVolumeItem": {
        "title": "PutVolumeItem",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/VolumeStatus"
          }
        }
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "DEPRECATED: new display order is taken from the item position. This will be removed.",
            "deprecated": true
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "contentSchema": {
            "title": "Contentschema",
            "type": "object",
            "description": "jsonschema of this input/output. Required when type='ref_contentSchema'"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for service input/outputs"
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "minimum Height of the textarea",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "VolumeCategory": {
        "title": "VolumeCategory",
        "enum": [
          "OUTPUTS",
          "INPUTS",
          "STATES",
          "SHARED_STORE"
        ],
        "type": "string",
        "description": "These uniquely identify volumes which are mounted by\nthe dynamic-sidecar and user services.\n\nThis is primarily used to keep track of the status of\neach individual volume on the volumes.\n\nThe status is ingested by the agent and processed\nwhen the volume is removed."
      },
      "VolumeStatus": {
        "title": "VolumeStatus",
        "enum": [
          "CONTENT_NEEDS_TO_BE_SAVED",
          "CONTENT_WAS_SAVED",
          "CONTENT_NO_SAVE_REQUIRED"
        ],
        "type": "string",
        "description": "Used by the agent to figure out what to do with the data\npresent on the volume."
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
