{
  "openapi": "3.0.2",
  "info": {
    "title": "simcore-service-director-v2",
    "description": " Orchestrates the pipeline of services defined by the user",
    "version": "2.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Check Service Health",
        "operationId": "check_service_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Services",
        "description": "Lists services available in the deployed registry",
        "operationId": "list_services_v0_services_get",
        "parameters": [
          {
            "description": "The service type:\n   - computational - a computational service\n   - interactive - an interactive service\n",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/ServiceType"
            },
            "name": "service_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Service Versioned",
        "description": "Returns details of the selected service if available in the platform",
        "operationId": "get_service_versioned_v0_services__service_key___service_version__get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}/extras": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Extra Service Versioned",
        "description": "Currently returns the node_requirements an array of resoruces needed for scheduling",
        "operationId": "get_extra_service_versioned_v0_services__service_key___service_version__extras_get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExtrasEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/running_interactive_services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Running Interactive Services",
        "description": "Lists of running interactive services",
        "operationId": "list_running_interactive_services_v0_running_interactive_services_get",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningServicesEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "summary": "Start Interactive Service",
        "description": "Starts an interactive service in the  platform",
        "operationId": "start_interactive_service_v0_running_interactive_services_post",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
              "type": "string",
              "description": "distinctive name for the node based on the docker registry path",
              "example": [
                "simcore/services/comp/itis/sleeper",
                "simcore/services/dynamic/3dviewer"
              ]
            },
            "name": "service_key",
            "in": "query"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service",
              "example": "1.0.0"
            },
            "name": "service_version",
            "in": "query"
          },
          {
            "description": "The uuid to assign the service with",
            "required": true,
            "schema": {
              "title": "Service Uuid",
              "type": "string",
              "description": "The uuid to assign the service with"
            },
            "name": "service_uuid",
            "in": "query"
          },
          {
            "description": "predefined basepath for the backend service otherwise uses root",
            "required": false,
            "schema": {
              "title": "Service Base Path",
              "type": "string",
              "description": "predefined basepath for the backend service otherwise uses root",
              "default": "",
              "example": "/x/EycCXbU0H/"
            },
            "name": "service_base_path",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/demo": {
      "get": {
        "tags": [
          "demo"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_v2_demo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Author": {
        "title": "Author",
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the author",
            "example": [
              "Sun Bak",
              "Delenn"
            ]
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address",
            "format": "email",
            "example": "sun@sense.eight"
          },
          "affiliation": {
            "title": "Affiliation",
            "type": "string",
            "description": "Affiliation of the author",
            "example": "Sense8"
          }
        }
      },
      "Badge": {
        "title": "Badge",
        "required": [
          "name",
          "image",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the subject",
            "example": [
              "travis-ci",
              "coverals.io",
              "github.io"
            ]
          },
          "image": {
            "title": "Image",
            "type": "string",
            "description": "Url to the shield",
            "example": [
              "https://travis-ci.org/ITISFoundation/osparc-simcore.svg?branch=master",
              "https://coveralls.io/repos/github/ITISFoundation/osparc-simcore/badge.svg?branch=master",
              "https://img.shields.io/website-up-down-green-red/https/itisfoundation.github.io.svg?label=documentation"
            ]
          },
          "url": {
            "title": "Url",
            "type": "string",
            "description": "Link to status",
            "example": [
              "https://travis-ci.org/ITISFoundation/osparc-simcore 'State of CI: build, test and pushing images'",
              "https://coveralls.io/github/ITISFoundation/osparc-simcore?branch=master 'Test coverage'",
              "https://itisfoundation.github.io/"
            ]
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ImageMetaData": {
        "title": "ImageMetaData",
        "required": [
          "key",
          "version",
          "name",
          "description",
          "authors",
          "contact",
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path",
            "example": [
              "simcore/services/comp/itis/sleeper",
              "simcore/services/dynamic/3dviewer"
            ]
          },
          "integration-version": {
            "title": "Integration-Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "integration version number",
            "example": "1.0.0"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number",
            "example": "0.0.1"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "short, human readable name for the node",
            "example": "Fast Counter"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "type": "string",
            "description": "url to the thumbnail",
            "example": "https://user-images.githubusercontent.com/32800795/61083844-ff48fb00-a42c-11e9-8e63-fa2d709c8baf.png"
          },
          "badges": {
            "title": "Badges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "human readable description of the purpose of the node",
            "example": "The mother of all nodes, makes your numbers shine!"
          },
          "authors": {
            "title": "Authors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "description": "email to correspond to the authors about the node",
            "format": "email",
            "example": "lab@net.flix"
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "definition of the inputs of this node"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "definition of the outputs of this node"
          }
        }
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "NodeRequirement": {
        "title": "NodeRequirement",
        "enum": [
          "CPU",
          "GPU"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RunningServiceType": {
        "title": "RunningServiceType",
        "required": [
          "published_port",
          "service_uuid",
          "service_key",
          "service_version",
          "service_host",
          "service_port",
          "service_state"
        ],
        "type": "object",
        "properties": {
          "published_port": {
            "title": "Published Port",
            "minimum": 1.0,
            "type": "integer",
            "description": "The ports where the service provides its interface"
          },
          "entry_point": {
            "title": "Entry Point",
            "type": "string",
            "description": "The entry point where the service provides its interface if specified"
          },
          "service_uuid": {
            "title": "Service Uuid",
            "type": "string",
            "description": "The UUID attached to this service"
          },
          "service_key": {
            "title": "Service Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic)(/[^\\s/]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "title": "Service Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "semantic version number"
          },
          "service_host": {
            "title": "Service Host",
            "type": "string",
            "description": "service host name within the network"
          },
          "service_port": {
            "title": "Service Port",
            "minimum": 1.0,
            "type": "integer",
            "description": "port to access the service within the network"
          },
          "service_basepath": {
            "title": "Service Basepath",
            "type": "string",
            "description": "different base path where current service is mounted otherwise defaults to root",
            "default": ""
          },
          "service_state": {
            "$ref": "#/components/schemas/ServiceState"
          },
          "service_message": {
            "title": "Service Message",
            "type": "string",
            "description": "the service message"
          }
        }
      },
      "RunningServicesArray": {
        "title": "RunningServicesArray",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RunningServiceType"
        }
      },
      "RunningServicesEnveloped": {
        "title": "RunningServicesEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RunningServicesArray"
          }
        }
      },
      "ServiceBuildDetails": {
        "title": "ServiceBuildDetails",
        "type": "object",
        "properties": {
          "build_date": {
            "title": "Build Date",
            "type": "string"
          },
          "vcs_ref": {
            "title": "Vcs Ref",
            "type": "string"
          },
          "vcs_url": {
            "title": "Vcs Url",
            "type": "string"
          }
        }
      },
      "ServiceExtras": {
        "title": "ServiceExtras",
        "required": [
          "node_requirements"
        ],
        "type": "object",
        "properties": {
          "node_requirements": {
            "title": "Node Requirements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeRequirement"
            }
          },
          "service_build_details": {
            "$ref": "#/components/schemas/ServiceBuildDetails"
          }
        }
      },
      "ServiceExtrasEnveloped": {
        "title": "ServiceExtrasEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceExtras"
          }
        }
      },
      "ServiceState": {
        "title": "ServiceState",
        "enum": [
          "pending",
          "pulling",
          "starting",
          "running",
          "complete",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "computational",
          "interactive"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServicesArrayEnveloped": {
        "title": "ServicesArrayEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageMetaData"
            }
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    }
  }
}
