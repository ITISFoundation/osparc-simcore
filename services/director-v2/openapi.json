{
  "openapi": "3.0.2",
  "info": {
    "title": "simcore-service-director-v2",
    "description": " Orchestrates the pipeline of services defined by the user",
    "version": "2.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Check Service Health",
        "operationId": "check_service_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Services",
        "description": "Lists services available in the deployed registry",
        "operationId": "list_services_v0_services_get",
        "parameters": [
          {
            "description": "The service type:\n   - computational - a computational service\n   - interactive - an interactive service\n",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServiceType"
                }
              ],
              "description": "The service type:\n   - computational - a computational service\n   - interactive - an interactive service\n"
            },
            "name": "service_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}/extras": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Extra Service Versioned",
        "description": "Currently returns the node_requirements an array of resoruces needed for scheduling",
        "operationId": "get_extra_service_versioned_v0_services__service_key___service_version__extras_get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExtrasEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Service Versioned",
        "description": "Returns details of the selected service if available in the platform",
        "operationId": "get_service_versioned_v0_services__service_key___service_version__get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/running_interactive_services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Running Interactive Services",
        "description": "Lists of running interactive services",
        "operationId": "list_running_interactive_services_v0_running_interactive_services_get",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningServicesDetailsArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "summary": "Start Interactive Service",
        "description": "Starts an interactive service in the  platform",
        "operationId": "start_interactive_service_v0_running_interactive_services_post",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string",
              "description": "distinctive name for the node based on the docker registry path",
              "example": [
                "simcore/services/comp/itis/sleeper",
                "simcore/services/dynamic/3dviewer"
              ]
            },
            "name": "service_key",
            "in": "query"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service",
              "example": "1.0.0"
            },
            "name": "service_version",
            "in": "query"
          },
          {
            "description": "The uuid to assign the service with",
            "required": true,
            "schema": {
              "title": "Service Uuid",
              "type": "string",
              "description": "The uuid to assign the service with"
            },
            "name": "service_uuid",
            "in": "query"
          },
          {
            "description": "predefined basepath for the backend service otherwise uses root",
            "required": false,
            "schema": {
              "title": "Service Base Path",
              "type": "string",
              "description": "predefined basepath for the backend service otherwise uses root",
              "default": "",
              "example": "/x/EycCXbU0H/"
            },
            "name": "service_base_path",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/demo": {
      "get": {
        "tags": [
          "demo"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_v2_demo_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Create and optionally start a new computation",
        "operationId": "create_computation_v2_computations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationTaskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationTaskOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Returns a computation pipeline state",
        "operationId": "get_computation_v2_computations__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": 0.0,
              "type": "integer"
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationTaskOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "computations"
        ],
        "summary": "Deletes a computation pipeline",
        "operationId": "delete_pipeline_v2_computations__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationTaskDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}:stop": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Stops a computation pipeline",
        "operationId": "stop_computation_project_v2_computations__project_id__stop_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationTaskStop"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:retrieve": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's retrieve endpoint with optional port_keys",
        "operationId": "service_retrieve_data_on_ports_v2_dynamic_services__node_uuid__retrieve_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveDataIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveDataOutEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Author": {
        "title": "Author",
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the author",
            "example": "Jim Knopf"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address",
            "format": "email"
          },
          "affiliation": {
            "title": "Affiliation",
            "type": "string",
            "description": "Affiliation of the author"
          }
        },
        "additionalProperties": false
      },
      "Badge": {
        "title": "Badge",
        "required": [
          "name",
          "image",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the subject"
          },
          "image": {
            "title": "Image",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Url to the badge",
            "format": "uri"
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the status",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "ComputationTaskCreate": {
        "title": "ComputationTaskCreate",
        "required": [
          "user_id",
          "project_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": 0.0,
            "type": "integer"
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "format": "uuid"
          },
          "start_pipeline": {
            "title": "Start Pipeline",
            "type": "boolean",
            "description": "if True the computation pipeline will start right away",
            "default": false
          },
          "subgraph": {
            "title": "Subgraph",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "An optional set of nodes that must be executed, if empty the whole pipeline is executed"
          },
          "force_restart": {
            "title": "Force Restart",
            "type": "boolean",
            "description": "if True will force re-running all dependent nodes",
            "default": false
          }
        }
      },
      "ComputationTaskDelete": {
        "title": "ComputationTaskDelete",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": 0.0,
            "type": "integer"
          },
          "force": {
            "title": "Force",
            "type": "boolean",
            "description": "if True then the pipeline will be removed even if it is running",
            "default": false
          }
        }
      },
      "ComputationTaskOut": {
        "title": "ComputationTaskOut",
        "required": [
          "id",
          "state",
          "pipeline",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "the id of the computation task",
            "format": "uuid"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the state of the computational task"
          },
          "result": {
            "title": "Result",
            "type": "string",
            "description": "the result of the computational task"
          },
          "pipeline": {
            "title": "Pipeline",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "the corresponding pipeline in terms of node uuids"
          },
          "url": {
            "title": "Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "the link where to get the status of the task",
            "format": "uri"
          },
          "stop_url": {
            "title": "Stop Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "the link where to stop the task",
            "format": "uri"
          }
        }
      },
      "ComputationTaskStop": {
        "title": "ComputationTaskStop",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": 0.0,
            "type": "integer"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "NodeRequirement": {
        "title": "NodeRequirement",
        "enum": [
          "CPU",
          "GPU",
          "MPI"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "RetrieveDataIn": {
        "title": "RetrieveDataIn",
        "required": [
          "port_keys"
        ],
        "type": "object",
        "properties": {
          "port_keys": {
            "title": "Port Keys",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^[-_a-zA-Z0-9]+$"
            },
            "description": "The port keys to retrieve data from"
          }
        }
      },
      "RetrieveDataOut": {
        "title": "RetrieveDataOut",
        "required": [
          "size_bytes"
        ],
        "type": "object",
        "properties": {
          "size_bytes": {
            "title": "Size Bytes",
            "type": "integer",
            "description": "The amount of data transferred by the retrieve call"
          }
        }
      },
      "RetrieveDataOutEnveloped": {
        "title": "RetrieveDataOutEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RetrieveDataOut"
          }
        }
      },
      "RunningServiceDetails": {
        "title": "RunningServiceDetails",
        "required": [
          "published_port",
          "entry_point",
          "service_uuid",
          "service_key",
          "service_version",
          "service_host",
          "service_basepath",
          "service_state",
          "service_message"
        ],
        "type": "object",
        "properties": {
          "published_port": {
            "title": "Published Port",
            "exclusiveMaximum": 65535.0,
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "The ports where the service provides its interface on the docker swarm",
            "deprecated": true
          },
          "entry_point": {
            "title": "Entry Point",
            "type": "string",
            "description": "The entry point where the service provides its interface"
          },
          "service_uuid": {
            "title": "Service Uuid",
            "pattern": "^[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "The node UUID attached to the service"
          },
          "service_key": {
            "title": "Service Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path",
            "example": [
              "simcore/services/comp/itis/sleeper",
              "simcore/services/dynamic/3dviewer"
            ]
          },
          "service_version": {
            "title": "Service Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number",
            "example": [
              "1.0.0",
              "0.0.1"
            ]
          },
          "service_host": {
            "title": "Service Host",
            "type": "string",
            "description": "service host name within the network"
          },
          "service_port": {
            "title": "Service Port",
            "exclusiveMaximum": 65535.0,
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "port to access the service within the network",
            "default": 80
          },
          "service_basepath": {
            "title": "Service Basepath",
            "type": "string",
            "description": "the service base entrypoint where the service serves its contents"
          },
          "service_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceState"
              }
            ],
            "description": "the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start\n"
          },
          "service_message": {
            "title": "Service Message",
            "type": "string",
            "description": "the service message"
          }
        }
      },
      "RunningServicesDetailsArray": {
        "title": "RunningServicesDetailsArray",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RunningServiceDetails"
        }
      },
      "RunningServicesDetailsArrayEnveloped": {
        "title": "RunningServicesDetailsArrayEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RunningServicesDetailsArray"
          }
        }
      },
      "RunningState": {
        "title": "RunningState",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "STARTED",
          "RETRY",
          "SUCCESS",
          "FAILED",
          "ABORTED"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceBuildDetails": {
        "title": "ServiceBuildDetails",
        "required": [
          "build_date",
          "vcs_ref",
          "vcs_url"
        ],
        "type": "object",
        "properties": {
          "build_date": {
            "title": "Build Date",
            "type": "string"
          },
          "vcs_ref": {
            "title": "Vcs Ref",
            "type": "string"
          },
          "vcs_url": {
            "title": "Vcs Url",
            "type": "string"
          }
        }
      },
      "ServiceDockerData": {
        "title": "simcore node",
        "required": [
          "name",
          "description",
          "key",
          "version",
          "type",
          "authors",
          "contact",
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "short, human readable name for the node",
            "example": "Fast Counter"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the thumbnail",
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "human readable description of the purpose of the node"
          },
          "key": {
            "title": "Key",
            "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number"
          },
          "integration-version": {
            "title": "Integration-Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "integration version number"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ],
            "description": "service type"
          },
          "badges": {
            "title": "Badges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "authors": {
            "title": "Authors",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "description": "email to correspond to the authors about the node",
            "format": "email"
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "definition of the inputs of this node"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "definition of the outputs of this node"
          }
        },
        "additionalProperties": false,
        "description": "Service base schema (used for docker labels on docker images)"
      },
      "ServiceExtras": {
        "title": "ServiceExtras",
        "required": [
          "node_requirements"
        ],
        "type": "object",
        "properties": {
          "node_requirements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeRequirement"
            }
          },
          "service_build_details": {
            "$ref": "#/components/schemas/ServiceBuildDetails"
          }
        }
      },
      "ServiceExtrasEnveloped": {
        "title": "ServiceExtrasEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceExtras"
          }
        }
      },
      "ServiceInput": {
        "title": "ServiceInput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type"
          }
        },
        "additionalProperties": false
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "ServiceState": {
        "title": "ServiceState",
        "enum": [
          "pending",
          "pulling",
          "starting",
          "running",
          "complete",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "computational",
          "dynamic",
          "frontend"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServicesArrayEnveloped": {
        "title": "ServicesArrayEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDockerData"
            }
          }
        }
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "minimum Height of the textarea"
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
