{
  "openapi": "3.1.0",
  "info": {
    "title": "simcore-service-director-v2",
    "description": "Orchestrates the pipeline of services defined by the user",
    "version": "2.3.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default server: requests directed to serving url"
    },
    {
      "url": "http://{host}:{port}",
      "description": "Development server: can configure any base url",
      "variables": {
        "host": {
          "default": "127.0.0.1"
        },
        "port": {
          "default": "8000"
        }
      }
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Check Service Health",
        "operationId": "check_service_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckGet"
                }
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseMeta"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Create and optionally start a new computation",
        "operationId": "create_computation_v2_computations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "404": {
            "description": "Project or pricing details not found"
          },
          "406": {
            "description": "Cluster not found"
          },
          "503": {
            "description": "Service not available"
          },
          "422": {
            "description": "Configuration error"
          },
          "402": {
            "description": "Payment required"
          },
          "409": {
            "description": "Project already started"
          }
        }
      }
    },
    "/v2/computations/{project_id}": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Returns a computation pipeline state",
        "operationId": "get_computation_v2_computations__project_id__get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "computations"
        ],
        "summary": "Deletes a computation pipeline",
        "operationId": "delete_computation_v2_computations__project_id__delete",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationDelete"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}:stop": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Stops a computation pipeline",
        "operationId": "stop_computation_v2_computations__project_id__stop_post",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationStop"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/-/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns download links to log-files of each task in a computation.\nEach log is only available when the corresponding task is done",
        "operationId": "get_all_tasks_log_files_v2_computations__project_id__tasks___logfile_get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskLogFileGet"
                  },
                  "title": "Response Get All Tasks Log Files V2 Computations  Project Id  Tasks   Logfile Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/{node_uuid}/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns a link to download logs file of a give task.\nThe log is only available when the task is done",
        "operationId": "get_task_log_file_v2_computations__project_id__tasks__node_uuid__logfile_get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskLogFileGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/-/outputs:batchGet": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Gets all outputs for selected tasks",
        "operationId": "get_batch_tasks_outputs_v2_computations__project_id__tasks___outputs_batchGet_post",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksSelection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksOutputs"
                }
              }
            }
          },
          "404": {
            "description": "Cannot find computation or the tasks in it"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "returns a list of running interactive services filtered by user_id and/or project_idboth legacy (director-v0) and modern (director-v2)",
        "operationId": "list_tracked_dynamic_services_v2_dynamic_services_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "exclusiveMinimum": true,
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "User Id"
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                  },
                  "title": "Response List Tracked Dynamic Services V2 Dynamic Services Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "creates & starts the dynamic service",
        "operationId": "create_dynamic_service_v2_dynamic_services_post",
        "parameters": [
          {
            "name": "x-dynamic-sidecar-request-dns",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Dynamic-Sidecar-Request-Dns"
            }
          },
          {
            "name": "x-dynamic-sidecar-request-scheme",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Dynamic-Sidecar-Request-Scheme"
            }
          },
          {
            "name": "x-simcore-user-agent",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Simcore-User-Agent"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicServiceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "assembles the status for the dynamic-sidecar",
        "operationId": "get_dynamic_sidecar_status_v2_dynamic_services__node_uuid__get",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dynamic services"
        ],
        "summary": "stops previously spawned dynamic-sidecar",
        "operationId": "stop_dynamic_service_v2_dynamic_services__node_uuid__delete",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          },
          {
            "name": "can_save",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "default": true,
              "title": "Can Save"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:retrieve": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's retrieve endpoint with optional port_keys",
        "operationId": "service_retrieve_data_on_ports_v2_dynamic_services__node_uuid__retrieve_post",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveDataIn"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveDataOutEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:restart": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's restart containers endpoint",
        "operationId": "service_restart_containers_v2_dynamic_services__node_uuid__restart_post",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/projects/{project_id}/-/networks": {
      "patch": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Updates the project networks according to the current project's workbench",
        "operationId": "update_projects_networks_v2_dynamic_services_projects__project_id____networks_patch",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/projects/{project_id}/inactivity": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "returns if the project is inactive",
        "operationId": "get_project_inactivity_v2_dynamic_services_projects__project_id__inactivity_get",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            }
          },
          {
            "name": "max_inactivity_seconds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0.0,
              "title": "Max Inactivity Seconds"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectInactivityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/docker/networks/": {
      "post": {
        "tags": [
          "docker networks"
        ],
        "summary": "create a docker network given the input parameters",
        "operationId": "create_docker_network_v2_docker_networks__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Network"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Docker Network V2 Docker Networks  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/docker/networks/{network_id}": {
      "delete": {
        "tags": [
          "docker networks"
        ],
        "summary": "removes an existing docker network",
        "operationId": "remove_docker_network_v2_docker_networks__network_id__delete",
        "parameters": [
          {
            "name": "network_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Network Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/docker/services/": {
      "post": {
        "tags": [
          "docker services"
        ],
        "summary": "create a docker service",
        "operationId": "create_docker_service_v2_docker_services__post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSpec"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Create Docker Service V2 Docker Services  Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/docker/services/{service_id}": {
      "delete": {
        "tags": [
          "docker services"
        ],
        "summary": "removes an existing docker service",
        "operationId": "remove_docker_service_v2_docker_services__service_id__delete",
        "parameters": [
          {
            "name": "service_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Service Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/observation": {
      "patch": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Enable/disable observation of the service",
        "operationId": "update_service_observation_v2_dynamic_scheduler_services__node_uuid__observation_patch",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservationItem"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/containers": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's user services",
        "operationId": "delete_service_containers_v2_dynamic_scheduler_services__node_uuid__containers_delete",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Delete Service Containers V2 Dynamic Scheduler Services  Node Uuid  Containers Delete"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/state": {
      "get": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Returns the internals of the scheduler for the given service",
        "operationId": "get_service_state_v2_dynamic_scheduler_services__node_uuid__state_get",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulerData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/state:save": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the saving of the state for the service",
        "operationId": "save_service_state_v2_dynamic_scheduler_services__node_uuid__state_save_post",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Save Service State V2 Dynamic Scheduler Services  Node Uuid  State Save Post"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/outputs:push": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the pushing of the outputs for the service",
        "operationId": "push_service_outputs_v2_dynamic_scheduler_services__node_uuid__outputs_push_post",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Push Service Outputs V2 Dynamic Scheduler Services  Node Uuid  Outputs Push Post"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/docker-resources": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's sidecar, proxy and docker networks & volumes",
        "operationId": "delete_service_docker_resources_v2_dynamic_scheduler_services__node_uuid__docker_resources_delete",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Delete Service Docker Resources V2 Dynamic Scheduler Services  Node Uuid  Docker Resources Delete"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/disk/reserved:free": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Free up reserved disk space",
        "operationId": "free_reserved_disk_space_v2_dynamic_scheduler_services__node_uuid__disk_reserved_free_post",
        "parameters": [
          {
            "name": "node_uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseMeta": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Version"
          },
          "released": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string",
                  "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Released",
            "description": "Maps every route's path tag with a released version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "title": "BaseMeta",
        "example": {
          "name": "simcore_service_foo",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          },
          "version": "2.4.45"
        }
      },
      "BindOptions": {
        "properties": {
          "Propagation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Propagation"
              },
              {
                "type": "null"
              }
            ],
            "description": "A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`."
          },
          "NonRecursive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nonrecursive",
            "description": "Disable recursive bind mount.",
            "default": false
          }
        },
        "type": "object",
        "title": "BindOptions",
        "description": "Optional configuration for the `bind` type."
      },
      "BootMode": {
        "type": "string",
        "enum": [
          "CPU",
          "GPU",
          "MPI"
        ],
        "title": "BootMode"
      },
      "CallbacksMapping": {
        "properties": {
          "metrics": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserServiceCommand"
              },
              {
                "type": "null"
              }
            ],
            "description": "command to recover prometheus metrics from a specific user service"
          },
          "before_shutdown": {
            "items": {
              "$ref": "#/components/schemas/UserServiceCommand"
            },
            "type": "array",
            "title": "Before Shutdown",
            "description": "commands to run before shutting down the user servicescommands get executed first to last, multiple commands for the sameuser services are allowed"
          },
          "inactivity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserServiceCommand"
              },
              {
                "type": "null"
              }
            ],
            "description": "command used to figure out for how much time the user service(s) were inactive for"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CallbacksMapping"
      },
      "ComputationCreate": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "start_pipeline": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Pipeline",
            "description": "if True the computation pipeline will start right away",
            "default": false
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "subgraph": {
            "anyOf": [
              {
                "items": {
                  "type": "string",
                  "format": "uuid"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subgraph",
            "description": "An optional set of nodes that must be executed, if empty the whole pipeline is executed"
          },
          "force_restart": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Force Restart",
            "description": "if True will force re-running all dependent nodes",
            "default": false
          },
          "simcore_user_agent": {
            "type": "string",
            "title": "Simcore User Agent",
            "default": ""
          },
          "use_on_demand_clusters": {
            "type": "boolean",
            "title": "Use On Demand Clusters",
            "description": "if True, a cluster will be created as necessary (wallet_id cannot be None)",
            "default": false
          },
          "wallet_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WalletInfo-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains information about the wallet used to bill the running service"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "project_id",
          "product_name"
        ],
        "title": "ComputationCreate"
      },
      "ComputationDelete": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "force": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Force",
            "description": "if True then the pipeline will be removed even if it is running",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "ComputationDelete"
      },
      "ComputationGet": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "the id of the computation task"
          },
          "state": {
            "$ref": "#/components/schemas/RunningState",
            "description": "the state of the computational task"
          },
          "result": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Result",
            "description": "the result of the computational task"
          },
          "pipeline_details": {
            "$ref": "#/components/schemas/PipelineDetails",
            "description": "the details of the generated pipeline"
          },
          "iteration": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": true,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Iteration",
            "description": "the iteration id of the computation task (none if no task ran yet)"
          },
          "started": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started",
            "description": "the timestamp when the computation was started or None if not started yet"
          },
          "stopped": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stopped",
            "description": "the timestamp when the computation was stopped or None if not started nor stopped yet"
          },
          "submitted": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Submitted",
            "description": "task last modification timestamp or None if the there is no task"
          },
          "url": {
            "type": "string",
            "title": "Url",
            "description": "the link where to get the status of the task"
          },
          "stop_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stop Url",
            "description": "the link where to stop the task"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state",
          "pipeline_details",
          "iteration",
          "started",
          "stopped",
          "submitted",
          "url"
        ],
        "title": "ComputationGet"
      },
      "ComputationStop": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "ComputationStop"
      },
      "Condition": {
        "type": "string",
        "enum": [
          "none",
          "on-failure",
          "any"
        ],
        "title": "Condition",
        "description": "Condition for restart."
      },
      "Config1": {
        "properties": {
          "File": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/File1"
              },
              {
                "type": "null"
              }
            ],
            "description": "File represents a specific target that is backed by a file.\n\n<p><br /><p>\n\n> **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive\n"
          },
          "Runtime": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runtime",
            "description": "Runtime represents a target that is not mounted into the\ncontainer but is used by the task\n\n<p><br /><p>\n\n> **Note**: `Configs.File` and `Configs.Runtime` are mutually\n> exclusive\n"
          },
          "ConfigID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configid",
            "description": "ConfigID represents the ID of the specific config that we're\nreferencing.\n"
          },
          "ConfigName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configname",
            "description": "ConfigName is the name of the config that this references,\nbut this is just provided for lookup/display purposes. The\nconfig in the reference will be identified by its ID.\n"
          }
        },
        "type": "object",
        "title": "Config1"
      },
      "ConfigReference": {
        "properties": {
          "Network": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Network",
            "description": "The name of the config-only network that provides the network's\nconfiguration. The specified network must be an existing config-only\nnetwork. Only network names are allowed, not network IDs.\n"
          }
        },
        "type": "object",
        "title": "ConfigReference",
        "description": "The config-only network source to provide the configuration for\nthis network."
      },
      "ContainerSpec": {
        "properties": {
          "Image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image",
            "description": "The image name to use for the container"
          },
          "Labels": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "User-defined key/value data."
          },
          "Command": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Command",
            "description": "The command to be run in the image."
          },
          "Args": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Args",
            "description": "Arguments to the command."
          },
          "Hostname": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hostname",
            "description": "The hostname to use for the container, as a valid\n[RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.\n"
          },
          "Env": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Env",
            "description": "A list of environment variables in the form `VAR=value`.\n"
          },
          "Dir": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dir",
            "description": "The working directory for commands to run in."
          },
          "User": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "The user inside the container."
          },
          "Groups": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Groups",
            "description": "A list of additional groups that the container process will run as.\n"
          },
          "Privileges": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Privileges"
              },
              {
                "type": "null"
              }
            ],
            "description": "Security options for the container"
          },
          "TTY": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tty",
            "description": "Whether a pseudo-TTY should be allocated."
          },
          "OpenStdin": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Openstdin",
            "description": "Open `stdin`"
          },
          "ReadOnly": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Readonly",
            "description": "Mount the container's root filesystem as read only."
          },
          "Mounts": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Mount"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mounts",
            "description": "Specification for mounts to be added to containers created as part\nof the service.\n"
          },
          "StopSignal": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stopsignal",
            "description": "Signal to stop the container."
          },
          "StopGracePeriod": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stopgraceperiod",
            "description": "Amount of time to wait for the container to terminate before\nforcefully killing it.\n"
          },
          "HealthCheck": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HealthConfig"
              },
              {
                "type": "null"
              }
            ]
          },
          "Hosts": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hosts",
            "description": "A list of hostname/IP mappings to add to the container's `hosts`\nfile. The format of extra hosts is specified in the\n[hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)\nman page:\n\n    IP_address canonical_hostname [aliases...]\n"
          },
          "DNSConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DnsConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specification for DNS related configurations in resolver configuration\nfile (`resolv.conf`).\n"
          },
          "Secrets": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Secret"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secrets",
            "description": "Secrets contains references to zero or more secrets that will be\nexposed to the service.\n"
          },
          "Configs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Config1"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configs",
            "description": "Configs contains references to zero or more configs that will be\nexposed to the service.\n"
          },
          "Isolation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Isolation1"
              },
              {
                "type": "null"
              }
            ],
            "description": "Isolation technology of the containers running the service.\n(Windows only)\n"
          },
          "Init": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Init",
            "description": "Run an init inside the container that forwards signals and reaps\nprocesses. This field is omitted if empty, and the default (as\nconfigured on the daemon) is used.\n"
          },
          "Sysctls": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sysctls",
            "description": "Set kernel namedspaced parameters (sysctls) in the container.\nThe Sysctls option on services accepts the same sysctls as the\nare supported on containers. Note that while the same sysctls are\nsupported, no guarantees or checks are made about their\nsuitability for a clustered environment, and it's up to the user\nto determine whether a given sysctl will work properly in a\nService.\n"
          },
          "CapabilityAdd": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capabilityadd",
            "description": "A list of kernel capabilities to add to the default set\nfor the container.\n"
          },
          "CapabilityDrop": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Capabilitydrop",
            "description": "A list of kernel capabilities to drop from the default set\nfor the container.\n"
          },
          "Ulimits": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Ulimit"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ulimits",
            "description": "A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"\n"
          }
        },
        "type": "object",
        "title": "ContainerSpec",
        "description": "Container spec for the service.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`."
      },
      "ContainerState": {
        "properties": {
          "Status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Status2"
              },
              {
                "type": "null"
              }
            ],
            "description": "String representation of the container state. Can be one of \"created\",\n\"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".\n"
          },
          "Running": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Running",
            "description": "Whether this container is running.\n\nNote that a running container can be _paused_. The `Running` and `Paused`\nbooleans are not mutually exclusive:\n\nWhen pausing a container (on Linux), the freezer cgroup is used to suspend\nall processes in the container. Freezing the process requires the process to\nbe running. As a result, paused containers are both `Running` _and_ `Paused`.\n\nUse the `Status` field instead to determine if a container's state is \"running\".\n"
          },
          "Paused": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Paused",
            "description": "Whether this container is paused."
          },
          "Restarting": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Restarting",
            "description": "Whether this container is restarting."
          },
          "OOMKilled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oomkilled",
            "description": "Whether this container has been killed because it ran out of memory.\n"
          },
          "Dead": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dead"
          },
          "Pid": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pid",
            "description": "The process ID of this container"
          },
          "ExitCode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exitcode",
            "description": "The last exit code of this container"
          },
          "Error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "StartedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Startedat",
            "description": "The time when this container was last started."
          },
          "FinishedAt": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finishedat",
            "description": "The time when this container last exited."
          },
          "Health": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Health"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ContainerState",
        "description": "ContainerState stores container's running state. It's part of ContainerJSONBase\nand will be returned by the \"inspect\" command."
      },
      "CredentialSpec": {
        "properties": {
          "Config": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config",
            "description": "Load credential spec from a Swarm Config with the given ID.\nThe specified config must also be present in the Configs\nfield with the Runtime property set.\n\n<p><br /></p>\n\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n"
          },
          "File": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "File",
            "description": "Load credential spec from this file. The file is read by\nthe daemon, and must be present in the `CredentialSpecs`\nsubdirectory in the docker data directory, which defaults\nto `C:\\ProgramData\\Docker\\` on Windows.\n\nFor example, specifying `spec.json` loads\n`C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.\n\n<p><br /></p>\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n"
          },
          "Registry": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Registry",
            "description": "Load credential spec from this value in the Windows\nregistry. The specified registry value must be located in:\n\n`HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`\n\n<p><br /></p>\n\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n"
          }
        },
        "type": "object",
        "title": "CredentialSpec",
        "description": "CredentialSpec for managed service account (Windows only)"
      },
      "DNSResolver": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
              },
              {
                "type": "string"
              }
            ],
            "title": "Address",
            "description": "this is not an url address is derived from IP address"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "type": "string",
                "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
              }
            ],
            "title": "Port"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "address",
          "port"
        ],
        "title": "DNSResolver"
      },
      "DelayedExceptionHandler": {
        "properties": {
          "delay_for": {
            "type": "number",
            "minimum": 0.0,
            "title": "Delay For",
            "description": "interval of time during which exceptions are ignored"
          }
        },
        "type": "object",
        "required": [
          "delay_for"
        ],
        "title": "DelayedExceptionHandler",
        "description": "Allows to ignore an exception for an established\nperiod of time after which it is raised.\n\nThis use case most commonly occurs when dealing with\nexternal systems.\nFor example, due to poor network  performance or\nnetwork congestion, an external system which is healthy,\ncurrently is not reachable any longer.\nA possible solution:\n- ignore exceptions for an interval in which the\n    system usually is reachable again by not\n    raising the error\n- if the error persist give up and raise it\n\nExample code usage:\n\n    delayed_handler_external_service = DelayedExceptionHandler(\n        delay_for=60\n    )\n    try:\n        function_called_periodically_accessing_external_service()\n    except TargetException as e:\n        delayed_handler_external_service.try_to_raise(e)\n    else:\n        delayed_handler_external_service.else_reset()"
      },
      "DiscreteResourceSpec": {
        "properties": {
          "Kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Kind"
          },
          "Value": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "title": "DiscreteResourceSpec"
      },
      "DnsConfig": {
        "properties": {
          "Nameservers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nameservers",
            "description": "The IP addresses of the name servers."
          },
          "Search": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Search",
            "description": "A search list for host-name lookup."
          },
          "Options": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options",
            "description": "A list of internal resolver variables to be modified (e.g.,\n`debug`, `ndots:3`, etc.).\n"
          }
        },
        "type": "object",
        "title": "DnsConfig",
        "description": "Specification for DNS related configurations in resolver configuration\nfile (`resolv.conf`)."
      },
      "DockerContainerInspect": {
        "properties": {
          "container_state": {
            "$ref": "#/components/schemas/ContainerState",
            "description": "current state of container"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "docker name of the container"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "docker id of the container"
          }
        },
        "type": "object",
        "required": [
          "container_state",
          "name",
          "id"
        ],
        "title": "DockerContainerInspect"
      },
      "DriverConfig": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the driver to use to create the volume."
          },
          "Options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options",
            "description": "key/value map of driver specific options."
          }
        },
        "type": "object",
        "title": "DriverConfig",
        "description": "Map of driver specific options"
      },
      "DynamicServiceCreate": {
        "properties": {
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_basepath": {
            "anyOf": [
              {
                "type": "string",
                "format": "path"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Basepath",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint."
          },
          "service_resources": {
            "type": "object",
            "title": "Service Resources"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Current product name"
          },
          "can_save": {
            "type": "boolean",
            "title": "Can Save",
            "description": "the service data must be saved when closing"
          },
          "wallet_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WalletInfo-Input"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains information about the wallet used to bill the running service"
          },
          "pricing_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PricingInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains pricing information (ex. pricing plan and unit ids)"
          },
          "hardware_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HardwareInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains harware information (ex. aws_ec2_instances)"
          }
        },
        "type": "object",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_resources",
          "product_name",
          "can_save"
        ],
        "title": "DynamicServiceCreate",
        "example": {
          "basepath": "/x/75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "can_save": true,
          "hardware_info": {
            "aws_ec2_instances": [
              "c6a.4xlarge"
            ]
          },
          "key": "simcore/services/dynamic/3dviewer",
          "node_uuid": "75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "pricing_info": {
            "pricing_plan_id": 1,
            "pricing_unit_cost_id": 1,
            "pricing_unit_id": 1
          },
          "product_name": "osparc",
          "project_id": "dd1d04d9-d704-4f7e-8f0f-1ca60cc771fe",
          "service_resources": {
            "container": {
              "boot_modes": [
                "CPU"
              ],
              "image": "simcore/services/dynamic/jupyter-math:2.0.5",
              "resources": {
                "CPU": {
                  "limit": 0.1,
                  "reservation": 0.1
                },
                "RAM": {
                  "limit": 2147483648,
                  "reservation": 2147483648
                }
              }
            }
          },
          "user_id": 234,
          "version": "2.4.5",
          "wallet_info": {
            "wallet_credit_amount": "10",
            "wallet_id": 1,
            "wallet_name": "My Wallet"
          }
        }
      },
      "DynamicSidecar": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/simcore_service_director_v2__models__dynamic_services_scheduler__Status",
            "description": "status of the service sidecar also with additional information",
            "default": {
              "current": "ok",
              "info": ""
            }
          },
          "is_ready": {
            "type": "boolean",
            "title": "Is Ready",
            "description": "is True while the health check on the dynamic-sidecar is responding. Meaning that the dynamic-sidecar is reachable and can accept requests",
            "default": false
          },
          "was_compose_spec_submitted": {
            "type": "boolean",
            "title": "Was Compose Spec Submitted",
            "description": "if the docker-compose spec was already submitted this fields is True",
            "default": false
          },
          "containers_inspect": {
            "items": {
              "$ref": "#/components/schemas/DockerContainerInspect"
            },
            "type": "array",
            "title": "Containers Inspect",
            "description": "docker inspect results from all the container ran at regular intervals",
            "default": []
          },
          "was_dynamic_sidecar_started": {
            "type": "boolean",
            "title": "Was Dynamic Sidecar Started",
            "default": false
          },
          "is_healthy": {
            "type": "boolean",
            "title": "Is Healthy",
            "default": false
          },
          "were_containers_created": {
            "type": "boolean",
            "title": "Were Containers Created",
            "description": "when True no longer will the Docker api be used to check if the services were started",
            "default": false
          },
          "is_project_network_attached": {
            "type": "boolean",
            "title": "Is Project Network Attached",
            "description": "When True, all containers were in running state and project networks were attached. Waiting for the container sto be in running state guarantees all containers have been created",
            "default": false
          },
          "is_service_environment_ready": {
            "type": "boolean",
            "title": "Is Service Environment Ready",
            "description": "True when the environment setup required by the dynamic-sidecars created services was completed.Example: nodeports data downloaded, globally shared service data fetched, etc..",
            "default": false
          },
          "service_removal_state": {
            "$ref": "#/components/schemas/ServiceRemovalState",
            "description": "stores information used during service removal from the dynamic-sidecar scheduler"
          },
          "wait_for_manual_intervention_after_error": {
            "type": "boolean",
            "title": "Wait For Manual Intervention After Error",
            "description": "Marks the sidecar as untouchable since there was an error and important data might be lost. awaits for manual intervention.",
            "default": false
          },
          "wait_for_manual_intervention_logged": {
            "type": "boolean",
            "title": "Wait For Manual Intervention Logged",
            "description": "True if a relative message was logged",
            "default": false
          },
          "were_state_and_outputs_saved": {
            "type": "boolean",
            "title": "Were State And Outputs Saved",
            "description": "set True if the dy-sidecar saves the state and uploads the outputs",
            "default": false
          },
          "instrumentation": {
            "$ref": "#/components/schemas/ServicesInstrumentation",
            "description": "keeps track times for various operations"
          },
          "dynamic_sidecar_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25,
                "pattern": "[A-Za-z0-9]{25}"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dynamic Sidecar Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "dynamic_sidecar_network_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25,
                "pattern": "[A-Za-z0-9]{25}"
              },
              {
                "type": "null"
              }
            ],
            "title": "Dynamic Sidecar Network Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "swarm_network_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 25,
                "pattern": "[A-Za-z0-9]{25}"
              },
              {
                "type": "null"
              }
            ],
            "title": "Swarm Network Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "swarm_network_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Swarm Network Name",
            "description": "used for starting the proxy"
          },
          "docker_node_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "[a-zA-Z0-9]"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docker Node Id",
            "description": "contains node id of the docker node where all services and created containers are started"
          },
          "inspect_error_handler": {
            "$ref": "#/components/schemas/DelayedExceptionHandler",
            "description": "Set when the dy-sidecar can no longer be reached by the director-v2. If it will be possible to reach the dy-sidecar again, this value will be set to None.",
            "default": {
              "delay_for": 0.0
            }
          }
        },
        "type": "object",
        "title": "DynamicSidecar"
      },
      "DynamicSidecarStatus": {
        "type": "string",
        "enum": [
          "ok",
          "failing"
        ],
        "title": "DynamicSidecarStatus"
      },
      "EndpointPortConfig": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "Protocol": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Type"
              },
              {
                "type": "null"
              }
            ]
          },
          "TargetPort": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Targetport",
            "description": "The port inside the container."
          },
          "PublishedPort": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publishedport",
            "description": "The port on the swarm hosts."
          },
          "PublishMode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PublishMode"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode in which port is published.\n\n<p><br /></p>\n\n- \"ingress\" makes the target port accessible on every node,\n  regardless of whether there is a task for the service running on\n  that node or not.\n- \"host\" bypasses the routing mesh and publish the port directly on\n  the swarm node where that service is running.\n",
            "default": "ingress"
          }
        },
        "type": "object",
        "title": "EndpointPortConfig"
      },
      "EndpointSpec": {
        "properties": {
          "Mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Mode1"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode of resolution to use for internal load balancing between tasks.\n",
            "default": "vip"
          },
          "Ports": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/EndpointPortConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ports",
            "description": "List of exposed ports that this service is accessible on from the\noutside. Ports can only be provided if `vip` resolution mode is used.\n"
          }
        },
        "type": "object",
        "title": "EndpointSpec",
        "description": "Properties that can be configured to access and load balance a service."
      },
      "FailureAction": {
        "type": "string",
        "enum": [
          "continue",
          "pause",
          "rollback"
        ],
        "title": "FailureAction",
        "description": "Action to take if an updated task fails to run, or stops running\nduring the update."
      },
      "FailureAction1": {
        "type": "string",
        "enum": [
          "continue",
          "pause"
        ],
        "title": "FailureAction1",
        "description": "Action to take if an rolled back task fails to run, or stops\nrunning during the rollback."
      },
      "File": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name represents the final filename in the filesystem.\n"
          },
          "UID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uid",
            "description": "UID represents the file UID."
          },
          "GID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gid",
            "description": "GID represents the file GID."
          },
          "Mode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mode",
            "description": "Mode represents the FileMode of the file."
          }
        },
        "type": "object",
        "title": "File",
        "description": "File represents a specific target that is backed by a file."
      },
      "File1": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name represents the final filename in the filesystem.\n"
          },
          "UID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Uid",
            "description": "UID represents the file UID."
          },
          "GID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gid",
            "description": "GID represents the file GID."
          },
          "Mode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mode",
            "description": "Mode represents the FileMode of the file."
          }
        },
        "type": "object",
        "title": "File1",
        "description": "File represents a specific target that is backed by a file.\n\n<p><br /><p>\n\n> **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive"
      },
      "GenericResource": {
        "properties": {
          "NamedResourceSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NamedResourceSpec"
              },
              {
                "type": "null"
              }
            ]
          },
          "DiscreteResourceSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscreteResourceSpec"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "GenericResource"
      },
      "GenericResources": {
        "items": {
          "$ref": "#/components/schemas/GenericResource"
        },
        "type": "array",
        "title": "GenericResources",
        "description": "User-defined resources can be either Integer resources (e.g, `SSD=3`) or\nString resources (e.g, `GPU=UUID1`)."
      },
      "GetProjectInactivityResponse": {
        "properties": {
          "is_inactive": {
            "type": "boolean",
            "title": "Is Inactive"
          }
        },
        "type": "object",
        "required": [
          "is_inactive"
        ],
        "title": "GetProjectInactivityResponse",
        "example": {
          "is_inactive": "false"
        }
      },
      "HTTPValidationError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Validation errors"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HardwareInfo": {
        "properties": {
          "aws_ec2_instances": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Aws Ec2 Instances"
          }
        },
        "type": "object",
        "required": [
          "aws_ec2_instances"
        ],
        "title": "HardwareInfo"
      },
      "Health": {
        "properties": {
          "Status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/models_library__generated_models__docker_rest_api__Status"
              },
              {
                "type": "null"
              }
            ],
            "description": "Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n- \"none\"      Indicates there is no healthcheck\n- \"starting\"  Starting indicates that the container is not yet ready\n- \"healthy\"   Healthy indicates that the container is running correctly\n- \"unhealthy\" Unhealthy indicates that the container has a problem\n"
          },
          "FailingStreak": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Failingstreak",
            "description": "FailingStreak is the number of consecutive failures"
          },
          "Log": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/HealthcheckResult"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Log",
            "description": "Log contains the last few results (oldest first)\n"
          }
        },
        "type": "object",
        "title": "Health",
        "description": "Health stores information about the container's healthcheck results."
      },
      "HealthCheckGet": {
        "properties": {
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "HealthCheckGet",
        "example": {
          "timestamp": "simcore_service_directorv2.api.routes.health@2023-07-03T12:59:12.024551+00:00"
        }
      },
      "HealthConfig": {
        "properties": {
          "Test": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Test",
            "description": "The test to perform. Possible values are:\n\n- `[]` inherit healthcheck from image or parent image\n- `[\"NONE\"]` disable healthcheck\n- `[\"CMD\", args...]` exec arguments directly\n- `[\"CMD-SHELL\", command]` run command with system's default shell\n"
          },
          "Interval": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interval",
            "description": "The time to wait between checks in nanoseconds. It should be 0 or at\nleast 1000000 (1 ms). 0 means inherit.\n"
          },
          "Timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Timeout",
            "description": "The time to wait before considering the check to have hung. It should\nbe 0 or at least 1000000 (1 ms). 0 means inherit.\n"
          },
          "Retries": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Retries",
            "description": "The number of consecutive failures needed to consider a container as\nunhealthy. 0 means inherit.\n"
          },
          "StartPeriod": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Startperiod",
            "description": "Start period for the container to initialize before starting\nhealth-retries countdown in nanoseconds. It should be 0 or at least\n1000000 (1 ms). 0 means inherit.\n"
          }
        },
        "type": "object",
        "title": "HealthConfig",
        "description": "A test to perform to check that the container is healthy."
      },
      "HealthcheckResult": {
        "properties": {
          "Start": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start",
            "description": "Date and time at which this check started in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n"
          },
          "End": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "End",
            "description": "Date and time at which this check ended in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n"
          },
          "ExitCode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Exitcode",
            "description": "ExitCode meanings:\n\n- `0` healthy\n- `1` unhealthy\n- `2` reserved (considered unhealthy)\n- other values: error running probe\n"
          },
          "Output": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output",
            "description": "Output from last check"
          }
        },
        "type": "object",
        "title": "HealthcheckResult",
        "description": "HealthcheckResult stores information about a single run of a healthcheck probe"
      },
      "IPAM": {
        "properties": {
          "Driver": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Driver",
            "description": "Name of the IPAM driver to use.",
            "default": "default"
          },
          "Config": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/IPAMConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Config",
            "description": "List of IPAM configuration options, specified as a map:\n\n```\n{\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>}\n```\n"
          },
          "Options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options",
            "description": "Driver-specific options, specified as a map."
          }
        },
        "type": "object",
        "title": "IPAM"
      },
      "IPAMConfig": {
        "properties": {
          "Subnet": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnet"
          },
          "IPRange": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iprange"
          },
          "Gateway": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gateway"
          },
          "AuxiliaryAddresses": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Auxiliaryaddresses"
          }
        },
        "type": "object",
        "title": "IPAMConfig"
      },
      "ImageResources": {
        "properties": {
          "image": {
            "type": "string",
            "pattern": "^(?:([a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::\\d+)?|[a-z0-9-]+:\\d+)/)?((?:[a-z0-9][a-z0-9_.-]*/)*[a-z0-9-_]+[a-z0-9])(?::([\\w][\\w.-]{0,127}))?(\\@sha256:[a-fA-F0-9]{32,64})?$",
            "title": "Image",
            "description": "Used by the frontend to provide a context for the users.Services with a docker-compose spec will have multiple entries.Using the `image:version` instead of the docker-compose spec is more helpful for the end user."
          },
          "resources": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceValue"
            },
            "type": "object",
            "title": "Resources"
          },
          "boot_modes": {
            "items": {
              "$ref": "#/components/schemas/BootMode"
            },
            "type": "array",
            "title": "Boot Modes",
            "description": "describe how a service shall be booted, using CPU, MPI, openMP or GPU",
            "default": [
              "CPU"
            ]
          }
        },
        "type": "object",
        "required": [
          "image",
          "resources"
        ],
        "title": "ImageResources",
        "example": {
          "image": "simcore/service/dynamic/pretty-intense:1.0.0",
          "resources": {
            "AIRAM": {
              "limit": 1,
              "reservation": 1
            },
            "ANY_resource": {
              "limit": "some_value",
              "reservation": "some_value"
            },
            "CPU": {
              "limit": 4,
              "reservation": 0.1
            },
            "RAM": {
              "limit": 103079215104,
              "reservation": 536870912
            },
            "VRAM": {
              "limit": 1,
              "reservation": 1
            }
          }
        }
      },
      "Isolation1": {
        "type": "string",
        "enum": [
          "default",
          "process",
          "hyperv"
        ],
        "title": "Isolation1",
        "description": "Isolation technology of the containers running the service.\n(Windows only)"
      },
      "Limit": {
        "properties": {
          "NanoCPUs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nanocpus"
          },
          "MemoryBytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Memorybytes"
          },
          "Pids": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pids",
            "description": "Limits the maximum number of PIDs in the container. Set `0` for unlimited.\n",
            "default": 0
          }
        },
        "type": "object",
        "title": "Limit",
        "description": "An object describing a limit on resources which can be requested by a task."
      },
      "LogDriver1": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "Options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options"
          }
        },
        "type": "object",
        "title": "LogDriver1",
        "description": "Specifies the log driver to use for tasks created from this spec. If\nnot present, the default one for the swarm will be used, finally\nfalling back to the engine default if not specified."
      },
      "Mode": {
        "properties": {
          "Replicated": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Replicated"
              },
              {
                "type": "null"
              }
            ]
          },
          "Global": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Global"
          },
          "ReplicatedJob": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReplicatedJob"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mode used for services with a finite number of tasks that run\nto a completed state.\n"
          },
          "GlobalJob": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Globaljob",
            "description": "The mode used for services which run a task to the completed state\non each valid node.\n"
          }
        },
        "type": "object",
        "title": "Mode",
        "description": "Scheduling mode for the service."
      },
      "Mode1": {
        "type": "string",
        "enum": [
          "vip",
          "dnsrr"
        ],
        "title": "Mode1",
        "description": "The mode of resolution to use for internal load balancing between tasks."
      },
      "Mount": {
        "properties": {
          "Target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target",
            "description": "Container path."
          },
          "Source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Source",
            "description": "Mount source (e.g. a volume name, a host path)."
          },
          "Type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Type2"
              },
              {
                "type": "null"
              }
            ],
            "description": "The mount type. Available types:\n\n- `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.\n- `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.\n- `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.\n- `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.\n"
          },
          "ReadOnly": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Readonly",
            "description": "Whether the mount should be read-only."
          },
          "Consistency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Consistency",
            "description": "The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`."
          },
          "BindOptions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BindOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional configuration for the `bind` type."
          },
          "VolumeOptions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VolumeOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional configuration for the `volume` type."
          },
          "TmpfsOptions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TmpfsOptions"
              },
              {
                "type": "null"
              }
            ],
            "description": "Optional configuration for the `tmpfs` type."
          }
        },
        "type": "object",
        "title": "Mount"
      },
      "NATRule": {
        "properties": {
          "hostname": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
              },
              {
                "type": "string"
              }
            ],
            "title": "Hostname"
          },
          "tcp_ports": {
            "items": {
              "anyOf": [
                {
                  "type": "integer",
                  "exclusiveMaximum": true,
                  "exclusiveMinimum": true,
                  "maximum": 65535,
                  "minimum": 0
                },
                {
                  "type": "string",
                  "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
                },
                {
                  "$ref": "#/components/schemas/_PortRange"
                }
              ]
            },
            "type": "array",
            "title": "Tcp Ports"
          },
          "dns_resolver": {
            "$ref": "#/components/schemas/DNSResolver",
            "description": "specify a DNS resolver address and port"
          }
        },
        "type": "object",
        "required": [
          "hostname",
          "tcp_ports"
        ],
        "title": "NATRule",
        "description": "Content of \"simcore.service.containers-allowed-outgoing-permit-list\" label"
      },
      "NamedResourceSpec": {
        "properties": {
          "Kind": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Kind"
          },
          "Value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "title": "NamedResourceSpec"
      },
      "Network": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the network.\n"
          },
          "Id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id",
            "description": "ID that uniquely identifies a network on a single machine.\n"
          },
          "Created": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created",
            "description": "Date and time at which the network was created in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n"
          },
          "Scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope",
            "description": "The level at which the network exists (e.g. `swarm` for cluster-wide\nor `local` for machine level)\n"
          },
          "Driver": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Driver",
            "description": "The name of the driver used to create the network (e.g. `bridge`,\n`overlay`).\n"
          },
          "EnableIPv6": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enableipv6",
            "description": "Whether the network was created with IPv6 enabled.\n"
          },
          "IPAM": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IPAM"
              },
              {
                "type": "null"
              }
            ]
          },
          "Internal": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Internal",
            "description": "Whether the network is created to only allow internal networking\nconnectivity.\n",
            "default": false
          },
          "Attachable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Attachable",
            "description": "Whether a global / swarm scope network is manually attachable by regular\ncontainers from workers in swarm mode.\n",
            "default": false
          },
          "Ingress": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ingress",
            "description": "Whether the network is providing the routing-mesh for the swarm cluster.\n",
            "default": false
          },
          "ConfigFrom": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConfigReference"
              },
              {
                "type": "null"
              }
            ]
          },
          "ConfigOnly": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Configonly",
            "description": "Whether the network is a config-only network. Config-only networks are\nplaceholder networks for network configurations to be used by other\nnetworks. Config-only networks cannot be used directly to run containers\nor services.\n",
            "default": false
          },
          "Containers": {
            "anyOf": [
              {
                "additionalProperties": {
                  "$ref": "#/components/schemas/NetworkContainer"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Containers",
            "description": "Contains endpoints attached to the network.\n"
          },
          "Options": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Options",
            "description": "Network-specific options uses when creating the network.\n"
          },
          "Labels": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "User-defined key/value metadata."
          },
          "Peers": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PeerInfo"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Peers",
            "description": "List of peer nodes for an overlay network. This field is only present\nfor overlay networks, and omitted for other network types.\n"
          }
        },
        "type": "object",
        "title": "Network"
      },
      "NetworkAttachmentConfig": {
        "properties": {
          "Target": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Target",
            "description": "The target network for attachment. Must be a network name or ID.\n"
          },
          "Aliases": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Aliases",
            "description": "Discoverable alternate names for the service on this network.\n"
          },
          "DriverOpts": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Driveropts",
            "description": "Driver attachment options for the network target.\n"
          }
        },
        "type": "object",
        "title": "NetworkAttachmentConfig",
        "description": "Specifies how a service should be attached to a particular network."
      },
      "NetworkAttachmentSpec": {
        "properties": {
          "ContainerID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Containerid",
            "description": "ID of the container represented by this task"
          }
        },
        "type": "object",
        "title": "NetworkAttachmentSpec",
        "description": "Read-only spec type for non-swarm containers attached to swarm overlay\nnetworks.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`."
      },
      "NetworkContainer": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "EndpointID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Endpointid"
          },
          "MacAddress": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Macaddress"
          },
          "IPv4Address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ipv4Address"
          },
          "IPv6Address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ipv6Address"
          }
        },
        "type": "object",
        "title": "NetworkContainer"
      },
      "NodeState": {
        "properties": {
          "modified": {
            "type": "boolean",
            "title": "Modified",
            "description": "true if the node's outputs need to be re-computed",
            "default": true
          },
          "dependencies": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Dependencies",
            "description": "contains the node inputs dependencies if they need to be computed first"
          },
          "currentStatus": {
            "$ref": "#/components/schemas/RunningState",
            "description": "the node's current state",
            "default": "NOT_STARTED"
          },
          "progress": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "current progress of the task if available (None if not started or not a computational task)",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "NodeState"
      },
      "ObservationItem": {
        "properties": {
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled"
          }
        },
        "type": "object",
        "required": [
          "is_disabled"
        ],
        "title": "ObservationItem"
      },
      "Order": {
        "type": "string",
        "enum": [
          "stop-first",
          "start-first"
        ],
        "title": "Order",
        "description": "The order of operations when rolling out an updated task. Either\nthe old task is shut down before the new task is started, or the\nnew task is started before the old task is shut down."
      },
      "Order1": {
        "type": "string",
        "enum": [
          "stop-first",
          "start-first"
        ],
        "title": "Order1",
        "description": "The order of operations when rolling back a task. Either the old\ntask is shut down before the new task is started, or the new task\nis started before the old task is shut down."
      },
      "PathMappingsLabel": {
        "properties": {
          "inputs_path": {
            "type": "string",
            "format": "path",
            "title": "Inputs Path",
            "description": "folder path where the service expects all the inputs"
          },
          "outputs_path": {
            "type": "string",
            "format": "path",
            "title": "Outputs Path",
            "description": "folder path where the service is expected to provide all its outputs"
          },
          "state_paths": {
            "items": {
              "type": "string",
              "format": "path"
            },
            "type": "array",
            "title": "State Paths",
            "description": "optional list of paths which contents need to be persisted"
          },
          "state_exclude": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "State Exclude",
            "description": "optional list unix shell rules used to exclude files from the state"
          },
          "volume_size_limits": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Volume Size Limits",
            "description": "Apply volume size limits to entries in: `inputs_path`, `outputs_path` and `state_paths`. Limits must be parsable by Pydantic's ByteSize."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "inputs_path",
          "outputs_path"
        ],
        "title": "PathMappingsLabel",
        "description": "Content of \"simcore.service.paths-mapping\" label"
      },
      "PeerInfo": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "ID of the peer-node in the Swarm cluster."
          },
          "IP": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip",
            "description": "IP-address of the peer-node in the Swarm cluster."
          }
        },
        "type": "object",
        "title": "PeerInfo",
        "description": "PeerInfo represents one peer of an overlay network."
      },
      "PipelineDetails": {
        "properties": {
          "adjacency_list": {
            "additionalProperties": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "type": "object",
            "title": "Adjacency List",
            "description": "The adjacency list of the current pipeline in terms of {NodeID: [successor NodeID]}"
          },
          "progress": {
            "anyOf": [
              {
                "type": "number",
                "maximum": 1.0,
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Progress",
            "description": "the progress of the pipeline (None if there are no computational tasks)"
          },
          "node_states": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeState"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "type": "object",
            "title": "Node States",
            "description": "The states of each of the computational nodes in the pipeline"
          }
        },
        "type": "object",
        "required": [
          "adjacency_list",
          "progress",
          "node_states"
        ],
        "title": "PipelineDetails"
      },
      "Placement": {
        "properties": {
          "Constraints": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Constraints",
            "description": "An array of constraint expressions to limit the set of nodes where\na task can be scheduled. Constraint expressions can either use a\n_match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find\nnodes that satisfy every expression (AND match). Constraints can\nmatch node or Docker Engine labels as follows:\n\nnode attribute       | matches                        | example\n---------------------|--------------------------------|-----------------------------------------------\n`node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`\n`node.hostname`      | Node hostname                  | `node.hostname!=node-2`\n`node.role`          | Node role (`manager`/`worker`) | `node.role==manager`\n`node.platform.os`   | Node operating system          | `node.platform.os==windows`\n`node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`\n`node.labels`        | User-defined node labels       | `node.labels.security==high`\n`engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`\n\n`engine.labels` apply to Docker Engine labels like operating system,\ndrivers, etc. Swarm administrators add `node.labels` for operational\npurposes by using the [`node update endpoint`](#operation/NodeUpdate).\n"
          },
          "Preferences": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Preference"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Preferences",
            "description": "Preferences provide a way to make the scheduler aware of factors\nsuch as topology. They are provided in order from highest to\nlowest precedence.\n"
          },
          "MaxReplicas": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxreplicas",
            "description": "Maximum number of replicas for per node (default value is 0, which\nis unlimited)\n",
            "default": 0
          },
          "Platforms": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Platform"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platforms",
            "description": "Platforms stores all the platforms that the service's image can\nrun on. This field is used in the platform filter for scheduling.\nIf empty, then the platform filter is off, meaning there are no\nscheduling restrictions.\n"
          }
        },
        "type": "object",
        "title": "Placement"
      },
      "Platform": {
        "properties": {
          "Architecture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Architecture",
            "description": "Architecture represents the hardware architecture (for example,\n`x86_64`).\n"
          },
          "OS": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Os",
            "description": "OS represents the Operating System (for example, `linux` or `windows`).\n"
          }
        },
        "type": "object",
        "title": "Platform",
        "description": "Platform represents the platform (Arch/OS)."
      },
      "PluginPrivilege": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "Description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "Value": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          }
        },
        "type": "object",
        "title": "PluginPrivilege",
        "description": "Describes a permission the user has to accept upon installing\nthe plugin."
      },
      "PluginSpec": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "The name or 'alias' to use for the plugin."
          },
          "Remote": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote",
            "description": "The plugin image reference to use."
          },
          "Disabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disabled",
            "description": "Disable the plugin once scheduled."
          },
          "PluginPrivilege": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PluginPrivilege"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pluginprivilege"
          }
        },
        "type": "object",
        "title": "PluginSpec",
        "description": "Plugin spec for the service.  *(Experimental release only.)*\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`."
      },
      "Preference": {
        "properties": {
          "Spread": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Spread"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "Preference"
      },
      "PricingInfo": {
        "properties": {
          "pricing_plan_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Plan Id",
            "minimum": 0
          },
          "pricing_unit_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Unit Id",
            "minimum": 0
          },
          "pricing_unit_cost_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Unit Cost Id",
            "minimum": 0
          }
        },
        "type": "object",
        "required": [
          "pricing_plan_id",
          "pricing_unit_id",
          "pricing_unit_cost_id"
        ],
        "title": "PricingInfo"
      },
      "Privileges": {
        "properties": {
          "CredentialSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CredentialSpec"
              },
              {
                "type": "null"
              }
            ],
            "description": "CredentialSpec for managed service account (Windows only)"
          },
          "SELinuxContext": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SeLinuxContext"
              },
              {
                "type": "null"
              }
            ],
            "description": "SELinux labels of the container"
          }
        },
        "type": "object",
        "title": "Privileges",
        "description": "Security options for the container"
      },
      "Propagation": {
        "type": "string",
        "enum": [
          "private",
          "rprivate",
          "shared",
          "rshared",
          "slave",
          "rslave"
        ],
        "title": "Propagation",
        "description": "A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`."
      },
      "PublishMode": {
        "type": "string",
        "enum": [
          "ingress",
          "host"
        ],
        "title": "PublishMode",
        "description": "The mode in which port is published.\n\n<p><br /></p>\n\n- \"ingress\" makes the target port accessible on every node,\n  regardless of whether there is a task for the service running on\n  that node or not.\n- \"host\" bypasses the routing mesh and publish the port directly on\n  the swarm node where that service is running."
      },
      "Replicated": {
        "properties": {
          "Replicas": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Replicas"
          }
        },
        "type": "object",
        "title": "Replicated"
      },
      "ReplicatedJob": {
        "properties": {
          "MaxConcurrent": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxconcurrent",
            "description": "The maximum number of replicas to run simultaneously.\n",
            "default": 1
          },
          "TotalCompletions": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Totalcompletions",
            "description": "The total number of replicas desired to reach the Completed\nstate. If unset, will default to the value of `MaxConcurrent`\n"
          }
        },
        "type": "object",
        "title": "ReplicatedJob",
        "description": "The mode used for services with a finite number of tasks that run\nto a completed state."
      },
      "ResourceObject": {
        "properties": {
          "NanoCPUs": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nanocpus"
          },
          "MemoryBytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Memorybytes"
          },
          "GenericResources": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GenericResources"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ResourceObject",
        "description": "An object describing the resources which can be advertised by a node and\nrequested by a task."
      },
      "ResourceValue": {
        "properties": {
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Limit"
          },
          "reservation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reservation"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "reservation"
        ],
        "title": "ResourceValue"
      },
      "Resources1": {
        "properties": {
          "Limits": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Limit"
              },
              {
                "type": "null"
              }
            ],
            "description": "Define resources limits."
          },
          "Reservations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResourceObject"
              },
              {
                "type": "null"
              }
            ],
            "description": "Define resources reservation."
          }
        },
        "type": "object",
        "title": "Resources1",
        "description": "Resource requirements which apply to each individual container created\nas part of the service."
      },
      "RestartPolicy": {
        "type": "string",
        "enum": [
          "no-restart",
          "on-inputs-downloaded"
        ],
        "title": "RestartPolicy",
        "description": "Content of \"simcore.service.restart-policy\" label"
      },
      "RestartPolicy1": {
        "properties": {
          "Condition": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Condition"
              },
              {
                "type": "null"
              }
            ],
            "description": "Condition for restart."
          },
          "Delay": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay",
            "description": "Delay between restart attempts."
          },
          "MaxAttempts": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxattempts",
            "description": "Maximum attempts to restart a given container before giving up\n(default value is 0, which is ignored).\n",
            "default": 0
          },
          "Window": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Window",
            "description": "Windows is the time window used to evaluate the restart policy\n(default value is 0, which is unbounded).\n",
            "default": 0
          }
        },
        "type": "object",
        "title": "RestartPolicy1",
        "description": "Specification for the restart policy which applies to containers\ncreated as part of this service."
      },
      "RetrieveDataIn": {
        "properties": {
          "port_keys": {
            "items": {
              "type": "string",
              "pattern": "^[-_a-zA-Z0-9]+$"
            },
            "type": "array",
            "title": "Port Keys",
            "description": "The port keys to retrieve data from"
          }
        },
        "type": "object",
        "required": [
          "port_keys"
        ],
        "title": "RetrieveDataIn"
      },
      "RetrieveDataOut": {
        "properties": {
          "size_bytes": {
            "type": "integer",
            "minimum": 0,
            "title": "Size Bytes",
            "description": "The amount of data transferred by the retrieve call"
          }
        },
        "type": "object",
        "required": [
          "size_bytes"
        ],
        "title": "RetrieveDataOut"
      },
      "RetrieveDataOutEnveloped": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RetrieveDataOut"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RetrieveDataOutEnveloped"
      },
      "RollbackConfig": {
        "properties": {
          "Parallelism": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallelism",
            "description": "Maximum number of tasks to be rolled back in one iteration (0 means\nunlimited parallelism).\n"
          },
          "Delay": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay",
            "description": "Amount of time between rollback iterations, in nanoseconds.\n"
          },
          "FailureAction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FailureAction1"
              },
              {
                "type": "null"
              }
            ],
            "description": "Action to take if an rolled back task fails to run, or stops\nrunning during the rollback.\n"
          },
          "Monitor": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Monitor",
            "description": "Amount of time to monitor each rolled back task for failures, in\nnanoseconds.\n"
          },
          "MaxFailureRatio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxfailureratio",
            "description": "The fraction of tasks that may fail during a rollback before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
            "default": 0
          },
          "Order": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Order1"
              },
              {
                "type": "null"
              }
            ],
            "description": "The order of operations when rolling back a task. Either the old\ntask is shut down before the new task is started, or the new task\nis started before the old task is shut down.\n"
          }
        },
        "type": "object",
        "title": "RollbackConfig",
        "description": "Specification for the rollback strategy of the service."
      },
      "RunningDynamicServiceDetails": {
        "properties": {
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_basepath": {
            "anyOf": [
              {
                "type": "string",
                "format": "path"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Basepath",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint."
          },
          "boot_type": {
            "$ref": "#/components/schemas/ServiceBootType",
            "description": "Describes how the dynamic services was started (legacy=V0, modern=V2).Since legacy services do not have this label it defaults to V0.",
            "default": "V0"
          },
          "service_host": {
            "type": "string",
            "title": "Service Host",
            "description": "the service swarm internal host name"
          },
          "service_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Service Port",
            "description": "the service swarm internal port",
            "maximum": 65535,
            "minimum": 0
          },
          "published_port": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Published Port",
            "description": "the service swarm published port if any",
            "deprecated": true
          },
          "entry_point": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entry Point",
            "description": "if empty the service entrypoint is on the root endpoint.",
            "deprecated": true
          },
          "service_state": {
            "$ref": "#/components/schemas/ServiceState",
            "description": "service current state"
          },
          "service_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Service Message",
            "description": "additional information related to service state"
          }
        },
        "type": "object",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_host",
          "service_port",
          "service_state"
        ],
        "title": "RunningDynamicServiceDetails"
      },
      "RunningState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "WAITING_FOR_RESOURCES",
          "STARTED",
          "SUCCESS",
          "FAILED",
          "ABORTED",
          "WAITING_FOR_CLUSTER"
        ],
        "title": "RunningState",
        "description": "State of execution of a project's computational workflow\n\nSEE StateType for task state"
      },
      "SchedulerData": {
        "properties": {
          "paths_mapping": {
            "$ref": "#/components/schemas/PathMappingsLabel"
          },
          "simcore.service.compose-spec": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Simcore.Service.Compose-Spec",
            "description": "json encoded docker-compose specifications. see https://docs.docker.com/compose/compose-file/, only used by dynamic-sidecar."
          },
          "simcore.service.container-http-entrypoint": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Simcore.Service.Container-Http-Entrypoint",
            "description": "When a docker-compose specifications is provided, the container where the traffic must flow has to be specified. Required by dynamic-sidecar when compose_spec is set."
          },
          "user_preferences_path": {
            "anyOf": [
              {
                "type": "string",
                "format": "path"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Preferences Path"
          },
          "simcore.service.restart-policy": {
            "$ref": "#/components/schemas/RestartPolicy",
            "description": "the dynamic-sidecar can restart all running containers on certain events. Supported events:\n- `no-restart` default\n- `on-inputs-downloaded` after inputs are downloaded\n",
            "default": "no-restart"
          },
          "simcore.service.containers-allowed-outgoing-permit-list": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "$ref": "#/components/schemas/NATRule"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Simcore.Service.Containers-Allowed-Outgoing-Permit-List",
            "description": "allow internet access to certain domain names and ports per container"
          },
          "simcore.service.containers-allowed-outgoing-internet": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "uniqueItems": true
              },
              {
                "type": "null"
              }
            ],
            "title": "Simcore.Service.Containers-Allowed-Outgoing-Internet",
            "description": "allow complete internet access to containers in here"
          },
          "callbacks_mapping": {
            "$ref": "#/components/schemas/CallbacksMapping"
          },
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_name": {
            "type": "string",
            "minLength": 2,
            "title": "Service Name",
            "description": "Name of the current dynamic-sidecar being observed"
          },
          "run_id": {
            "type": "string",
            "title": "Run Id",
            "description": "Uniquely identify the dynamic sidecar session (a.k.a. 2 subsequent exact same services will have a different run_id)"
          },
          "hostname": {
            "type": "string",
            "title": "Hostname",
            "description": "dy-sidecar's service hostname (provided by docker-swarm)"
          },
          "port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Port",
            "description": "dynamic-sidecar port",
            "default": 8000,
            "maximum": 65535,
            "minimum": 0
          },
          "dynamic_sidecar": {
            "$ref": "#/components/schemas/DynamicSidecar",
            "description": "stores information fetched from the dynamic-sidecar"
          },
          "dynamic_sidecar_network_name": {
            "type": "string",
            "title": "Dynamic Sidecar Network Name",
            "description": "overlay network biding the proxy to the container spaned by the dynamic-sidecar"
          },
          "simcore_traefik_zone": {
            "type": "string",
            "title": "Simcore Traefik Zone",
            "description": "required for Traefik to correctly route requests to the spawned container"
          },
          "service_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Service Port",
            "description": "port where the service is exposed defined by the service; NOTE: temporary default because it will be changed once the service is started, this value is fetched from the service start spec",
            "default": 65534,
            "maximum": 65535,
            "minimum": 0
          },
          "service_resources": {
            "type": "object",
            "title": "Service Resources",
            "description": "service resources used to enforce limits"
          },
          "request_dns": {
            "type": "string",
            "title": "Request Dns",
            "description": "used when configuring the CORS options on the proxy"
          },
          "request_scheme": {
            "type": "string",
            "title": "Request Scheme",
            "description": "used when configuring the CORS options on the proxy"
          },
          "request_simcore_user_agent": {
            "type": "string",
            "title": "Request Simcore User Agent",
            "description": "used as label to filter out the metrics from the cAdvisor prometheus metrics"
          },
          "proxy_service_name": {
            "type": "string",
            "title": "Proxy Service Name",
            "description": "service name given to the proxy"
          },
          "proxy_admin_api_port": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Proxy Admin Api Port",
            "description": "used as the admin endpoint API port"
          },
          "wallet_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/WalletInfo-Output"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains information about the wallet used to bill the running service"
          },
          "pricing_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PricingInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains pricing information so we know what is the cost of running of the service"
          },
          "hardware_info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HardwareInfo"
              },
              {
                "type": "null"
              }
            ],
            "description": "contains harware information so we know on which hardware to run the service"
          },
          "product_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Product Name",
            "description": "Current product upon which this service is scheduledIf set to None, the current product is undefined. Mostly for backwards compatibility"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "paths_mapping",
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_name",
          "hostname",
          "dynamic_sidecar",
          "dynamic_sidecar_network_name",
          "simcore_traefik_zone",
          "service_resources",
          "request_dns",
          "request_scheme",
          "request_simcore_user_agent",
          "proxy_service_name"
        ],
        "title": "SchedulerData"
      },
      "SeLinuxContext": {
        "properties": {
          "Disable": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Disable",
            "description": "Disable SELinux"
          },
          "User": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User",
            "description": "SELinux user label"
          },
          "Role": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Role",
            "description": "SELinux role label"
          },
          "Type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Type",
            "description": "SELinux type label"
          },
          "Level": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "SELinux level label"
          }
        },
        "type": "object",
        "title": "SeLinuxContext",
        "description": "SELinux labels of the container"
      },
      "Secret": {
        "properties": {
          "File": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/File"
              },
              {
                "type": "null"
              }
            ],
            "description": "File represents a specific target that is backed by a file.\n"
          },
          "SecretID": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secretid",
            "description": "SecretID represents the ID of the specific secret that we're\nreferencing.\n"
          },
          "SecretName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Secretname",
            "description": "SecretName is the name of the secret that this references,\nbut this is just provided for lookup/display purposes. The\nsecret in the reference will be identified by its ID.\n"
          }
        },
        "type": "object",
        "title": "Secret"
      },
      "ServiceBootType": {
        "type": "string",
        "enum": [
          "V0",
          "V2"
        ],
        "title": "ServiceBootType"
      },
      "ServiceRemovalState": {
        "properties": {
          "can_remove": {
            "type": "boolean",
            "title": "Can Remove",
            "description": "when True, marks the service as ready to be removed",
            "default": false
          },
          "can_save": {
            "type": "boolean",
            "title": "Can Save",
            "description": "when True, saves the internal state and upload outputs of the service",
            "default": false
          },
          "was_removed": {
            "type": "boolean",
            "title": "Was Removed",
            "description": "Will be True when the removal finished. Used primarily to cancel retrying long running operations.",
            "default": false
          }
        },
        "type": "object",
        "title": "ServiceRemovalState"
      },
      "ServiceSpec": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of the service."
          },
          "Labels": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "User-defined key/value metadata."
          },
          "TaskTemplate": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TaskSpec"
              },
              {
                "type": "null"
              }
            ]
          },
          "Mode": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Mode"
              },
              {
                "type": "null"
              }
            ],
            "description": "Scheduling mode for the service."
          },
          "UpdateConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UpdateConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specification for the update strategy of the service."
          },
          "RollbackConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RollbackConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specification for the rollback strategy of the service."
          },
          "Networks": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/NetworkAttachmentConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Networks",
            "description": "Specifies which networks the service should attach to."
          },
          "EndpointSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/EndpointSpec"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "ServiceSpec",
        "description": "User modifiable configuration for a service."
      },
      "ServiceState": {
        "type": "string",
        "enum": [
          "failed",
          "pending",
          "pulling",
          "starting",
          "running",
          "stopping",
          "complete",
          "idle"
        ],
        "title": "ServiceState"
      },
      "ServicesInstrumentation": {
        "properties": {
          "start_requested_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Start Requested At",
            "description": "moment in which the process of starting the service was requested"
          },
          "close_requested_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Close Requested At",
            "description": "moment in which the process of stopping the service was requested"
          }
        },
        "type": "object",
        "title": "ServicesInstrumentation"
      },
      "Spread": {
        "properties": {
          "SpreadDescriptor": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Spreaddescriptor",
            "description": "label descriptor, such as `engine.labels.az`.\n"
          }
        },
        "type": "object",
        "title": "Spread"
      },
      "Status2": {
        "type": "string",
        "enum": [
          "created",
          "running",
          "paused",
          "restarting",
          "removing",
          "exited",
          "dead"
        ],
        "title": "Status2",
        "description": "String representation of the container state. Can be one of \"created\",\n\"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\"."
      },
      "TaskLogFileGet": {
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid",
            "title": "Task Id"
          },
          "download_link": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Download Link",
            "description": "Presigned link for log file or None if still not available"
          }
        },
        "type": "object",
        "required": [
          "task_id"
        ],
        "title": "TaskLogFileGet"
      },
      "TaskSpec": {
        "properties": {
          "PluginSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PluginSpec"
              },
              {
                "type": "null"
              }
            ],
            "description": "Plugin spec for the service.  *(Experimental release only.)*\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n"
          },
          "ContainerSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ContainerSpec"
              },
              {
                "type": "null"
              }
            ],
            "description": "Container spec for the service.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n"
          },
          "NetworkAttachmentSpec": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NetworkAttachmentSpec"
              },
              {
                "type": "null"
              }
            ],
            "description": "Read-only spec type for non-swarm containers attached to swarm overlay\nnetworks.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n"
          },
          "Resources": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Resources1"
              },
              {
                "type": "null"
              }
            ],
            "description": "Resource requirements which apply to each individual container created\nas part of the service.\n"
          },
          "RestartPolicy": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RestartPolicy1"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specification for the restart policy which applies to containers\ncreated as part of this service.\n"
          },
          "Placement": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Placement"
              },
              {
                "type": "null"
              }
            ]
          },
          "ForceUpdate": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Forceupdate",
            "description": "A counter that triggers an update even if no relevant parameters have\nbeen changed.\n"
          },
          "Runtime": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runtime",
            "description": "Runtime is the type of runtime specified for the task executor.\n"
          },
          "Networks": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/NetworkAttachmentConfig"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Networks",
            "description": "Specifies which networks the service should attach to."
          },
          "LogDriver": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogDriver1"
              },
              {
                "type": "null"
              }
            ],
            "description": "Specifies the log driver to use for tasks created from this spec. If\nnot present, the default one for the swarm will be used, finally\nfalling back to the engine default if not specified.\n"
          }
        },
        "type": "object",
        "title": "TaskSpec",
        "description": "User modifiable task configuration."
      },
      "TasksOutputs": {
        "properties": {
          "nodes_outputs": {
            "additionalProperties": {
              "propertyNames": {
                "maxLength": 100,
                "minLength": 1
              },
              "type": "object"
            },
            "propertyNames": {
              "format": "uuid"
            },
            "type": "object",
            "title": "Nodes Outputs"
          }
        },
        "type": "object",
        "required": [
          "nodes_outputs"
        ],
        "title": "TasksOutputs"
      },
      "TasksSelection": {
        "properties": {
          "nodes_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Nodes Ids"
          }
        },
        "type": "object",
        "required": [
          "nodes_ids"
        ],
        "title": "TasksSelection"
      },
      "TmpfsOptions": {
        "properties": {
          "SizeBytes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sizebytes",
            "description": "The size for the tmpfs mount in bytes."
          },
          "Mode": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mode",
            "description": "The permission mode for the tmpfs mount in an integer."
          }
        },
        "type": "object",
        "title": "TmpfsOptions",
        "description": "Optional configuration for the `tmpfs` type."
      },
      "Type": {
        "type": "string",
        "enum": [
          "tcp",
          "udp",
          "sctp"
        ],
        "title": "Type"
      },
      "Type2": {
        "type": "string",
        "enum": [
          "bind",
          "volume",
          "tmpfs",
          "npipe"
        ],
        "title": "Type2",
        "description": "The mount type. Available types:\n\n- `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.\n- `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.\n- `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.\n- `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container."
      },
      "Ulimit": {
        "properties": {
          "Name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name",
            "description": "Name of ulimit"
          },
          "Soft": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Soft",
            "description": "Soft limit"
          },
          "Hard": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hard",
            "description": "Hard limit"
          }
        },
        "type": "object",
        "title": "Ulimit"
      },
      "UpdateConfig": {
        "properties": {
          "Parallelism": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parallelism",
            "description": "Maximum number of tasks to be updated in one iteration (0 means\nunlimited parallelism).\n"
          },
          "Delay": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delay",
            "description": "Amount of time between updates, in nanoseconds."
          },
          "FailureAction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FailureAction"
              },
              {
                "type": "null"
              }
            ],
            "description": "Action to take if an updated task fails to run, or stops running\nduring the update.\n"
          },
          "Monitor": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Monitor",
            "description": "Amount of time to monitor each updated task for failures, in\nnanoseconds.\n"
          },
          "MaxFailureRatio": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxfailureratio",
            "description": "The fraction of tasks that may fail during an update before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
            "default": 0
          },
          "Order": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Order"
              },
              {
                "type": "null"
              }
            ],
            "description": "The order of operations when rolling out an updated task. Either\nthe old task is shut down before the new task is started, or the\nnew task is started before the old task is shut down.\n"
          }
        },
        "type": "object",
        "title": "UpdateConfig",
        "description": "Specification for the update strategy of the service."
      },
      "UserServiceCommand": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service",
            "description": "name of the docker-compose service in the docker-compose spec"
          },
          "command": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Command",
            "description": "command to run in container"
          },
          "timeout": {
            "type": "number",
            "minimum": 0.0,
            "title": "Timeout",
            "description": "after this interval the command will be timed-out"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "service",
          "command",
          "timeout"
        ],
        "title": "UserServiceCommand"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VolumeOptions": {
        "properties": {
          "NoCopy": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nocopy",
            "description": "Populate volume with data from the target.",
            "default": false
          },
          "Labels": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Labels",
            "description": "User-defined key/value metadata."
          },
          "DriverConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DriverConfig"
              },
              {
                "type": "null"
              }
            ],
            "description": "Map of driver specific options"
          }
        },
        "type": "object",
        "title": "VolumeOptions",
        "description": "Optional configuration for the `volume` type."
      },
      "WalletInfo-Input": {
        "properties": {
          "wallet_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Wallet Id",
            "minimum": 0
          },
          "wallet_name": {
            "type": "string",
            "title": "Wallet Name"
          },
          "wallet_credit_amount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Wallet Credit Amount"
          }
        },
        "type": "object",
        "required": [
          "wallet_id",
          "wallet_name",
          "wallet_credit_amount"
        ],
        "title": "WalletInfo"
      },
      "WalletInfo-Output": {
        "properties": {
          "wallet_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Wallet Id",
            "minimum": 0
          },
          "wallet_name": {
            "type": "string",
            "title": "Wallet Name"
          },
          "wallet_credit_amount": {
            "type": "string",
            "title": "Wallet Credit Amount"
          }
        },
        "type": "object",
        "required": [
          "wallet_id",
          "wallet_name",
          "wallet_credit_amount"
        ],
        "title": "WalletInfo"
      },
      "_PortRange": {
        "properties": {
          "lower": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "type": "string",
                "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
              }
            ],
            "title": "Lower"
          },
          "upper": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "type": "string",
                "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$"
              }
            ],
            "title": "Upper"
          }
        },
        "type": "object",
        "required": [
          "lower",
          "upper"
        ],
        "title": "_PortRange",
        "description": "`lower` and `upper` are included"
      },
      "models_library__generated_models__docker_rest_api__Status": {
        "type": "string",
        "enum": [
          "none",
          "starting",
          "healthy",
          "unhealthy"
        ],
        "title": "Status",
        "description": "Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n- \"none\"      Indicates there is no healthcheck\n- \"starting\"  Starting indicates that the container is not yet ready\n- \"healthy\"   Healthy indicates that the container is running correctly\n- \"unhealthy\" Unhealthy indicates that the container has a problem"
      },
      "simcore_service_director_v2__models__dynamic_services_scheduler__Status": {
        "properties": {
          "current": {
            "$ref": "#/components/schemas/DynamicSidecarStatus",
            "description": "status of the service"
          },
          "info": {
            "type": "string",
            "title": "Info",
            "description": "additional information for the user"
          }
        },
        "type": "object",
        "required": [
          "current",
          "info"
        ],
        "title": "Status",
        "description": "Generated from data from docker container inspect API"
      }
    }
  }
}
