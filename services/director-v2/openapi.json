{
  "openapi": "3.0.2",
  "info": {
    "title": "simcore-service-director-v2",
    "description": " Orchestrates the pipeline of services defined by the user",
    "version": "2.2.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default server: requests directed to serving url"
    },
    {
      "url": "http://{host}:{port}",
      "description": "Development server: can configure any base url",
      "variables": {
        "host": {
          "default": "127.0.0.1"
        },
        "port": {
          "default": "8000"
        }
      }
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Check Service Health",
        "operationId": "check_service_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Services",
        "description": "Lists services available in the deployed registry",
        "operationId": "list_services_v0_services_get",
        "parameters": [
          {
            "description": "The service type:\n   - computational - a computational service\n   - interactive - an interactive service\n",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ServiceType"
                }
              ],
              "description": "The service type:\n   - computational - a computational service\n   - interactive - an interactive service\n"
            },
            "name": "service_type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}/extras": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Extra Service Versioned",
        "description": "Returns the service extras",
        "operationId": "get_extra_service_versioned_v0_services__service_key___service_version__extras_get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^simcore/services/(?P<type>(comp|dynamic|frontend))/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExtrasEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/services/{service_key}/{service_version}": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "Get Service Versioned",
        "description": "Returns details of the selected service if available in the platform",
        "operationId": "get_service_versioned_v0_services__service_key___service_version__get",
        "parameters": [
          {
            "description": "Distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^simcore/services/(?P<type>(comp|dynamic|frontend))/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
              "type": "string",
              "description": "Distinctive name for the node based on the docker registry path"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicesArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/running_interactive_services": {
      "get": {
        "tags": [
          "services"
        ],
        "summary": "List Running Interactive Services",
        "description": "Lists of running interactive services",
        "operationId": "list_running_interactive_services_v0_running_interactive_services_get",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningServicesDetailsArrayEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "services"
        ],
        "summary": "Start Interactive Service",
        "description": "Starts an interactive service in the  platform",
        "operationId": "start_interactive_service_v0_running_interactive_services_post",
        "parameters": [
          {
            "description": "The ID of the user that starts the service",
            "required": true,
            "schema": {
              "title": "User Id",
              "type": "string",
              "description": "The ID of the user that starts the service"
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "description": "The ID of the project in which the service starts",
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "description": "The ID of the project in which the service starts"
            },
            "name": "project_id",
            "in": "query"
          },
          {
            "description": "distinctive name for the node based on the docker registry path",
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^simcore/services/(?P<type>(comp|dynamic|frontend))/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
              "type": "string",
              "description": "distinctive name for the node based on the docker registry path"
            },
            "example": [
              "simcore/services/comp/itis/sleeper",
              "simcore/services/dynamic/3dviewer"
            ],
            "name": "service_key",
            "in": "query"
          },
          {
            "description": "The tag/version of the service",
            "required": true,
            "schema": {
              "title": "Service Tag",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string",
              "description": "The tag/version of the service"
            },
            "example": "1.0.0",
            "name": "service_tag",
            "in": "query"
          },
          {
            "description": "The uuid to assign the service with",
            "required": true,
            "schema": {
              "title": "Service Uuid",
              "type": "string",
              "description": "The uuid to assign the service with"
            },
            "name": "service_uuid",
            "in": "query"
          },
          {
            "description": "predefined basepath for the backend service otherwise uses root",
            "required": false,
            "schema": {
              "title": "Service Base Path",
              "type": "string",
              "description": "predefined basepath for the backend service otherwise uses root",
              "default": ""
            },
            "example": "/x/EycCXbU0H/",
            "name": "service_base_path",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/running_interactive_services/{service_uuid}": {
      "delete": {
        "tags": [
          "services"
        ],
        "summary": "Stop Interactive Service",
        "operationId": "stop_interactive_service_v0_running_interactive_services__service_uuid__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Uuid",
              "type": "string"
            },
            "name": "service_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Create and optionally start a new computation",
        "operationId": "create_computation_v2_computations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Returns a computation pipeline state",
        "operationId": "get_computation_v2_computations__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "computations"
        ],
        "summary": "Deletes a computation pipeline",
        "operationId": "delete_computation_v2_computations__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}:stop": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Stops a computation pipeline",
        "operationId": "stop_computation_v2_computations__project_id__stop_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationStop"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/-/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns download links to log-files of each task in a computation.\nEach log is only available when the corresponding task is done",
        "operationId": "get_all_tasks_log_files_v2_computations__project_id__tasks___logfile_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get All Tasks Log Files V2 Computations  Project Id  Tasks   Logfile Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskLogFileGet"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/{node_uuid}/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns a link to download logs file of a give task.\nThe log is only available when the task is done",
        "operationId": "get_task_log_file_v2_computations__project_id__tasks__node_uuid__logfile_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskLogFileGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "returns a list of running interactive services filtered by user_id and/or project_idboth legacy (director-v0) and modern (director-v2)",
        "operationId": "list_tracked_dynamic_services_v2_dynamic_services_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Tracked Dynamic Services V2 Dynamic Services Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "creates & starts the dynamic service",
        "operationId": "create_dynamic_service_v2_dynamic_services_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "X-Dynamic-Sidecar-Request-Dns",
              "type": "string"
            },
            "name": "x-dynamic-sidecar-request-dns",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "title": "X-Dynamic-Sidecar-Request-Scheme",
              "type": "string"
            },
            "name": "x-dynamic-sidecar-request-scheme",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "title": "X-Simcore-User-Agent",
              "type": "string"
            },
            "name": "x-simcore-user-agent",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicServiceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "assembles the status for the dynamic-sidecar",
        "operationId": "get_dynamic_sidecar_status_v2_dynamic_services__node_uuid__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dynamic services"
        ],
        "summary": "stops previously spawned dynamic-sidecar",
        "operationId": "stop_dynamic_service_v2_dynamic_services__node_uuid__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "title": "Can Save",
              "type": "boolean",
              "default": true
            },
            "name": "can_save",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:retrieve": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's retrieve endpoint with optional port_keys",
        "operationId": "service_retrieve_data_on_ports_v2_dynamic_services__node_uuid__retrieve_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveDataIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveDataOutEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:restart": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's restart containers endpoint",
        "operationId": "service_restart_containers_v2_dynamic_services__node_uuid__restart_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/projects/{project_id}/-/networks": {
      "patch": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Updates the project networks according to the current project's workbench",
        "operationId": "update_projects_networks_v2_dynamic_services_projects__project_id____networks_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Project Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Lists clusters for user",
        "operationId": "list_clusters_v2_clusters_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Clusters V2 Clusters Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClusterGet"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Create a new cluster for a user",
        "operationId": "create_cluster_v2_clusters_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the default cluster",
        "operationId": "get_default_cluster_v2_clusters_default_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Get one cluster for user",
        "operationId": "get_cluster_v2_clusters__cluster_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Cluster Id",
              "minimum": 0.0,
              "type": "integer"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "clusters"
        ],
        "summary": "Remove a cluster for user",
        "operationId": "delete_cluster_v2_clusters__cluster_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Cluster Id",
              "minimum": 0.0,
              "type": "integer"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "clusters"
        ],
        "summary": "Modify a cluster for user",
        "operationId": "update_cluster_v2_clusters__cluster_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Cluster Id",
              "minimum": 0.0,
              "type": "integer"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default/details": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the cluster details",
        "operationId": "get_default_cluster_details_v2_clusters_default_details_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterDetailsGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}/details": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the cluster details",
        "operationId": "get_cluster_details_v2_clusters__cluster_id__details_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Cluster Id",
              "minimum": 0.0,
              "type": "integer"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterDetailsGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_cluster_connection_v2_clusters_ping_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterPing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_default_cluster_connection_v2_clusters_default_ping_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_specific_cluster_connection_v2_clusters__cluster_id__ping_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Cluster Id",
              "minimum": 0.0,
              "type": "integer"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "User Id",
              "exclusiveMinimum": true,
              "type": "integer",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/observation": {
      "patch": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Enable/disable observation of the service",
        "operationId": "update_service_observation_v2_dynamic_scheduler_services__node_uuid__observation_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservationItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/containers": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's user services",
        "operationId": "delete_service_containers_v2_dynamic_scheduler_services__node_uuid__containers_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Delete Service Containers V2 Dynamic Scheduler Services  Node Uuid  Containers Delete",
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/state:save": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the saving of the state for the service",
        "operationId": "save_service_state_v2_dynamic_scheduler_services__node_uuid__state_save_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Save Service State V2 Dynamic Scheduler Services  Node Uuid  State Save Post",
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/outputs:push": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the pushing of the outputs for the service",
        "operationId": "push_service_outputs_v2_dynamic_scheduler_services__node_uuid__outputs_push_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Push Service Outputs V2 Dynamic Scheduler Services  Node Uuid  Outputs Push Post",
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/docker-resources": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's sidecar, proxy and docker networks & volumes",
        "operationId": "delete_service_docker_resources_v2_dynamic_scheduler_services__node_uuid__docker_resources_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Node Uuid",
              "type": "string",
              "format": "uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Delete Service Docker Resources V2 Dynamic Scheduler Services  Node Uuid  Docker Resources Delete",
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Author": {
        "title": "Author",
        "required": [
          "name",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the author",
            "example": "Jim Knopf"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "description": "Email address",
            "format": "email"
          },
          "affiliation": {
            "title": "Affiliation",
            "type": "string",
            "description": "Affiliation of the author"
          }
        },
        "additionalProperties": false
      },
      "Badge": {
        "title": "Badge",
        "required": [
          "name",
          "image",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name of the subject"
          },
          "image": {
            "title": "Image",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Url to the badge",
            "format": "uri"
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the status",
            "format": "uri"
          }
        },
        "additionalProperties": false
      },
      "BootChoice": {
        "title": "BootChoice",
        "required": [
          "label",
          "description"
        ],
        "type": "object",
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "BootMode": {
        "title": "BootMode",
        "enum": [
          "CPU",
          "GPU",
          "MPI"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "BootOption": {
        "title": "BootOption",
        "required": [
          "label",
          "description",
          "default",
          "items"
        ],
        "type": "object",
        "properties": {
          "label": {
            "title": "Label",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "default": {
            "title": "Default",
            "type": "string"
          },
          "items": {
            "title": "Items",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/BootChoice"
            }
          }
        }
      },
      "ClusterAccessRights": {
        "title": "ClusterAccessRights",
        "required": [
          "read",
          "write",
          "delete"
        ],
        "type": "object",
        "properties": {
          "read": {
            "title": "Read",
            "type": "boolean",
            "description": "allows to run pipelines on that cluster"
          },
          "write": {
            "title": "Write",
            "type": "boolean",
            "description": "allows to modify the cluster"
          },
          "delete": {
            "title": "Delete",
            "type": "boolean",
            "description": "allows to delete a cluster"
          }
        },
        "additionalProperties": false
      },
      "ClusterCreate": {
        "title": "ClusterCreate",
        "required": [
          "name",
          "type",
          "endpoint",
          "authentication"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The human readable name of the cluster"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterType"
          },
          "owner": {
            "title": "Owner",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the image describing this cluster",
            "format": "uri"
          },
          "endpoint": {
            "title": "Endpoint",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "authentication": {
            "title": "Authentication",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              }
            ]
          },
          "accessRights": {
            "title": "Accessrights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            }
          }
        },
        "additionalProperties": false
      },
      "ClusterDetailsGet": {
        "title": "ClusterDetailsGet",
        "required": [
          "scheduler",
          "dashboard_link"
        ],
        "type": "object",
        "properties": {
          "scheduler": {
            "title": "Scheduler",
            "allOf": [
              {
                "$ref": "#/components/schemas/Scheduler"
              }
            ],
            "description": "This contains dask scheduler information given by the underlying dask library"
          },
          "dashboard_link": {
            "title": "Dashboard Link",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "Link to this scheduler's dashboard",
            "format": "uri"
          }
        }
      },
      "ClusterGet": {
        "title": "ClusterGet",
        "required": [
          "name",
          "type",
          "owner",
          "endpoint",
          "authentication",
          "id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "The human readable name of the cluster"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterType"
          },
          "owner": {
            "title": "Owner",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the image describing this cluster",
            "format": "uri"
          },
          "endpoint": {
            "title": "Endpoint",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "authentication": {
            "title": "Authentication",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              },
              {
                "$ref": "#/components/schemas/NoAuthentication"
              }
            ],
            "description": "Dask gateway authentication"
          },
          "accessRights": {
            "title": "Accessrights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            }
          },
          "id": {
            "title": "Id",
            "minimum": 0.0,
            "type": "integer",
            "description": "The cluster ID"
          }
        },
        "additionalProperties": false
      },
      "ClusterPatch": {
        "title": "ClusterPatch",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterType"
          },
          "owner": {
            "title": "Owner",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "endpoint": {
            "title": "Endpoint",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "authentication": {
            "title": "Authentication",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              }
            ]
          },
          "accessRights": {
            "title": "Accessrights",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            }
          }
        },
        "additionalProperties": false
      },
      "ClusterPing": {
        "title": "ClusterPing",
        "required": [
          "endpoint",
          "authentication"
        ],
        "type": "object",
        "properties": {
          "endpoint": {
            "title": "Endpoint",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "authentication": {
            "title": "Authentication",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              },
              {
                "$ref": "#/components/schemas/NoAuthentication"
              }
            ],
            "description": "Dask gateway authentication"
          }
        }
      },
      "ClusterType": {
        "title": "ClusterType",
        "enum": [
          "AWS",
          "ON_PREMISE"
        ],
        "description": "An enumeration."
      },
      "ComputationCreate": {
        "title": "ComputationCreate",
        "required": [
          "user_id",
          "project_id",
          "product_name"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "format": "uuid"
          },
          "start_pipeline": {
            "title": "Start Pipeline",
            "type": "boolean",
            "description": "if True the computation pipeline will start right away",
            "default": false
          },
          "product_name": {
            "title": "Product Name",
            "type": "string"
          },
          "subgraph": {
            "title": "Subgraph",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "An optional set of nodes that must be executed, if empty the whole pipeline is executed"
          },
          "force_restart": {
            "title": "Force Restart",
            "type": "boolean",
            "description": "if True will force re-running all dependent nodes",
            "default": false
          },
          "cluster_id": {
            "title": "Cluster Id",
            "minimum": 0.0,
            "type": "integer",
            "description": "the computation shall use the cluster described by its id, 0 is the default cluster"
          }
        }
      },
      "ComputationDelete": {
        "title": "ComputationDelete",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "force": {
            "title": "Force",
            "type": "boolean",
            "description": "if True then the pipeline will be removed even if it is running",
            "default": false
          }
        }
      },
      "ComputationGet": {
        "title": "ComputationGet",
        "required": [
          "id",
          "state",
          "pipeline_details",
          "iteration",
          "cluster_id",
          "started",
          "stopped",
          "submitted",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "description": "the id of the computation task",
            "format": "uuid"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the state of the computational task"
          },
          "result": {
            "title": "Result",
            "type": "string",
            "description": "the result of the computational task"
          },
          "pipeline_details": {
            "title": "Pipeline Details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineDetails"
              }
            ],
            "description": "the details of the generated pipeline"
          },
          "iteration": {
            "title": "Iteration",
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "the iteration id of the computation task (none if no task ran yet)",
            "minimum": 0
          },
          "cluster_id": {
            "title": "Cluster Id",
            "minimum": 0.0,
            "type": "integer",
            "description": "the cluster on which the computaional task runs/ran (none if no task ran yet)"
          },
          "started": {
            "title": "Started",
            "type": "string",
            "description": "the timestamp when the computation was started or None if not started yet",
            "format": "date-time"
          },
          "stopped": {
            "title": "Stopped",
            "type": "string",
            "description": "the timestamp when the computation was stopped or None if not started nor stopped yet",
            "format": "date-time"
          },
          "submitted": {
            "title": "Submitted",
            "type": "string",
            "description": "task last modification timestamp or None if the there is no task",
            "format": "date-time"
          },
          "url": {
            "title": "Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "the link where to get the status of the task",
            "format": "uri"
          },
          "stop_url": {
            "title": "Stop Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "the link where to stop the task",
            "format": "uri"
          }
        }
      },
      "ComputationStop": {
        "title": "ComputationStop",
        "required": [
          "user_id"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          }
        }
      },
      "ContainerSpec": {
        "title": "ContainerSpec",
        "required": [
          "Command"
        ],
        "type": "object",
        "properties": {
          "Command": {
            "title": "Command",
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Used to override the container's command"
          }
        },
        "additionalProperties": false,
        "description": "Implements entries that can be overriden for https://docs.docker.com/engine/api/v1.41/#operation/ServiceCreate\nrequest body: TaskTemplate -> ContainerSpec"
      },
      "DictModel_str__PositiveFloat_": {
        "title": "DictModel[str, PositiveFloat]",
        "type": "object",
        "additionalProperties": {
          "exclusiveMinimum": true,
          "type": "number",
          "minimum": 0.0
        }
      },
      "DynamicServiceCreate": {
        "title": "DynamicServiceCreate",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_resources",
          "product_name",
          "can_save"
        ],
        "type": "object",
        "properties": {
          "service_key": {
            "title": "Service Key",
            "pattern": "^simcore/services/dynamic/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "title": "Service Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "format": "uuid"
          },
          "service_uuid": {
            "title": "Service Uuid",
            "type": "string",
            "format": "uuid"
          },
          "service_basepath": {
            "title": "Service Basepath",
            "type": "string",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint.",
            "format": "path"
          },
          "service_resources": {
            "title": "Service Resources",
            "type": "object"
          },
          "product_name": {
            "title": "Product Name",
            "type": "string",
            "description": "Current product name"
          },
          "can_save": {
            "title": "Can Save",
            "type": "boolean",
            "description": "the service data must be saved when closing"
          }
        },
        "example": {
          "key": "simcore/services/dynamic/3dviewer",
          "version": "2.4.5",
          "user_id": 234,
          "project_id": "dd1d04d9-d704-4f7e-8f0f-1ca60cc771fe",
          "node_uuid": "75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "basepath": "/x/75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "product_name": "osparc",
          "can_save": true,
          "service_resources": {
            "container": {
              "image": "simcore/services/dynamic/jupyter-math:2.0.5",
              "resources": {
                "CPU": {
                  "limit": 0.1,
                  "reservation": 0.1
                },
                "RAM": {
                  "limit": 2147483648,
                  "reservation": 2147483648
                }
              },
              "boot_modes": [
                "CPU"
              ]
            }
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ImageResources": {
        "title": "ImageResources",
        "required": [
          "image",
          "resources"
        ],
        "type": "object",
        "properties": {
          "image": {
            "title": "Image",
            "pattern": "^(?:(?P<registry_host>[a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::\\d+)?|[a-z0-9-]+:\\d+)/)?(?P<docker_image>(?:[a-z0-9][a-z0-9_.-]*/)*[a-z0-9-_]+[a-z0-9])(?::(?P<docker_tag>[\\w][\\w.-]{0,127}))?(?P<docker_digest>\\@sha256:[a-fA-F0-9]{32,64})?$",
            "type": "string",
            "description": "Used by the frontend to provide a context for the users.Services with a docker-compose spec will have multiple entries.Using the `image:version` instead of the docker-compose spec is more helpful for the end user."
          },
          "resources": {
            "title": "Resources",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceValue"
            }
          },
          "boot_modes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BootMode"
            },
            "description": "describe how a service shall be booted, using CPU, MPI, openMP or GPU",
            "default": [
              "CPU"
            ]
          }
        },
        "example": {
          "image": "simcore/service/dynamic/pretty-intense:1.0.0",
          "resources": {
            "CPU": {
              "limit": 4,
              "reservation": 0.1
            },
            "RAM": {
              "limit": 103079215104,
              "reservation": 536870912
            },
            "VRAM": {
              "limit": 1,
              "reservation": 1
            },
            "AIRAM": {
              "limit": 1,
              "reservation": 1
            },
            "ANY_resource": {
              "limit": "some_value",
              "reservation": "some_value"
            }
          }
        }
      },
      "JupyterHubTokenAuthentication": {
        "title": "JupyterHubTokenAuthentication",
        "required": [
          "api_token"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "jupyterhub"
            ],
            "type": "string",
            "default": "jupyterhub"
          },
          "api_token": {
            "title": "Api Token",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "KerberosAuthentication": {
        "title": "KerberosAuthentication",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "kerberos"
            ],
            "type": "string",
            "default": "kerberos"
          }
        },
        "additionalProperties": false
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "description": "Maps every route's path tag with a released version"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "NoAuthentication": {
        "title": "NoAuthentication",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "none"
            ],
            "type": "string",
            "default": "none"
          }
        },
        "additionalProperties": false
      },
      "NodeRequirements": {
        "title": "NodeRequirements",
        "required": [
          "CPU",
          "RAM"
        ],
        "type": "object",
        "properties": {
          "CPU": {
            "title": "Cpu",
            "exclusiveMinimum": true,
            "type": "number",
            "description": "defines the required (maximum) CPU shares for running the services",
            "minimum": 0.0
          },
          "GPU": {
            "title": "Gpu",
            "minimum": 0.0,
            "type": "integer",
            "description": "defines the required (maximum) GPU for running the services"
          },
          "RAM": {
            "title": "Ram",
            "type": "integer",
            "description": "defines the required (maximum) amount of RAM for running the services"
          },
          "VRAM": {
            "title": "Vram",
            "type": "integer",
            "description": "defines the required (maximum) amount of VRAM for running the services"
          }
        }
      },
      "NodeState": {
        "title": "NodeState",
        "type": "object",
        "properties": {
          "modified": {
            "title": "Modified",
            "type": "boolean",
            "description": "true if the node's outputs need to be re-computed",
            "default": true
          },
          "dependencies": {
            "title": "Dependencies",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "contains the node inputs dependencies if they need to be computed first"
          },
          "currentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the node's current state",
            "default": "NOT_STARTED"
          },
          "progress": {
            "title": "Progress",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "current progress of the task if available (None if not started or not a computational task)",
            "default": 0
          }
        },
        "additionalProperties": false
      },
      "ObservationItem": {
        "title": "ObservationItem",
        "required": [
          "is_disabled"
        ],
        "type": "object",
        "properties": {
          "is_disabled": {
            "title": "Is Disabled",
            "type": "boolean"
          }
        }
      },
      "PipelineDetails": {
        "title": "PipelineDetails",
        "required": [
          "adjacency_list",
          "progress",
          "node_states"
        ],
        "type": "object",
        "properties": {
          "adjacency_list": {
            "title": "Adjacency List",
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "description": "The adjacency list of the current pipeline in terms of {NodeID: [successor NodeID]}"
          },
          "progress": {
            "title": "Progress",
            "maximum": 1.0,
            "minimum": 0.0,
            "type": "number",
            "description": "the progress of the pipeline (None if there are no computational tasks)"
          },
          "node_states": {
            "title": "Node States",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeState"
            },
            "description": "The states of each of the computational nodes in the pipeline"
          }
        }
      },
      "ResourceValue": {
        "title": "ResourceValue",
        "required": [
          "limit",
          "reservation"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "title": "Limit",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "reservation": {
            "title": "Reservation",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          }
        }
      },
      "RetrieveDataIn": {
        "title": "RetrieveDataIn",
        "required": [
          "port_keys"
        ],
        "type": "object",
        "properties": {
          "port_keys": {
            "title": "Port Keys",
            "type": "array",
            "items": {
              "pattern": "^[-_a-zA-Z0-9]+$",
              "type": "string"
            },
            "description": "The port keys to retrieve data from"
          }
        }
      },
      "RetrieveDataOut": {
        "title": "RetrieveDataOut",
        "required": [
          "size_bytes"
        ],
        "type": "object",
        "properties": {
          "size_bytes": {
            "title": "Size Bytes",
            "type": "integer",
            "description": "The amount of data transferred by the retrieve call"
          }
        }
      },
      "RetrieveDataOutEnveloped": {
        "title": "RetrieveDataOutEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RetrieveDataOut"
          }
        }
      },
      "RunningDynamicServiceDetails": {
        "title": "RunningDynamicServiceDetails",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_host",
          "service_port",
          "service_state"
        ],
        "type": "object",
        "properties": {
          "service_key": {
            "title": "Service Key",
            "pattern": "^simcore/services/dynamic/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "title": "Service Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "title": "User Id",
            "exclusiveMinimum": true,
            "type": "integer",
            "minimum": 0
          },
          "project_id": {
            "title": "Project Id",
            "type": "string",
            "format": "uuid"
          },
          "service_uuid": {
            "title": "Service Uuid",
            "type": "string",
            "format": "uuid"
          },
          "service_basepath": {
            "title": "Service Basepath",
            "type": "string",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint.",
            "format": "path"
          },
          "boot_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceBootType"
              }
            ],
            "description": "Describes how the dynamic services was started (legacy=V0, modern=V2).Since legacy services do not have this label it defaults to V0.",
            "default": "V0"
          },
          "service_host": {
            "title": "Service Host",
            "type": "string",
            "description": "the service swarm internal host name"
          },
          "service_port": {
            "title": "Service Port",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "the service swarm internal port",
            "maximum": 65535,
            "minimum": 0
          },
          "published_port": {
            "title": "Published Port",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "the service swarm published port if any",
            "deprecated": true,
            "maximum": 65535,
            "minimum": 0
          },
          "entry_point": {
            "title": "Entry Point",
            "type": "string",
            "description": "if empty the service entrypoint is on the root endpoint.",
            "deprecated": true
          },
          "service_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceState"
              }
            ],
            "description": "service current state"
          },
          "service_message": {
            "title": "Service Message",
            "type": "string",
            "description": "additional information related to service state"
          }
        }
      },
      "RunningServiceDetails": {
        "title": "RunningServiceDetails",
        "required": [
          "entry_point",
          "service_uuid",
          "service_key",
          "service_version",
          "service_host",
          "service_basepath",
          "service_state",
          "service_message"
        ],
        "type": "object",
        "properties": {
          "published_port": {
            "title": "Published Port",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "The ports where the service provides its interface on the docker swarm",
            "deprecated": true,
            "maximum": 65535,
            "minimum": 0
          },
          "entry_point": {
            "title": "Entry Point",
            "type": "string",
            "description": "The entry point where the service provides its interface"
          },
          "service_uuid": {
            "title": "Service Uuid",
            "pattern": "^[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$",
            "type": "string",
            "description": "The node UUID attached to the service"
          },
          "service_key": {
            "title": "Service Key",
            "pattern": "^simcore/services/(?P<type>(comp|dynamic|frontend))/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path",
            "example": [
              "simcore/services/comp/itis/sleeper",
              "simcore/services/dynamic/3dviewer"
            ]
          },
          "service_version": {
            "title": "Service Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number",
            "example": [
              "1.0.0",
              "0.0.1"
            ]
          },
          "service_host": {
            "title": "Service Host",
            "type": "string",
            "description": "service host name within the network"
          },
          "service_port": {
            "title": "Service Port",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "port to access the service within the network",
            "default": 80,
            "maximum": 65535,
            "minimum": 0
          },
          "service_basepath": {
            "title": "Service Basepath",
            "type": "string",
            "description": "the service base entrypoint where the service serves its contents"
          },
          "service_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceState"
              }
            ],
            "description": "the service state * 'pending' - The service is waiting for resources to start * 'pulling' - The service is being pulled from the registry * 'starting' - The service is starting * 'running' - The service is running * 'complete' - The service completed * 'failed' - The service failed to start * 'stopping' - The service is stopping"
          },
          "service_message": {
            "title": "Service Message",
            "type": "string",
            "description": "the service message"
          }
        }
      },
      "RunningServicesDetailsArray": {
        "title": "RunningServicesDetailsArray",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/RunningServiceDetails"
        }
      },
      "RunningServicesDetailsArrayEnveloped": {
        "title": "RunningServicesDetailsArrayEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RunningServicesDetailsArray"
          }
        }
      },
      "RunningState": {
        "title": "RunningState",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "STARTED",
          "RETRY",
          "SUCCESS",
          "FAILED",
          "ABORTED"
        ],
        "type": "string",
        "description": "State of execution of a project's computational workflow\n\nSEE StateType for task state"
      },
      "Scheduler": {
        "title": "Scheduler",
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Status",
            "type": "string",
            "description": "The running status of the scheduler"
          },
          "workers": {
            "title": "Workers",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Worker"
            }
          }
        }
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceBootType": {
        "title": "ServiceBootType",
        "enum": [
          "V0",
          "V2"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServiceBuildDetails": {
        "title": "ServiceBuildDetails",
        "required": [
          "build_date",
          "vcs_ref",
          "vcs_url"
        ],
        "type": "object",
        "properties": {
          "build_date": {
            "title": "Build Date",
            "type": "string"
          },
          "vcs_ref": {
            "title": "Vcs Ref",
            "type": "string"
          },
          "vcs_url": {
            "title": "Vcs Url",
            "type": "string"
          }
        }
      },
      "ServiceDockerData": {
        "title": "ServiceDockerData",
        "required": [
          "name",
          "description",
          "key",
          "version",
          "type",
          "authors",
          "contact",
          "inputs",
          "outputs"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "short, human readable name for the node",
            "example": "Fast Counter"
          },
          "thumbnail": {
            "title": "Thumbnail",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "url to the thumbnail",
            "format": "uri"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "human readable description of the purpose of the node"
          },
          "key": {
            "title": "Key",
            "pattern": "^simcore/services/(?P<type>(comp|dynamic|frontend))/(?P<subdir>[a-z0-9][a-z0-9_.-]*/)*(?P<name>[a-z0-9-_]+[a-z0-9])$",
            "type": "string",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "service version number"
          },
          "integration-version": {
            "title": "Integration-Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "integration version number"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceType"
              }
            ],
            "description": "service type"
          },
          "badges": {
            "title": "Badges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            }
          },
          "authors": {
            "title": "Authors",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Author"
            }
          },
          "contact": {
            "title": "Contact",
            "type": "string",
            "description": "email to correspond to the authors about the node",
            "format": "email"
          },
          "inputs": {
            "title": "Inputs",
            "type": "object",
            "description": "definition of the inputs of this node"
          },
          "outputs": {
            "title": "Outputs",
            "type": "object",
            "description": "definition of the outputs of this node"
          },
          "boot-options": {
            "title": "Boot-Options",
            "type": "object",
            "description": "Service defined boot options. These get injected in the service as env variables."
          },
          "min-visible-inputs": {
            "title": "Min-Visible-Inputs",
            "minimum": 0.0,
            "type": "integer",
            "description": "The number of 'data type inputs' displayed by default in the UI. When None all 'data type inputs' are displayed."
          }
        },
        "additionalProperties": false,
        "description": "Static metadata for a service injected in the image labels\n\nThis is one to one with node-meta-v0.0.1.json"
      },
      "ServiceExtras": {
        "title": "ServiceExtras",
        "required": [
          "node_requirements"
        ],
        "type": "object",
        "properties": {
          "node_requirements": {
            "$ref": "#/components/schemas/NodeRequirements"
          },
          "service_build_details": {
            "$ref": "#/components/schemas/ServiceBuildDetails"
          },
          "container_spec": {
            "$ref": "#/components/schemas/ContainerSpec"
          }
        }
      },
      "ServiceExtrasEnveloped": {
        "title": "ServiceExtrasEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ServiceExtras"
          }
        }
      },
      "ServiceInput": {
        "title": "ServiceInput",
        "required": [
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "DEPRECATED: new display order is taken from the item position. This will be removed.",
            "deprecated": true
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "contentSchema": {
            "title": "Contentschema",
            "type": "object",
            "description": "jsonschema of this input/output. Required when type='ref_contentSchema'"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type"
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input port"
      },
      "ServiceOutput": {
        "title": "ServiceOutput",
        "required": [
          "label",
          "description",
          "type"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "DEPRECATED: new display order is taken from the item position. This will be removed.",
            "deprecated": true
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|ref_contentSchema|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "contentSchema": {
            "title": "Contentschema",
            "type": "object",
            "description": "jsonschema of this input/output. Required when type='ref_contentSchema'"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for service input/outputs"
      },
      "ServiceState": {
        "title": "ServiceState",
        "enum": [
          "pending",
          "pulling",
          "starting",
          "running",
          "complete",
          "failed",
          "stopping"
        ],
        "description": "An enumeration."
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "computational",
          "dynamic",
          "frontend",
          "backend"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "ServicesArrayEnveloped": {
        "title": "ServicesArrayEnveloped",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "title": "Data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDockerData"
            }
          }
        }
      },
      "SimpleAuthentication": {
        "title": "SimpleAuthentication",
        "required": [
          "username",
          "password"
        ],
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "enum": [
              "simple"
            ],
            "type": "string",
            "default": "simple"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string",
            "format": "password",
            "writeOnly": true
          }
        },
        "additionalProperties": false
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TaskCounts": {
        "title": "TaskCounts",
        "type": "object",
        "properties": {
          "error": {
            "title": "Error",
            "type": "integer",
            "default": 0
          },
          "memory": {
            "title": "Memory",
            "type": "integer",
            "default": 0
          },
          "executing": {
            "title": "Executing",
            "type": "integer",
            "default": 0
          }
        }
      },
      "TaskLogFileGet": {
        "title": "TaskLogFileGet",
        "required": [
          "task_id"
        ],
        "type": "object",
        "properties": {
          "task_id": {
            "title": "Task Id",
            "type": "string",
            "format": "uuid"
          },
          "download_link": {
            "title": "Download Link",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "description": "Presigned link for log file or None if still not available",
            "format": "uri"
          }
        }
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": true,
            "type": "integer",
            "description": "minimum Height of the textarea",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "UsedResources": {
        "title": "UsedResources",
        "type": "object",
        "additionalProperties": {
          "minimum": 0.0,
          "type": "number"
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "Worker": {
        "title": "Worker",
        "required": [
          "id",
          "name",
          "resources",
          "used_resources",
          "memory_limit",
          "metrics"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "resources": {
            "$ref": "#/components/schemas/DictModel_str__PositiveFloat_"
          },
          "used_resources": {
            "$ref": "#/components/schemas/UsedResources"
          },
          "memory_limit": {
            "title": "Memory Limit",
            "type": "integer"
          },
          "metrics": {
            "$ref": "#/components/schemas/WorkerMetrics"
          }
        }
      },
      "WorkerMetrics": {
        "title": "WorkerMetrics",
        "required": [
          "cpu",
          "memory",
          "num_fds",
          "task_counts"
        ],
        "type": "object",
        "properties": {
          "cpu": {
            "title": "Cpu",
            "type": "number",
            "description": "consumed % of cpus"
          },
          "memory": {
            "title": "Memory",
            "type": "integer",
            "description": "consumed memory"
          },
          "num_fds": {
            "title": "Num Fds",
            "type": "integer",
            "description": "consumed file descriptors"
          },
          "task_counts": {
            "title": "Task Counts",
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCounts"
              }
            ],
            "description": "task details"
          }
        }
      }
    }
  }
}
