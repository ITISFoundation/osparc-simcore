{
  "openapi": "3.1.0",
  "info": {
    "title": "simcore-service-director-v2",
    "description": "Orchestrates the pipeline of services defined by the user",
    "version": "2.3.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "Default server: requests directed to serving url"
    },
    {
      "url": "http://{host}:{port}",
      "description": "Development server: can configure any base url",
      "variables": {
        "host": {
          "default": "127.0.0.1"
        },
        "port": {
          "default": "8000"
        }
      }
    }
  ],
  "paths": {
    "/": {
      "get": {
        "summary": "Check Service Health",
        "operationId": "check_service_health__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheckGet"
                }
              }
            }
          }
        }
      }
    },
    "/meta": {
      "get": {
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata_meta_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseMeta"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Create and optionally start a new computation",
        "operationId": "create_computation_v2_computations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "404": {
            "description": "Project or pricing details not found"
          },
          "406": {
            "description": "Cluster not found"
          },
          "503": {
            "description": "Service not available"
          },
          "422": {
            "description": "Configuration error"
          },
          "402": {
            "description": "Payment required"
          },
          "409": {
            "description": "Project already started"
          }
        }
      }
    },
    "/v2/computations/{project_id}": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Returns a computation pipeline state",
        "operationId": "get_computation_v2_computations__project_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "computations"
        ],
        "summary": "Deletes a computation pipeline",
        "operationId": "delete_computation_v2_computations__project_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationDelete"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}:stop": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Stops a computation pipeline",
        "operationId": "stop_computation_v2_computations__project_id__stop_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComputationStop"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputationGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/-/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns download links to log-files of each task in a computation.\nEach log is only available when the corresponding task is done",
        "operationId": "get_all_tasks_log_files_v2_computations__project_id__tasks___logfile_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TaskLogFileGet"
                  },
                  "type": "array",
                  "title": "Response Get All Tasks Log Files V2 Computations  Project Id  Tasks   Logfile Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/{node_uuid}/logfile": {
      "get": {
        "tags": [
          "computations"
        ],
        "summary": "Gets computation task logs file after is done",
        "description": "Returns a link to download logs file of a give task.\nThe log is only available when the task is done",
        "operationId": "get_task_log_file_v2_computations__project_id__tasks__node_uuid__logfile_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskLogFileGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/computations/{project_id}/tasks/-/outputs:batchGet": {
      "post": {
        "tags": [
          "computations"
        ],
        "summary": "Gets all outputs for selected tasks",
        "operationId": "get_batch_tasks_outputs_v2_computations__project_id__tasks___outputs_batchGet_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TasksSelection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksOutputs"
                }
              }
            }
          },
          "404": {
            "description": "Cannot find computation or the tasks in it"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "returns a list of running interactive services filtered by user_id and/or project_idboth legacy (director-v0) and modern (director-v2)",
        "operationId": "list_tracked_dynamic_services_v2_dynamic_services_get",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                  },
                  "type": "array",
                  "title": "Response List Tracked Dynamic Services V2 Dynamic Services Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "creates & starts the dynamic service",
        "operationId": "create_dynamic_service_v2_dynamic_services_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Dynamic-Sidecar-Request-Dns"
            },
            "name": "x-dynamic-sidecar-request-dns",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Dynamic-Sidecar-Request-Scheme"
            },
            "name": "x-dynamic-sidecar-request-scheme",
            "in": "header"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Simcore-User-Agent"
            },
            "name": "x-simcore-user-agent",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DynamicServiceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "assembles the status for the dynamic-sidecar",
        "operationId": "get_dynamic_sidecar_status_v2_dynamic_services__node_uuid__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningDynamicServiceDetails"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dynamic services"
        ],
        "summary": "stops previously spawned dynamic-sidecar",
        "operationId": "stop_dynamic_service_v2_dynamic_services__node_uuid__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Can Save",
              "default": true
            },
            "name": "can_save",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:retrieve": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's retrieve endpoint with optional port_keys",
        "operationId": "service_retrieve_data_on_ports_v2_dynamic_services__node_uuid__retrieve_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetrieveDataIn"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetrieveDataOutEnveloped"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/{node_uuid}:restart": {
      "post": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Calls the dynamic service's restart containers endpoint",
        "operationId": "service_restart_containers_v2_dynamic_services__node_uuid__restart_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/projects/{project_id}/-/networks": {
      "patch": {
        "tags": [
          "dynamic services"
        ],
        "summary": "Updates the project networks according to the current project's workbench",
        "operationId": "update_projects_networks_v2_dynamic_services_projects__project_id____networks_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_services/projects/{project_id}/inactivity": {
      "get": {
        "tags": [
          "dynamic services"
        ],
        "summary": "returns if the project is inactive",
        "operationId": "get_project_inactivity_v2_dynamic_services_projects__project_id__inactivity_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Project Id"
            },
            "name": "project_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0.0,
              "title": "Max Inactivity Seconds"
            },
            "name": "max_inactivity_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProjectInactivityResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Lists clusters for user",
        "operationId": "list_clusters_v2_clusters_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ClusterGet"
                  },
                  "type": "array",
                  "title": "Response List Clusters V2 Clusters Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Create a new cluster for a user",
        "operationId": "create_cluster_v2_clusters_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the default cluster",
        "operationId": "get_default_cluster_v2_clusters_default_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Get one cluster for user",
        "operationId": "get_cluster_v2_clusters__cluster_id__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cluster Id"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "clusters"
        ],
        "summary": "Remove a cluster for user",
        "operationId": "delete_cluster_v2_clusters__cluster_id__delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cluster Id"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "clusters"
        ],
        "summary": "Modify a cluster for user",
        "operationId": "update_cluster_v2_clusters__cluster_id__patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cluster Id"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterPatch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default/details": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the cluster details",
        "operationId": "get_default_cluster_details_v2_clusters_default_details_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterDetailsGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}/details": {
      "get": {
        "tags": [
          "clusters"
        ],
        "summary": "Returns the cluster details",
        "operationId": "get_cluster_details_v2_clusters__cluster_id__details_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cluster Id"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterDetailsGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_cluster_connection_v2_clusters_ping_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterPing"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/clusters/default:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_default_cluster_connection_v2_clusters_default_ping_post",
        "responses": {
          "204": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/v2/clusters/{cluster_id}:ping": {
      "post": {
        "tags": [
          "clusters"
        ],
        "summary": "Test cluster connection",
        "operationId": "test_specific_cluster_connection_v2_clusters__cluster_id__ping_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "title": "Cluster Id"
            },
            "name": "cluster_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            },
            "name": "user_id",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/observation": {
      "patch": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Enable/disable observation of the service",
        "operationId": "update_service_observation_v2_dynamic_scheduler_services__node_uuid__observation_patch",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObservationItem"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/containers": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's user services",
        "operationId": "delete_service_containers_v2_dynamic_scheduler_services__node_uuid__containers_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Delete Service Containers V2 Dynamic Scheduler Services  Node Uuid  Containers Delete"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/state": {
      "get": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Returns the internals of the scheduler for the given service",
        "operationId": "get_service_state_v2_dynamic_scheduler_services__node_uuid__state_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchedulerData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/state:save": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the saving of the state for the service",
        "operationId": "save_service_state_v2_dynamic_scheduler_services__node_uuid__state_save_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Save Service State V2 Dynamic Scheduler Services  Node Uuid  State Save Post"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/outputs:push": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Starts the pushing of the outputs for the service",
        "operationId": "push_service_outputs_v2_dynamic_scheduler_services__node_uuid__outputs_push_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Push Service Outputs V2 Dynamic Scheduler Services  Node Uuid  Outputs Push Post"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/docker-resources": {
      "delete": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Removes the service's sidecar, proxy and docker networks & volumes",
        "operationId": "delete_service_docker_resources_v2_dynamic_scheduler_services__node_uuid__docker_resources_delete",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Delete Service Docker Resources V2 Dynamic Scheduler Services  Node Uuid  Docker Resources Delete"
                }
              }
            }
          },
          "409": {
            "description": "Task already running, cannot start a new one"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v2/dynamic_scheduler/services/{node_uuid}/disk/reserved:free": {
      "post": {
        "tags": [
          "dynamic scheduler"
        ],
        "summary": "Free up reserved disk space",
        "operationId": "free_reserved_disk_space_v2_dynamic_scheduler_services__node_uuid__disk_reserved_free_post",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Node Uuid"
            },
            "name": "node_uuid",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BaseMeta": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Version"
          },
          "released": {
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "type": "object",
            "title": "Released",
            "description": "Maps every route's path tag with a released version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version"
        ],
        "title": "BaseMeta",
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          }
        }
      },
      "BootMode": {
        "type": "string",
        "enum": [
          "CPU",
          "GPU",
          "MPI"
        ],
        "title": "BootMode",
        "description": "An enumeration."
      },
      "CallbacksMapping": {
        "properties": {
          "metrics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserServiceCommand"
              }
            ],
            "title": "Metrics",
            "description": "command to recover prometheus metrics from a specific user service"
          },
          "before_shutdown": {
            "items": {
              "$ref": "#/components/schemas/UserServiceCommand"
            },
            "type": "array",
            "title": "Before Shutdown",
            "description": "commands to run before shutting down the user servicescommands get executed first to last, multiple commands for the sameuser services are allowed"
          },
          "inactivity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserServiceCommand"
              }
            ],
            "title": "Inactivity",
            "description": "command used to figure out for how much time the user service(s) were inactive for"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "CallbacksMapping"
      },
      "ClusterAccessRights": {
        "properties": {
          "read": {
            "type": "boolean",
            "title": "Read",
            "description": "allows to run pipelines on that cluster"
          },
          "write": {
            "type": "boolean",
            "title": "Write",
            "description": "allows to modify the cluster"
          },
          "delete": {
            "type": "boolean",
            "title": "Delete",
            "description": "allows to delete a cluster"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "read",
          "write",
          "delete"
        ],
        "title": "ClusterAccessRights"
      },
      "ClusterCreate": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The human readable name of the cluster"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterTypeInModel"
          },
          "owner": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Owner",
            "minimum": 0
          },
          "thumbnail": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Thumbnail",
            "description": "url to the image describing this cluster"
          },
          "endpoint": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Endpoint"
          },
          "authentication": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              }
            ],
            "title": "Authentication"
          },
          "accessRights": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            },
            "type": "object",
            "title": "Accessrights"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "type",
          "endpoint",
          "authentication"
        ],
        "title": "ClusterCreate"
      },
      "ClusterDetailsGet": {
        "properties": {
          "scheduler": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Scheduler"
              }
            ],
            "title": "Scheduler",
            "description": "This contains dask scheduler information given by the underlying dask library"
          },
          "dashboard_link": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Dashboard Link",
            "description": "Link to this scheduler's dashboard"
          }
        },
        "type": "object",
        "required": [
          "scheduler",
          "dashboard_link"
        ],
        "title": "ClusterDetailsGet"
      },
      "ClusterGet": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The human readable name of the cluster"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterTypeInModel"
          },
          "owner": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Owner",
            "minimum": 0
          },
          "thumbnail": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Thumbnail",
            "description": "url to the image describing this cluster"
          },
          "endpoint": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Endpoint"
          },
          "authentication": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              },
              {
                "$ref": "#/components/schemas/NoAuthentication"
              },
              {
                "$ref": "#/components/schemas/TLSAuthentication"
              }
            ],
            "title": "Authentication",
            "description": "Dask gateway authentication"
          },
          "accessRights": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            },
            "type": "object",
            "title": "Accessrights"
          },
          "id": {
            "type": "integer",
            "minimum": 0,
            "title": "Id",
            "description": "The cluster ID"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "type",
          "owner",
          "endpoint",
          "authentication",
          "id"
        ],
        "title": "ClusterGet"
      },
      "ClusterPatch": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "type": {
            "$ref": "#/components/schemas/ClusterTypeInModel"
          },
          "owner": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Owner",
            "minimum": 0
          },
          "thumbnail": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Thumbnail"
          },
          "endpoint": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Endpoint"
          },
          "authentication": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              }
            ],
            "title": "Authentication"
          },
          "accessRights": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterAccessRights"
            },
            "type": "object",
            "title": "Accessrights"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "ClusterPatch"
      },
      "ClusterPing": {
        "properties": {
          "endpoint": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Endpoint"
          },
          "authentication": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SimpleAuthentication"
              },
              {
                "$ref": "#/components/schemas/KerberosAuthentication"
              },
              {
                "$ref": "#/components/schemas/JupyterHubTokenAuthentication"
              },
              {
                "$ref": "#/components/schemas/NoAuthentication"
              },
              {
                "$ref": "#/components/schemas/TLSAuthentication"
              }
            ],
            "title": "Authentication",
            "description": "Dask gateway authentication"
          }
        },
        "type": "object",
        "required": [
          "endpoint",
          "authentication"
        ],
        "title": "ClusterPing"
      },
      "ClusterTypeInModel": {
        "type": "string",
        "enum": [
          "AWS",
          "ON_PREMISE",
          "ON_DEMAND"
        ],
        "title": "ClusterTypeInModel",
        "description": "An enumeration."
      },
      "ComputationCreate": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "start_pipeline": {
            "type": "boolean",
            "title": "Start Pipeline",
            "description": "if True the computation pipeline will start right away",
            "default": false
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "subgraph": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Subgraph",
            "description": "An optional set of nodes that must be executed, if empty the whole pipeline is executed"
          },
          "force_restart": {
            "type": "boolean",
            "title": "Force Restart",
            "description": "if True will force re-running all dependent nodes",
            "default": false
          },
          "cluster_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Cluster Id",
            "description": "the computation shall use the cluster described by its id, 0 is the default cluster"
          },
          "simcore_user_agent": {
            "type": "string",
            "title": "Simcore User Agent",
            "default": ""
          },
          "use_on_demand_clusters": {
            "type": "boolean",
            "title": "Use On Demand Clusters",
            "description": "if True, a cluster will be created as necessary (wallet_id cannot be None, and cluster_id must be None)",
            "default": false
          },
          "wallet_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletInfo"
              }
            ],
            "title": "Wallet Info",
            "description": "contains information about the wallet used to bill the running service"
          }
        },
        "type": "object",
        "required": [
          "user_id",
          "project_id",
          "product_name"
        ],
        "title": "ComputationCreate"
      },
      "ComputationDelete": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "force": {
            "type": "boolean",
            "title": "Force",
            "description": "if True then the pipeline will be removed even if it is running",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "ComputationDelete"
      },
      "ComputationGet": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "the id of the computation task"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the state of the computational task"
          },
          "result": {
            "type": "string",
            "title": "Result",
            "description": "the result of the computational task"
          },
          "pipeline_details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineDetails"
              }
            ],
            "title": "Pipeline Details",
            "description": "the details of the generated pipeline"
          },
          "iteration": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Iteration",
            "description": "the iteration id of the computation task (none if no task ran yet)",
            "minimum": 0
          },
          "cluster_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Cluster Id",
            "description": "the cluster on which the computaional task runs/ran (none if no task ran yet)"
          },
          "started": {
            "type": "string",
            "format": "date-time",
            "title": "Started",
            "description": "the timestamp when the computation was started or None if not started yet"
          },
          "stopped": {
            "type": "string",
            "format": "date-time",
            "title": "Stopped",
            "description": "the timestamp when the computation was stopped or None if not started nor stopped yet"
          },
          "submitted": {
            "type": "string",
            "format": "date-time",
            "title": "Submitted",
            "description": "task last modification timestamp or None if the there is no task"
          },
          "url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Url",
            "description": "the link where to get the status of the task"
          },
          "stop_url": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Stop Url",
            "description": "the link where to stop the task"
          }
        },
        "type": "object",
        "required": [
          "id",
          "state",
          "pipeline_details",
          "iteration",
          "cluster_id",
          "started",
          "stopped",
          "submitted",
          "url"
        ],
        "title": "ComputationGet"
      },
      "ComputationStop": {
        "properties": {
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "ComputationStop"
      },
      "ContainerState": {
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status2"
              }
            ],
            "description": "String representation of the container state. Can be one of \"created\",\n\"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\".\n",
            "example": "running"
          },
          "Running": {
            "type": "boolean",
            "title": "Running",
            "description": "Whether this container is running.\n\nNote that a running container can be _paused_. The `Running` and `Paused`\nbooleans are not mutually exclusive:\n\nWhen pausing a container (on Linux), the freezer cgroup is used to suspend\nall processes in the container. Freezing the process requires the process to\nbe running. As a result, paused containers are both `Running` _and_ `Paused`.\n\nUse the `Status` field instead to determine if a container's state is \"running\".\n",
            "example": true
          },
          "Paused": {
            "type": "boolean",
            "title": "Paused",
            "description": "Whether this container is paused.",
            "example": false
          },
          "Restarting": {
            "type": "boolean",
            "title": "Restarting",
            "description": "Whether this container is restarting.",
            "example": false
          },
          "OOMKilled": {
            "type": "boolean",
            "title": "Oomkilled",
            "description": "Whether this container has been killed because it ran out of memory.\n",
            "example": false
          },
          "Dead": {
            "type": "boolean",
            "title": "Dead",
            "example": false
          },
          "Pid": {
            "type": "integer",
            "title": "Pid",
            "description": "The process ID of this container",
            "example": 1234
          },
          "ExitCode": {
            "type": "integer",
            "title": "Exitcode",
            "description": "The last exit code of this container",
            "example": 0
          },
          "Error": {
            "type": "string",
            "title": "Error"
          },
          "StartedAt": {
            "type": "string",
            "title": "Startedat",
            "description": "The time when this container was last started.",
            "example": "2020-01-06T09:06:59.461876391Z"
          },
          "FinishedAt": {
            "type": "string",
            "title": "Finishedat",
            "description": "The time when this container last exited.",
            "example": "2020-01-06T09:07:59.461876391Z"
          },
          "Health": {
            "$ref": "#/components/schemas/Health"
          }
        },
        "type": "object",
        "title": "ContainerState",
        "description": "    ContainerState stores container's running state. It's part of ContainerJSONBase\nand will be returned by the \"inspect\" command."
      },
      "DNSResolver": {
        "properties": {
          "address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OsparcVariableIdentifier"
              },
              {
                "type": "string"
              }
            ],
            "title": "Address",
            "description": "this is not an url address is derived from IP address"
          },
          "port": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "$ref": "#/components/schemas/OsparcVariableIdentifier"
              }
            ],
            "title": "Port"
          }
        },
        "type": "object",
        "required": [
          "address",
          "port"
        ],
        "title": "DNSResolver"
      },
      "DelayedExceptionHandler": {
        "properties": {
          "delay_for": {
            "type": "number",
            "minimum": 0.0,
            "title": "Delay For",
            "description": "interval of time during which exceptions are ignored"
          }
        },
        "type": "object",
        "required": [
          "delay_for"
        ],
        "title": "DelayedExceptionHandler",
        "description": "Allows to ignore an exception for an established\nperiod of time after which it is raised.\n\nThis use case most commonly occurs when dealing with\nexternal systems.\nFor example, due to poor network  performance or\nnetwork congestion, an external system which is healthy,\ncurrently is not reachable any longer.\nA possible solution:\n- ignore exceptions for an interval in which the\n    system usually is reachable again by not\n    raising the error\n- if the error persist give up and raise it\n\nExample code usage:\n\n    delayed_handler_external_service = DelayedExceptionHandler(\n        delay_for=60\n    )\n    try:\n        function_called_periodically_accessing_external_service()\n    except TargetException as e:\n        delayed_handler_external_service.try_to_raise(e)\n    else:\n        delayed_handler_external_service.else_reset()"
      },
      "DictModel_str__PositiveFloat_": {
        "additionalProperties": {
          "type": "number",
          "exclusiveMinimum": true,
          "minimum": 0.0
        },
        "type": "object",
        "title": "DictModel[str, PositiveFloat]"
      },
      "DockerContainerInspect": {
        "properties": {
          "container_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContainerState"
              }
            ],
            "title": "Container State",
            "description": "current state of container"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "docker name of the container"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "docker id of the container"
          }
        },
        "type": "object",
        "required": [
          "container_state",
          "name",
          "id"
        ],
        "title": "DockerContainerInspect"
      },
      "DynamicServiceCreate": {
        "properties": {
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_basepath": {
            "type": "string",
            "format": "path",
            "title": "Service Basepath",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint."
          },
          "service_resources": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageResources"
            },
            "type": "object",
            "title": "Service Resources"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Current product name"
          },
          "can_save": {
            "type": "boolean",
            "title": "Can Save",
            "description": "the service data must be saved when closing"
          },
          "wallet_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletInfo"
              }
            ],
            "title": "Wallet Info",
            "description": "contains information about the wallet used to bill the running service"
          },
          "pricing_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PricingInfo"
              }
            ],
            "title": "Pricing Info",
            "description": "contains pricing information (ex. pricing plan and unit ids)"
          },
          "hardware_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HardwareInfo"
              }
            ],
            "title": "Hardware Info",
            "description": "contains harware information (ex. aws_ec2_instances)"
          }
        },
        "type": "object",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_resources",
          "product_name",
          "can_save"
        ],
        "title": "DynamicServiceCreate",
        "example": {
          "key": "simcore/services/dynamic/3dviewer",
          "version": "2.4.5",
          "user_id": 234,
          "project_id": "dd1d04d9-d704-4f7e-8f0f-1ca60cc771fe",
          "node_uuid": "75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "basepath": "/x/75c7f3f4-18f9-4678-8610-54a2ade78eaa",
          "product_name": "osparc",
          "can_save": true,
          "service_resources": {
            "container": {
              "image": "simcore/services/dynamic/jupyter-math:2.0.5",
              "resources": {
                "CPU": {
                  "limit": 0.1,
                  "reservation": 0.1
                },
                "RAM": {
                  "limit": 2147483648,
                  "reservation": 2147483648
                }
              },
              "boot_modes": [
                "CPU"
              ]
            }
          },
          "wallet_info": {
            "wallet_id": 1,
            "wallet_name": "My Wallet",
            "wallet_credit_amount": 10
          },
          "pricing_info": {
            "pricing_plan_id": 1,
            "pricing_unit_id": 1,
            "pricing_unit_cost_id": 1
          },
          "hardware_info": {
            "aws_ec2_instances": [
              "c6a.4xlarge"
            ]
          }
        }
      },
      "DynamicSidecar": {
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/simcore_service_director_v2__models__dynamic_services_scheduler__Status"
              }
            ],
            "title": "Status",
            "description": "status of the service sidecar also with additional information",
            "default": {
              "current": "ok",
              "info": ""
            }
          },
          "is_ready": {
            "type": "boolean",
            "title": "Is Ready",
            "default": false,
            "scription": "is True while the health check on the dynamic-sidecar is responding. Meaning that the dynamic-sidecar is reachable and can accept requests"
          },
          "was_compose_spec_submitted": {
            "type": "boolean",
            "title": "Was Compose Spec Submitted",
            "description": "if the docker-compose spec was already submitted this fields is True",
            "default": false
          },
          "containers_inspect": {
            "items": {
              "$ref": "#/components/schemas/DockerContainerInspect"
            },
            "type": "array",
            "title": "Containers Inspect",
            "default": [],
            "scription": "docker inspect results from all the container ran at regular intervals"
          },
          "was_dynamic_sidecar_started": {
            "type": "boolean",
            "title": "Was Dynamic Sidecar Started",
            "default": false
          },
          "is_healthy": {
            "type": "boolean",
            "title": "Is Healthy",
            "default": false
          },
          "were_containers_created": {
            "type": "boolean",
            "title": "Were Containers Created",
            "description": "when True no longer will the Docker api be used to check if the services were started",
            "default": false
          },
          "is_project_network_attached": {
            "type": "boolean",
            "title": "Is Project Network Attached",
            "description": "When True, all containers were in running state and project networks were attached. Waiting for the container sto be in running state guarantees all containers have been created",
            "default": false
          },
          "is_service_environment_ready": {
            "type": "boolean",
            "title": "Is Service Environment Ready",
            "description": "True when the environment setup required by the dynamic-sidecars created services was completed.Example: nodeports data downloaded, globally shared service data fetched, etc..",
            "default": false
          },
          "service_removal_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceRemovalState"
              }
            ],
            "title": "Service Removal State",
            "description": "stores information used during service removal from the dynamic-sidecar scheduler"
          },
          "wait_for_manual_intervention_after_error": {
            "type": "boolean",
            "title": "Wait For Manual Intervention After Error",
            "description": "Marks the sidecar as untouchable since there was an error and important data might be lost. awaits for manual intervention.",
            "default": false
          },
          "wait_for_manual_intervention_logged": {
            "type": "boolean",
            "title": "Wait For Manual Intervention Logged",
            "description": "True if a relative message was logged",
            "default": false
          },
          "were_state_and_outputs_saved": {
            "type": "boolean",
            "title": "Were State And Outputs Saved",
            "description": "set True if the dy-sidecar saves the state and uploads the outputs",
            "default": false
          },
          "dynamic_sidecar_id": {
            "type": "string",
            "maxLength": 25,
            "pattern": "[A-Za-z0-9]{25}",
            "title": "Dynamic Sidecar Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "dynamic_sidecar_network_id": {
            "type": "string",
            "maxLength": 25,
            "pattern": "[A-Za-z0-9]{25}",
            "title": "Dynamic Sidecar Network Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "swarm_network_id": {
            "type": "string",
            "maxLength": 25,
            "pattern": "[A-Za-z0-9]{25}",
            "title": "Swarm Network Id",
            "description": "returned by the docker engine; used for starting the proxy"
          },
          "swarm_network_name": {
            "type": "string",
            "title": "Swarm Network Name",
            "description": "used for starting the proxy"
          },
          "docker_node_id": {
            "type": "string",
            "title": "Docker Node Id",
            "description": "contains node id of the docker node where all services and created containers are started"
          },
          "inspect_error_handler": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DelayedExceptionHandler"
              }
            ],
            "title": "Inspect Error Handler",
            "description": "Set when the dy-sidecar can no longer be reached by the director-v2. If it will be possible to reach the dy-sidecar again, this value will be set to None.",
            "default": {
              "delay_for": 0.0
            }
          }
        },
        "type": "object",
        "title": "DynamicSidecar"
      },
      "DynamicSidecarStatus": {
        "type": "string",
        "enum": [
          "ok",
          "failing"
        ],
        "title": "DynamicSidecarStatus",
        "description": "An enumeration."
      },
      "GetProjectInactivityResponse": {
        "properties": {
          "is_inactive": {
            "type": "boolean",
            "title": "Is Inactive"
          }
        },
        "type": "object",
        "required": [
          "is_inactive"
        ],
        "title": "GetProjectInactivityResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Validation errors"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HardwareInfo": {
        "properties": {
          "aws_ec2_instances": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Aws Ec2 Instances"
          }
        },
        "type": "object",
        "required": [
          "aws_ec2_instances"
        ],
        "title": "HardwareInfo"
      },
      "Health": {
        "properties": {
          "Status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/models_library__generated_models__docker_rest_api__Status"
              }
            ],
            "description": "Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n- \"none\"      Indicates there is no healthcheck\n- \"starting\"  Starting indicates that the container is not yet ready\n- \"healthy\"   Healthy indicates that the container is running correctly\n- \"unhealthy\" Unhealthy indicates that the container has a problem\n",
            "example": "healthy"
          },
          "FailingStreak": {
            "type": "integer",
            "title": "Failingstreak",
            "description": "FailingStreak is the number of consecutive failures",
            "example": 0
          },
          "Log": {
            "items": {
              "$ref": "#/components/schemas/HealthcheckResult"
            },
            "type": "array",
            "title": "Log",
            "description": "Log contains the last few results (oldest first)\n"
          }
        },
        "type": "object",
        "title": "Health",
        "description": "Health stores information about the container's healthcheck results."
      },
      "HealthCheckGet": {
        "properties": {
          "timestamp": {
            "type": "string",
            "title": "Timestamp"
          }
        },
        "type": "object",
        "required": [
          "timestamp"
        ],
        "title": "HealthCheckGet",
        "example": {
          "timestamp": "simcore_service_directorv2.api.routes.health@2023-07-03T12:59:12.024551+00:00"
        }
      },
      "HealthcheckResult": {
        "properties": {
          "Start": {
            "type": "string",
            "format": "date-time",
            "title": "Start",
            "description": "Date and time at which this check started in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
            "example": "2020-01-04T10:44:24.496525531Z"
          },
          "End": {
            "type": "string",
            "title": "End",
            "description": "Date and time at which this check ended in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
            "example": "2020-01-04T10:45:21.364524523Z"
          },
          "ExitCode": {
            "type": "integer",
            "title": "Exitcode",
            "description": "ExitCode meanings:\n\n- `0` healthy\n- `1` unhealthy\n- `2` reserved (considered unhealthy)\n- other values: error running probe\n",
            "example": 0
          },
          "Output": {
            "type": "string",
            "title": "Output",
            "description": "Output from last check"
          }
        },
        "type": "object",
        "title": "HealthcheckResult",
        "description": "HealthcheckResult stores information about a single run of a healthcheck probe"
      },
      "ImageResources": {
        "properties": {
          "image": {
            "type": "string",
            "pattern": "^(?:([a-z0-9-]+(?:\\.[a-z0-9-]+)+(?::\\d+)?|[a-z0-9-]+:\\d+)/)?((?:[a-z0-9][a-z0-9_.-]*/)*[a-z0-9-_]+[a-z0-9])(?::([\\w][\\w.-]{0,127}))?(\\@sha256:[a-fA-F0-9]{32,64})?$",
            "title": "Image",
            "description": "Used by the frontend to provide a context for the users.Services with a docker-compose spec will have multiple entries.Using the `image:version` instead of the docker-compose spec is more helpful for the end user."
          },
          "resources": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceValue"
            },
            "type": "object",
            "title": "Resources"
          },
          "boot_modes": {
            "items": {
              "$ref": "#/components/schemas/BootMode"
            },
            "type": "array",
            "description": "describe how a service shall be booted, using CPU, MPI, openMP or GPU",
            "default": [
              "CPU"
            ]
          }
        },
        "type": "object",
        "required": [
          "image",
          "resources"
        ],
        "title": "ImageResources",
        "example": {
          "image": "simcore/service/dynamic/pretty-intense:1.0.0",
          "resources": {
            "CPU": {
              "limit": 4,
              "reservation": 0.1
            },
            "RAM": {
              "limit": 103079215104,
              "reservation": 536870912
            },
            "VRAM": {
              "limit": 1,
              "reservation": 1
            },
            "AIRAM": {
              "limit": 1,
              "reservation": 1
            },
            "ANY_resource": {
              "limit": "some_value",
              "reservation": "some_value"
            }
          }
        }
      },
      "JupyterHubTokenAuthentication": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "jupyterhub"
            ],
            "title": "Type",
            "default": "jupyterhub"
          },
          "api_token": {
            "type": "string",
            "title": "Api Token"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "api_token"
        ],
        "title": "JupyterHubTokenAuthentication"
      },
      "KerberosAuthentication": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "kerberos"
            ],
            "title": "Type",
            "default": "kerberos"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "KerberosAuthentication"
      },
      "NATRule": {
        "properties": {
          "hostname": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OsparcVariableIdentifier"
              },
              {
                "type": "string"
              }
            ],
            "title": "Hostname"
          },
          "tcp_ports": {
            "items": {
              "anyOf": [
                {
                  "type": "integer",
                  "exclusiveMaximum": true,
                  "exclusiveMinimum": true,
                  "maximum": 65535,
                  "minimum": 0
                },
                {
                  "$ref": "#/components/schemas/OsparcVariableIdentifier"
                },
                {
                  "$ref": "#/components/schemas/_PortRange"
                }
              ]
            },
            "type": "array",
            "title": "Tcp Ports"
          },
          "dns_resolver": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DNSResolver"
              }
            ],
            "title": "Dns Resolver",
            "description": "specify a DNS resolver address and port"
          }
        },
        "type": "object",
        "required": [
          "hostname",
          "tcp_ports"
        ],
        "title": "NATRule",
        "description": "Content of \"simcore.service.containers-allowed-outgoing-permit-list\" label"
      },
      "NoAuthentication": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "none"
            ],
            "title": "Type",
            "default": "none"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "NoAuthentication"
      },
      "NodeState": {
        "properties": {
          "modified": {
            "type": "boolean",
            "title": "Modified",
            "description": "true if the node's outputs need to be re-computed",
            "default": true
          },
          "dependencies": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Dependencies",
            "description": "contains the node inputs dependencies if they need to be computed first"
          },
          "currentStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RunningState"
              }
            ],
            "description": "the node's current state",
            "default": "NOT_STARTED"
          },
          "progress": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Progress",
            "description": "current progress of the task if available (None if not started or not a computational task)",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "NodeState"
      },
      "ObservationItem": {
        "properties": {
          "is_disabled": {
            "type": "boolean",
            "title": "Is Disabled"
          }
        },
        "type": "object",
        "required": [
          "is_disabled"
        ],
        "title": "ObservationItem"
      },
      "OsparcVariableIdentifier": {
        "type": "string",
        "pattern": "^\\${1,2}(?:\\{)?OSPARC_VARIABLE_[A-Za-z0-9_]+(?:\\})?(:-.+)?$",
        "title": "OsparcVariableIdentifier"
      },
      "PathMappingsLabel": {
        "properties": {
          "inputs_path": {
            "type": "string",
            "format": "path",
            "title": "Inputs Path",
            "description": "folder path where the service expects all the inputs"
          },
          "outputs_path": {
            "type": "string",
            "format": "path",
            "title": "Outputs Path",
            "description": "folder path where the service is expected to provide all its outputs"
          },
          "state_paths": {
            "items": {
              "type": "string",
              "format": "path"
            },
            "type": "array",
            "title": "State Paths",
            "description": "optional list of paths which contents need to be persisted",
            "default": []
          },
          "state_exclude": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "State Exclude",
            "description": "optional list unix shell rules used to exclude files from the state"
          },
          "volume_size_limits": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Volume Size Limits",
            "description": "Apply volume size limits to entries in: `inputs_path`, `outputs_path` and `state_paths`. Limits must be parsable by Pydantic's ByteSize."
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "inputs_path",
          "outputs_path"
        ],
        "title": "PathMappingsLabel",
        "description": "Content of \"simcore.service.paths-mapping\" label"
      },
      "PipelineDetails": {
        "properties": {
          "adjacency_list": {
            "additionalProperties": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Adjacency List",
            "description": "The adjacency list of the current pipeline in terms of {NodeID: [successor NodeID]}"
          },
          "progress": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Progress",
            "description": "the progress of the pipeline (None if there are no computational tasks)"
          },
          "node_states": {
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeState"
            },
            "type": "object",
            "title": "Node States",
            "description": "The states of each of the computational nodes in the pipeline"
          }
        },
        "type": "object",
        "required": [
          "adjacency_list",
          "progress",
          "node_states"
        ],
        "title": "PipelineDetails"
      },
      "PricingInfo": {
        "properties": {
          "pricing_plan_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Plan Id",
            "minimum": 0
          },
          "pricing_unit_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Unit Id",
            "minimum": 0
          },
          "pricing_unit_cost_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Unit Cost Id",
            "minimum": 0
          }
        },
        "type": "object",
        "required": [
          "pricing_plan_id",
          "pricing_unit_id",
          "pricing_unit_cost_id"
        ],
        "title": "PricingInfo"
      },
      "ResourceValue": {
        "properties": {
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Limit"
          },
          "reservation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "title": "Reservation"
          }
        },
        "type": "object",
        "required": [
          "limit",
          "reservation"
        ],
        "title": "ResourceValue"
      },
      "RestartPolicy": {
        "type": "string",
        "enum": [
          "no-restart",
          "on-inputs-downloaded"
        ],
        "title": "RestartPolicy",
        "description": "Content of \"simcore.service.restart-policy\" label"
      },
      "RetrieveDataIn": {
        "properties": {
          "port_keys": {
            "items": {
              "type": "string",
              "pattern": "^[-_a-zA-Z0-9]+$"
            },
            "type": "array",
            "title": "Port Keys",
            "description": "The port keys to retrieve data from"
          }
        },
        "type": "object",
        "required": [
          "port_keys"
        ],
        "title": "RetrieveDataIn"
      },
      "RetrieveDataOut": {
        "properties": {
          "size_bytes": {
            "type": "integer",
            "title": "Size Bytes",
            "description": "The amount of data transferred by the retrieve call"
          }
        },
        "type": "object",
        "required": [
          "size_bytes"
        ],
        "title": "RetrieveDataOut"
      },
      "RetrieveDataOutEnveloped": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/RetrieveDataOut"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "RetrieveDataOutEnveloped"
      },
      "RunningDynamicServiceDetails": {
        "properties": {
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_basepath": {
            "type": "string",
            "format": "path",
            "title": "Service Basepath",
            "description": "predefined path where the dynamic service should be served. If empty, the service shall use the root endpoint."
          },
          "boot_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceBootType"
              }
            ],
            "description": "Describes how the dynamic services was started (legacy=V0, modern=V2).Since legacy services do not have this label it defaults to V0.",
            "default": "V0"
          },
          "service_host": {
            "type": "string",
            "title": "Service Host",
            "description": "the service swarm internal host name"
          },
          "service_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Service Port",
            "description": "the service swarm internal port",
            "maximum": 65535,
            "minimum": 0
          },
          "published_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Published Port",
            "description": "the service swarm published port if any",
            "deprecated": true,
            "maximum": 65535,
            "minimum": 0
          },
          "entry_point": {
            "type": "string",
            "title": "Entry Point",
            "description": "if empty the service entrypoint is on the root endpoint.",
            "deprecated": true
          },
          "service_state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceState"
              }
            ],
            "description": "service current state"
          },
          "service_message": {
            "type": "string",
            "title": "Service Message",
            "description": "additional information related to service state"
          }
        },
        "type": "object",
        "required": [
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_host",
          "service_port",
          "service_state"
        ],
        "title": "RunningDynamicServiceDetails"
      },
      "RunningState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "WAITING_FOR_RESOURCES",
          "STARTED",
          "SUCCESS",
          "FAILED",
          "ABORTED",
          "WAITING_FOR_CLUSTER"
        ],
        "title": "RunningState",
        "description": "State of execution of a project's computational workflow\n\nSEE StateType for task state"
      },
      "Scheduler": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status",
            "description": "The running status of the scheduler"
          },
          "workers": {
            "additionalProperties": {
              "$ref": "#/components/schemas/Worker"
            },
            "type": "object",
            "title": "Workers"
          }
        },
        "type": "object",
        "required": [
          "status"
        ],
        "title": "Scheduler"
      },
      "SchedulerData": {
        "properties": {
          "paths_mapping": {
            "$ref": "#/components/schemas/PathMappingsLabel"
          },
          "simcore.service.compose-spec": {
            "type": "object",
            "title": "Simcore.Service.Compose-Spec",
            "description": "json encoded docker-compose specifications. see https://docs.docker.com/compose/compose-file/, only used by dynamic-sidecar."
          },
          "simcore.service.container-http-entrypoint": {
            "type": "string",
            "title": "Simcore.Service.Container-Http-Entrypoint",
            "description": "When a docker-compose specifications is provided, the container where the traffic must flow has to be specified. Required by dynamic-sidecar when compose_spec is set."
          },
          "user_preferences_path": {
            "type": "string",
            "format": "path",
            "title": "User Preferences Path"
          },
          "simcore.service.restart-policy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RestartPolicy"
              }
            ],
            "description": "the dynamic-sidecar can restart all running containers on certain events. Supported events:\n- `no-restart` default\n- `on-inputs-downloaded` after inputs are downloaded\n",
            "default": "no-restart"
          },
          "simcore.service.containers-allowed-outgoing-permit-list": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/NATRule"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Simcore.Service.Containers-Allowed-Outgoing-Permit-List",
            "description": "allow internet access to certain domain names and ports per container"
          },
          "simcore.service.containers-allowed-outgoing-internet": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Simcore.Service.Containers-Allowed-Outgoing-Internet",
            "description": "allow complete internet access to containers in here"
          },
          "callbacks_mapping": {
            "$ref": "#/components/schemas/CallbacksMapping"
          },
          "service_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Service Key",
            "description": "distinctive name for the node based on the docker registry path"
          },
          "service_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Service Version",
            "description": "semantic version number of the node"
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "project_id": {
            "type": "string",
            "format": "uuid",
            "title": "Project Id"
          },
          "service_uuid": {
            "type": "string",
            "format": "uuid",
            "title": "Service Uuid"
          },
          "service_name": {
            "type": "string",
            "minLength": 2,
            "title": "Service Name",
            "description": "Name of the current dynamic-sidecar being observed"
          },
          "run_id": {
            "type": "string",
            "title": "Run Id",
            "description": "Uniquely identify the dynamic sidecar session (a.k.a. 2 subsequent exact same services will have a different run_id)"
          },
          "hostname": {
            "type": "string",
            "title": "Hostname",
            "description": "dy-sidecar's service hostname (provided by docker-swarm)"
          },
          "port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Port",
            "description": "dynamic-sidecar port",
            "default": 8000,
            "maximum": 65535,
            "minimum": 0
          },
          "dynamic_sidecar": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DynamicSidecar"
              }
            ],
            "title": "Dynamic Sidecar",
            "description": "stores information fetched from the dynamic-sidecar"
          },
          "dynamic_sidecar_network_name": {
            "type": "string",
            "title": "Dynamic Sidecar Network Name",
            "description": "overlay network biding the proxy to the container spaned by the dynamic-sidecar"
          },
          "simcore_traefik_zone": {
            "type": "string",
            "title": "Simcore Traefik Zone",
            "description": "required for Traefik to correctly route requests to the spawned container"
          },
          "service_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Service Port",
            "description": "port where the service is exposed defined by the service; NOTE: temporary default because it will be changed once the service is started, this value is fetched from the service start spec",
            "default": 65534,
            "maximum": 65535,
            "minimum": 0
          },
          "service_resources": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ImageResources"
            },
            "type": "object",
            "title": "Service Resources",
            "description": "service resources used to enforce limits"
          },
          "request_dns": {
            "type": "string",
            "title": "Request Dns",
            "description": "used when configuring the CORS options on the proxy"
          },
          "request_scheme": {
            "type": "string",
            "title": "Request Scheme",
            "description": "used when configuring the CORS options on the proxy"
          },
          "request_simcore_user_agent": {
            "type": "string",
            "title": "Request Simcore User Agent",
            "description": "used as label to filter out the metrics from the cAdvisor prometheus metrics"
          },
          "proxy_service_name": {
            "type": "string",
            "title": "Proxy Service Name",
            "description": "service name given to the proxy"
          },
          "proxy_admin_api_port": {
            "type": "integer",
            "exclusiveMaximum": true,
            "exclusiveMinimum": true,
            "title": "Proxy Admin Api Port",
            "description": "used as the admin endpoint API port",
            "maximum": 65535,
            "minimum": 0
          },
          "wallet_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletInfo"
              }
            ],
            "title": "Wallet Info",
            "description": "contains information about the wallet used to bill the running service"
          },
          "pricing_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PricingInfo"
              }
            ],
            "title": "Pricing Info",
            "description": "contains pricing information so we know what is the cost of running of the service"
          },
          "hardware_info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HardwareInfo"
              }
            ],
            "title": "Hardware Info",
            "description": "contains harware information so we know on which hardware to run the service"
          },
          "product_name": {
            "type": "string",
            "title": "Product Name",
            "description": "Current product upon which this service is scheduled. If set to None, the current product is undefined. Mostly for backwards compatibility"
          }
        },
        "type": "object",
        "required": [
          "paths_mapping",
          "service_key",
          "service_version",
          "user_id",
          "project_id",
          "service_uuid",
          "service_name",
          "hostname",
          "dynamic_sidecar",
          "dynamic_sidecar_network_name",
          "simcore_traefik_zone",
          "service_resources",
          "request_dns",
          "request_scheme",
          "request_simcore_user_agent"
        ],
        "title": "SchedulerData",
        "description": "All \"simcore.service.*\" labels including keys"
      },
      "ServiceBootType": {
        "type": "string",
        "enum": [
          "V0",
          "V2"
        ],
        "title": "ServiceBootType",
        "description": "An enumeration."
      },
      "ServiceRemovalState": {
        "properties": {
          "can_remove": {
            "type": "boolean",
            "title": "Can Remove",
            "description": "when True, marks the service as ready to be removed",
            "default": false
          },
          "can_save": {
            "type": "boolean",
            "title": "Can Save",
            "description": "when True, saves the internal state and upload outputs of the service",
            "default": false
          },
          "was_removed": {
            "type": "boolean",
            "title": "Was Removed",
            "description": "Will be True when the removal finished. Used primarily to cancel retrying long running operations.",
            "default": false
          }
        },
        "type": "object",
        "title": "ServiceRemovalState"
      },
      "ServiceState": {
        "enum": [
          "pending",
          "pulling",
          "starting",
          "running",
          "complete",
          "failed",
          "stopping"
        ],
        "title": "ServiceState",
        "description": "An enumeration."
      },
      "SimpleAuthentication": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple"
            ],
            "title": "Type",
            "default": "simple"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "format": "password",
            "title": "Password",
            "writeOnly": true
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "SimpleAuthentication"
      },
      "Status2": {
        "type": "string",
        "enum": [
          "created",
          "running",
          "paused",
          "restarting",
          "removing",
          "exited",
          "dead"
        ],
        "title": "Status2",
        "description": "    String representation of the container state. Can be one of \"created\",\n\"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\"."
      },
      "TLSAuthentication": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "tls"
            ],
            "title": "Type",
            "default": "tls"
          },
          "tls_ca_file": {
            "type": "string",
            "format": "path",
            "title": "Tls Ca File"
          },
          "tls_client_cert": {
            "type": "string",
            "format": "path",
            "title": "Tls Client Cert"
          },
          "tls_client_key": {
            "type": "string",
            "format": "path",
            "title": "Tls Client Key"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "tls_ca_file",
          "tls_client_cert",
          "tls_client_key"
        ],
        "title": "TLSAuthentication"
      },
      "TaskCounts": {
        "properties": {
          "error": {
            "type": "integer",
            "title": "Error",
            "default": 0
          },
          "memory": {
            "type": "integer",
            "title": "Memory",
            "default": 0
          },
          "executing": {
            "type": "integer",
            "title": "Executing",
            "default": 0
          }
        },
        "type": "object",
        "title": "TaskCounts"
      },
      "TaskLogFileGet": {
        "properties": {
          "task_id": {
            "type": "string",
            "format": "uuid",
            "title": "Task Id"
          },
          "download_link": {
            "type": "string",
            "maxLength": 65536,
            "minLength": 1,
            "format": "uri",
            "title": "Download Link",
            "description": "Presigned link for log file or None if still not available"
          }
        },
        "type": "object",
        "required": [
          "task_id"
        ],
        "title": "TaskLogFileGet"
      },
      "TasksOutputs": {
        "properties": {
          "nodes_outputs": {
            "additionalProperties": {
              "type": "object"
            },
            "type": "object",
            "title": "Nodes Outputs"
          }
        },
        "type": "object",
        "required": [
          "nodes_outputs"
        ],
        "title": "TasksOutputs"
      },
      "TasksSelection": {
        "properties": {
          "nodes_ids": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Nodes Ids"
          }
        },
        "type": "object",
        "required": [
          "nodes_ids"
        ],
        "title": "TasksSelection"
      },
      "UsedResources": {
        "additionalProperties": {
          "type": "number",
          "minimum": 0.0
        },
        "type": "object",
        "title": "UsedResources"
      },
      "UserServiceCommand": {
        "properties": {
          "service": {
            "type": "string",
            "title": "Service",
            "description": "name of the docker-compose service in the docker-compose spec"
          },
          "command": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            ],
            "title": "Command",
            "description": "command to run in container"
          },
          "timeout": {
            "type": "number",
            "minimum": 0.0,
            "title": "Timeout",
            "description": "after this interval the command will be timed-out"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "service",
          "command",
          "timeout"
        ],
        "title": "UserServiceCommand"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WalletInfo": {
        "properties": {
          "wallet_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Wallet Id",
            "minimum": 0
          },
          "wallet_name": {
            "type": "string",
            "title": "Wallet Name"
          },
          "wallet_credit_amount": {
            "type": "number",
            "title": "Wallet Credit Amount"
          }
        },
        "type": "object",
        "required": [
          "wallet_id",
          "wallet_name",
          "wallet_credit_amount"
        ],
        "title": "WalletInfo"
      },
      "Worker": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "resources": {
            "$ref": "#/components/schemas/DictModel_str__PositiveFloat_"
          },
          "used_resources": {
            "$ref": "#/components/schemas/UsedResources"
          },
          "memory_limit": {
            "type": "integer",
            "title": "Memory Limit"
          },
          "metrics": {
            "$ref": "#/components/schemas/WorkerMetrics"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "resources",
          "used_resources",
          "memory_limit",
          "metrics"
        ],
        "title": "Worker"
      },
      "WorkerMetrics": {
        "properties": {
          "cpu": {
            "type": "number",
            "title": "Cpu",
            "description": "consumed % of cpus"
          },
          "memory": {
            "type": "integer",
            "title": "Memory",
            "description": "consumed memory"
          },
          "num_fds": {
            "type": "integer",
            "title": "Num Fds",
            "description": "consumed file descriptors"
          },
          "task_counts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCounts"
              }
            ],
            "title": "Task Counts",
            "description": "task details"
          }
        },
        "type": "object",
        "required": [
          "cpu",
          "memory",
          "num_fds",
          "task_counts"
        ],
        "title": "WorkerMetrics"
      },
      "_PortRange": {
        "properties": {
          "lower": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "$ref": "#/components/schemas/OsparcVariableIdentifier"
              }
            ],
            "title": "Lower"
          },
          "upper": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": true,
                "exclusiveMinimum": true,
                "maximum": 65535,
                "minimum": 0
              },
              {
                "$ref": "#/components/schemas/OsparcVariableIdentifier"
              }
            ],
            "title": "Upper"
          }
        },
        "type": "object",
        "required": [
          "lower",
          "upper"
        ],
        "title": "_PortRange",
        "description": "`lower` and `upper` are included"
      },
      "models_library__generated_models__docker_rest_api__Status": {
        "type": "string",
        "enum": [
          "none",
          "starting",
          "healthy",
          "unhealthy"
        ],
        "title": "Status",
        "description": "    Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n- \"none\"      Indicates there is no healthcheck\n- \"starting\"  Starting indicates that the container is not yet ready\n- \"healthy\"   Healthy indicates that the container is running correctly\n- \"unhealthy\" Unhealthy indicates that the container has a problem"
      },
      "simcore_service_director_v2__models__dynamic_services_scheduler__Status": {
        "properties": {
          "current": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DynamicSidecarStatus"
              }
            ],
            "description": "status of the service"
          },
          "info": {
            "type": "string",
            "title": "Info",
            "description": "additional information for the user"
          }
        },
        "type": "object",
        "required": [
          "current",
          "info"
        ],
        "title": "Status",
        "description": "Generated from data from docker container inspect API"
      }
    }
  }
}
