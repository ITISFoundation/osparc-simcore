version: "3.8"
services:
  api-server:
    image: ${DOCKER_REGISTRY:-itisfoundation}/api-server:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - WEBSERVER_HOST=${WEBSERVER_HOST:-webserver}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
    env_file:
      - ../.env
    deploy:
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # gzip compression
        - traefik.http.middlewares.${SWARM_STACK_NAME}_gzip.compress=true
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_api-server.loadbalancer.server.port=8000
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.entrypoints=simcore_api
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.middlewares=${SWARM_STACK_NAME}_gzip@docker,ratelimit-${SWARM_STACK_NAME}_api-server
    networks:
      - default

  catalog:
    image: ${DOCKER_REGISTRY:-itisfoundation}/catalog:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - DIRECTOR_HOST=${DIRECTOR_HOST:-director}
      - DIRECTOR_PORT=${DIRECTOR_PORT:-8080}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - BACKGROUND_TASK_REST_TIME=${CATALOG_BACKGROUND_TASK_REST_TIME:-60}
    networks:
      - default

  director:
    image: ${DOCKER_REGISTRY:-itisfoundation}/director:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_PATH=${REGISTRY_PATH}
      - REGISTRY_AUTH=${REGISTRY_AUTH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - REGISTRY_SSL=${REGISTRY_SSL}
      - DIRECTOR_REGISTRY_CACHING=${DIRECTOR_REGISTRY_CACHING}
      - DIRECTOR_REGISTRY_CACHING_TTL=${DIRECTOR_REGISTRY_CACHING_TTL}
      - DIRECTOR_SERVICES_CUSTOM_CONSTRAINTS=${DIRECTOR_SERVICES_CUSTOM_CONSTRAINTS}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_ID=${DIRECTOR_SELF_SIGNED_SSL_SECRET_ID}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME=${DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME}
      - DIRECTOR_SELF_SIGNED_SSL_FILENAME=${DIRECTOR_SELF_SIGNED_SSL_FILENAME}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - EXTRA_HOSTS_SUFFIX=${EXTRA_HOSTS_SUFFIX:-undefined}
      - SIMCORE_SERVICES_NETWORK_NAME=interactive_services_subnet
      - MONITORING_ENABLED=${MONITORING_ENABLED:-True}
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
      - TRAEFIK_SIMCORE_ZONE=${TRAEFIK_SIMCORE_ZONE:-internal_simcore_stack}
      - LOGLEVEL=${LOG_LEVEL:-WARNING}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet

  director-v2:
    image: ${DOCKER_REGISTRY:-itisfoundation}/director-v2:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - DIRECTOR_HOST=${DIRECTOR_HOST:-director}
      - DIRECTOR_PORT=${DIRECTOR_PORT:-8080}
      - DIRECTOR_SERVICES_CUSTOM_CONSTRAINTS=${DIRECTOR_SERVICES_CUSTOM_CONSTRAINTS}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_ID=${DIRECTOR_SELF_SIGNED_SSL_SECRET_ID}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME=${DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME}
      - DIRECTOR_SELF_SIGNED_SSL_FILENAME=${DIRECTOR_SELF_SIGNED_SSL_FILENAME}
      - EXTRA_HOSTS_SUFFIX=${EXTRA_HOSTS_SUFFIX:-undefined}
      - SIMCORE_SERVICES_NETWORK_NAME=interactive_services_subnet
      - MONITORING_ENABLED=${MONITORING_ENABLED:-True}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
    env_file:
      - ../.env
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet

  static-webserver:
    image: ${DOCKER_REGISTRY:-itisfoundation}/static-webserver:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - SERVER_LOG_LEVEL=error
      - SERVER_ROOT=/static-content
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        - traefik.http.middlewares.${SWARM_STACK_NAME}_gzip.compress=true
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_static_webserver.loadbalancer.server.port=8000
        - traefik.http.services.${SWARM_STACK_NAME}_static_webserver.loadbalancer.healthcheck.path=/
        - traefik.http.services.${SWARM_STACK_NAME}_static_webserver.loadbalancer.healthcheck.interval=2000ms
        - traefik.http.services.${SWARM_STACK_NAME}_static_webserver.loadbalancer.healthcheck.timeout=1000ms
        - traefik.http.middlewares.${SWARM_STACK_NAME}_static_webserver_retry.retry.attempts=2
        - traefik.http.routers.${SWARM_STACK_NAME}_static_webserver.rule=hostregexp(`{host:.+}`) && (PathPrefix(`/osparc`) || PathPrefix(`/s4l`) || PathPrefix(`/tis`) || PathPrefix(`/transpiled`) || PathPrefix(`/resource`))
        - traefik.http.routers.${SWARM_STACK_NAME}_static_webserver.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_static_webserver.priority=2
        - traefik.http.routers.${SWARM_STACK_NAME}_static_webserver.middlewares=${SWARM_STACK_NAME}_gzip@docker, ${SWARM_STACK_NAME}_static_webserver_retry
    networks:
      - default

  webserver:
    image: ${DOCKER_REGISTRY:-itisfoundation}/webserver:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - CATALOG_HOST=${CATALOG_HOST:-catalog}
      - CATALOG_PORT=${CATALOG_PORT:-8000}
      - DIAGNOSTICS_MAX_AVG_LATENCY=10
      - DIAGNOSTICS_MAX_TASK_DELAY=30
      - DIRECTOR_HOST=${DIRECTOR_HOST:-director}
      - DIRECTOR_PORT=${DIRECTOR_PORT:-8080}
      - DIRECTOR_V2_HOST=${DIRECTOR_V2_HOST:-director-v2}
      - DIRECTOR_V2_PORT=${DIRECTOR_V2_PORT:-8000}
      - STORAGE_HOST=${STORAGE_HOST:-storage}
      - STORAGE_PORT=${STORAGE_PORT:-8080}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - WEBSERVER_LOGLEVEL=${LOG_LEVEL:-WARNING}
    env_file:
      - ../.env
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # gzip compression
        - traefik.http.middlewares.${SWARM_STACK_NAME}_gzip.compress=true
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        - traefik.http.middlewares.${SWARM_STACK_NAME_NO_HYPHEN}_sslheader.headers.customrequestheaders.X-Forwarded-Proto=http
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.server.port=8080
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.healthcheck.path=/v0/
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.healthcheck.interval=2000ms
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.healthcheck.timeout=1000ms
        - traefik.http.middlewares.${SWARM_STACK_NAME}_webserver_retry.retry.attempts=2
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.rule=hostregexp(`{host:.+}`) && (PathPrefix(`/`) || PathPrefix(`/v0`) || PathPrefix(`/socket.io`) || PathPrefix(`/static-frontend-data.json`))
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.middlewares=${SWARM_STACK_NAME}_gzip@docker, ${SWARM_STACK_NAME_NO_HYPHEN}_sslheader@docker, ${SWARM_STACK_NAME}_webserver_retry
    networks:
      - default
      - interactive_services_subnet

  sidecar:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    init: true
    deploy:
      mode: replicated
      replicas: 8
      endpoint_mode: dnsrr
      resources:
        reservations:
          cpus: "0.10"
          memory: "100M"
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
      - ${ETC_HOSTNAME:-/etc/hostname}:/home/scu/hostname:ro
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - RABBIT_CHANNELS=${RABBIT_CHANNELS}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_PATH=${REGISTRY_PATH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - SIDECAR_LOGLEVEL=${LOG_LEVEL:-WARNING}
      - SIDECAR_HOST_HOSTNAME_PATH=${SIDECAR_HOST_HOSTNAME_PATH:-/home/scu/hostname}
      - START_AS_MODE_CPU=${SIDECAR_FORCE_CPU_NODE:-0}

    networks:
      - computational_services_subnet

  storage:
    image: ${DOCKER_REGISTRY:-itisfoundation}/storage:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - STORAGE_LOGLEVEL=${LOG_LEVEL:-WARNING}
      - STORAGE_MONITORING_ENABLED=1
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_SECURE=${S3_SECURE}
      - BF_API_SECRET=${BF_API_SECRET}
      - BF_API_KEY=${BF_API_KEY}
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet

  rabbit:
    image: itisfoundation/rabbitmq:3.8.0-management
    init: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    networks:
      - default
      - computational_services_subnet
    healthcheck:
      # see https://www.rabbitmq.com/monitoring.html#individual-checks for info about health-checks available in rabbitmq
      test: rabbitmq-diagnostics -q status
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 15s

  migration:
    image: ${DOCKER_REGISTRY:-itisfoundation}/migration:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    networks:
      - default

  postgres:
    image: "postgres:10.11@sha256:2aef165ab4f30fbb109e88959271d8b57489790ea13a77d27c02d8adb8feb20f"
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 16000000000
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "--username",
          "${POSTGRES_USER}",
          "--dbname",
          "${POSTGRES_DB}",
        ]
      interval: 15s
      retries: 5
    # NOTES: this is not yet compatible with portainer deployment but could work also for other containers
    # works with Docker 19.03 and not yet with Portainer 1.23.0 (see https://github.com/portainer/portainer/issues/3551)
    # in the meantime postgres allows to set a configuration through CLI.
    # sysctls:
    #   # NOTES: these values are needed here because docker swarm kills long running idle
    #   # connections by default after 15 minutes see https://github.com/moby/moby/issues/31208
    #   # info about these values are here https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html
    #   - net.ipv4.tcp_keepalive_intvl=600
    #   - net.ipv4.tcp_keepalive_probes=9
    #   - net.ipv4.tcp_keepalive_time=600
    command:
      [
        "postgres",
        "-c",
        "tcp_keepalives_idle=600",
        "-c",
        "tcp_keepalives_interval=600",
        "-c",
        "tcp_keepalives_count=5",
        "-c",
        "max_connections=413",
        "-c",
        "shared_buffers=256MB"
      ]

  redis:
    image: "redis:5.0.9-alpine@sha256:b011c1ca7fa97ed92d6c5995e5dd752dc37fe157c1b60ce96a6e35701851dabc"
    init: true
    networks:
      - default
      - computational_services_subnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50

  traefik:
    image: traefik:v2.2.1
    init: true
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--ping=true"
      - "--entryPoints.ping.address=:9082"
      - "--ping.entryPoint=ping"
      - "--log.level=WARNING"
      - "--accesslog=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.forwardedHeaders.insecure"
      - "--entryPoints.simcore_api.address=:10081"
      - "--entryPoints.simcore_api.forwardedHeaders.insecure"
      - "--entryPoints.traefik_monitor.address=:8080"
      - "--entryPoints.traefik_monitor.forwardedHeaders.insecure"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=${SWARM_STACK_NAME}_default"
      - "--providers.docker.swarmMode=true"
      # https://github.com/traefik/traefik/issues/7886
      - "--providers.docker.swarmModeRefreshSeconds=1"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.constraints=Label(`io.simcore.zone`, `${TRAEFIK_SIMCORE_ZONE}`)"
      - "--tracing=true"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # for each service in the stack a new middlaware for rate limiting needs to be registered here
        # requests = average / period this is how the limits are defined
        - traefik.http.middlewares.ratelimit-${SWARM_STACK_NAME}_api-server.ratelimit.average=1
        - traefik.http.middlewares.ratelimit-${SWARM_STACK_NAME}_api-server.ratelimit.period=1m
        # a burst is computed over a period of 1 second
        - traefik.http.middlewares.ratelimit-${SWARM_STACK_NAME}_api-server.ratelimit.burst=10
        # X-Forwarded-For header extracts second IP from the right, count starts at one
        - traefik.http.middlewares.ratelimit-${SWARM_STACK_NAME}_api-server.ratelimit.sourcecriterion.ipstrategy.depth=2
    networks:
      - default
      - interactive_services_subnet
    #healthcheck:
    #  test: wget --quiet --tries=1 --spider http://localhost:9082/ping || exit 1
    #  interval: 3s
    #  timeout: 1s
    #  retries: 3
    #  start_period: 20s

volumes:
  input: {}
  output: {}
  log: {}
  postgres_data: {}

networks:
  default:
    attachable: true
  interactive_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "interactive services network"
    ipam:
      driver: default
      config:
        - subnet: "172.8.0.0/16"
  computational_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "computational services network"
    ipam:
      driver: default
      config:
        - subnet: "172.9.0.0/16"
