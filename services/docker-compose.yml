version: '3.4'
services:
  apihub:
    image: ${DOCKER_REGISTRY:-itisfoundation}/apihub:${DOCKER_IMAGE_TAG:-latest}
    build:
      context: ../
      dockerfile: services/apihub/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/apihub:cache
        - ${DOCKER_REGISTRY:-itisfoundation}/apihub:${DOCKER_IMAGE_TAG:-latest}
      target: production
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
    ports:
      - '8043:8043'
    deploy:
      placement:
       constraints:
          - node.platform.os == linux
#--------------------------------------------------------------------
  director:
    image: ${DOCKER_REGISTRY:-itisfoundation}/director:${DOCKER_IMAGE_TAG:-latest}
    build:
      context: ../
      dockerfile: services/director/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/director:cache
        - ${DOCKER_REGISTRY:-itisfoundation}/director:${DOCKER_IMAGE_TAG:-latest}
      target: production
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
    ports:
      - '8001:8080'
    environment:
    # on Windows follow http://www.computerperformance.co.uk/powershell/powershell_profile_ps1.htm
    # currently needs to set $Env:COMPOSE_CONVERT_WINDOWS_PATHS=1 in powershell to make this works
    # on a windows machine
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_AUTH=${REGISTRY_AUTH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - REGISTRY_SSL=${REGISTRY_SSL}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - EXTRA_HOSTS_SUFFIX=${EXTRA_HOSTS_SUFFIX}
      - PUBLISHED_HOST_NAME=${PUBLISHED_HOST_NAME}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME}
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    deploy:
      placement:
       constraints:
          - node.platform.os == linux
          - node.role == manager
  #--------------------------------------------------------------------
  webclient:
    image: services_webclient:build
    restart: on-failure
    build:
      context: ./web/client/
      dockerfile: Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/webclient:cache
        - services_webclient:latest
      target: build
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
      args:
        - VCS_URL=${VCS_URL}
        - VCS_REF=${VCS_REF}
        - VCS_REF_CLIENT=${VCS_REF_CLIENT}
        - VCS_STATUS_CLIENT=${VCS_STATUS_CLIENT}
    command: >
      /bin/sh -c "ls -l build-output;cat build-output/version.txt"

  webserver:
    image: ${DOCKER_REGISTRY:-itisfoundation}/webserver:${DOCKER_IMAGE_TAG:-latest}
    build:
      context: ../
      dockerfile: services/web/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/webserver:cache
        - ${DOCKER_REGISTRY:-itisfoundation}/webserver:${DOCKER_IMAGE_TAG:-latest}
      target: production
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
    ports:
      - ${SIMCORE_PORT:-9081}:8080
    environment:
      - APIHUB_HOST=apihub
      - APIHUB_PORT=8043
      - DIRECTOR_HOST=director
      - DIRECTOR_PORT=8080
      - STORAGE_HOST=storage
      - STORAGE_PORT=8080
      - LOGIN_REGISTRATION_CONFIRMATION_REQUIRED=${LOGIN_REGISTRATION_CONFIRMATION_REQUIRED:-1}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PROGRESS_CHANNEL=${RABBITMQ_PROGRESS_CHANNEL}
      - RABBITMQ_LOG_CHANNEL=${RABBITMQ_LOG_CHANNEL}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
    stdin_open: true
    tty: true
    depends_on:
      - apihub
      - postgres
      - minio
      - rabbit
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
  #--------------------------------------------------------------------
  sidecar:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    build:
      # the context for the build is the git repo root directory, this allows to copy
      # the packages directory into any docker image
      context: ../
      dockerfile: services/sidecar/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/sidecar:cache
        - ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
      target: production
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_LOG_CHANNEL=${RABBITMQ_LOG_CHANNEL}
      - RABBITMQ_PROGRESS_CHANNEL=${RABBITMQ_PROGRESS_CHANNEL}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME}
    depends_on:
      - rabbit
      - postgres
      - minio
  #--------------------------------------------------------------------
  storage:
    image: ${DOCKER_REGISTRY:-itisfoundation}/storage:${DOCKER_IMAGE_TAG:-latest}
    build:
      # the context for the build is the git repo root directory, this allows to copy
      # the packages directory into any docker image
      context: ../
      dockerfile: services/storage/Dockerfile
      cache_from:
        - ${DOCKER_REGISTRY:-itisfoundation}/storage:cache
        - ${DOCKER_REGISTRY:-itisfoundation}/storage:${DOCKER_IMAGE_TAG:-latest}
      target: production
      labels:
        org.label-schema.schema-version: "1.0"
        org.label-schema.build-date: "${BUILD_DATE}"
        org.label-schema.vcs-url: "https://github.com/ITISFoundation/osparc-simcore"
        org.label-schema.vcs-ref: "${VCS_REF}"
    ports:
      - "11111:8080"
    environment:
      - APIHUB_HOST=apihub
      - APIHUB_PORT=8043
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_SECURE=${S3_SECURE}
      - BF_API_SECRET=${BF_API_SECRET}
      - BF_API_KEY=${BF_API_KEY}
    stdin_open: true
    tty: true
    depends_on:
      - minio
      - postgres
      - apihub
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
#--------------------------------------------------------------------
  rabbit:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672"
      - "15672:15672"
  #--------------------------------------------------------------------
  postgres:
    image: postgres:10
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
  #--------------------------------------------------------------------
  minio:
    image: minio/minio
    environment:
      - MINIO_ACCESS_KEY=12345678
      - MINIO_SECRET_KEY=12345678
    ports:
      - "9001:9000"
    command: server /data
volumes:
  input:
  output:
  log:
  postgres:
