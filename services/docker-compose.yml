version: '3.7'
services:
  catalog:
    image: ${DOCKER_REGISTRY:-itisfoundation}/catalog:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - TESTING=false
      - LOGLEVEL=info
    depends_on:
      - postgres
    networks:
      - default

  director:
    image: ${DOCKER_REGISTRY:-itisfoundation}/director:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_AUTH=${REGISTRY_AUTH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - REGISTRY_SSL=${REGISTRY_SSL}
      - DIRECTOR_REGISTRY_CACHING=${DIRECTOR_REGISTRY_CACHING}
      - DIRECTOR_REGISTRY_CACHING_TTL=${DIRECTOR_REGISTRY_CACHING_TTL}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - EXTRA_HOSTS_SUFFIX=${EXTRA_HOSTS_SUFFIX:-undefined}
      - SIMCORE_SERVICES_NETWORK_NAME=interactive_services_subnet
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    deploy:
      placement:
       constraints:
          - node.platform.os == linux
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet

  webserver:
    image: ${DOCKER_REGISTRY:-itisfoundation}/webserver:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - BUILD_DATE=${BUILD_DATE:-1970-01-01T01:00:00Z}
      - DIRECTOR_HOST=director
      - DIRECTOR_PORT=8080
      - STORAGE_HOST=storage
      - STORAGE_PORT=8080
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - WEBSERVER_MONITORING_ENABLED=1
      - WEBSERVER_LOGLEVEL=INFO
    env_file:
      - ../.env
    depends_on:
      - postgres
      - rabbit
      - redis
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet

  sidecar:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    init: true
    deploy:
      mode: replicated
      endpoint_mode: dnsrr
      resources:
        reservations:
          cpus: '0.1'
          memory: '100M'
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - RABBIT_LOG_CHANNEL=${RABBIT_LOG_CHANNEL}
      - RABBIT_PROGRESS_CHANNEL=${RABBIT_PROGRESS_CHANNEL}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - SIDECAR_LOGLEVEL=INFO
    depends_on:
      - rabbit
      - postgres
    networks:
      - computational_services_subnet

  storage:
    image: ${DOCKER_REGISTRY:-itisfoundation}/storage:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - STORAGE_LOGLEVEL=INFO
      - STORAGE_MONITORING_ENABLED=1
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_SECURE=${S3_SECURE}
      - BF_API_SECRET=${BF_API_SECRET}
      - BF_API_KEY=${BF_API_KEY}
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
    depends_on:
      - postgres
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet

  rabbit:
    image: itisfoundation/rabbitmq:3.8.0-management
    init: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    networks:
      - default
      - computational_services_subnet

  postgres:
    image: postgres:10.11
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet
    # NOTES: this is not yet compatible with portainer deployment but could work also for other containers
    # works with Docker 19.03 and not yet with Portainer 1.23.0 (see https://github.com/portainer/portainer/issues/3551)
    # in the meantime postgres allows to set a configuration through CLI.
    # sysctls:
    #   # NOTES: these values are needed here because docker swarm kills long running idle
    #   # connections by default after 15 minutes see https://github.com/moby/moby/issues/31208
    #   # info about these values are here https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html
    #   - net.ipv4.tcp_keepalive_intvl=600
    #   - net.ipv4.tcp_keepalive_probes=9
    #   - net.ipv4.tcp_keepalive_time=600
    command:
      [
        "postgres",
        "-c", "tcp_keepalives_idle=600",
        "-c", "tcp_keepalives_interval=600",
        "-c", "tcp_keepalives_count=5"
      ]
  redis:
    image: redis:5.0-alpine
    init: true
    networks:
      - default

volumes:
  input: {}
  output: {}
  log: {}
  postgres_data: {}

networks:
  default:
    attachable: true
  interactive_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "interactive services network"
    ipam:
      driver: default
      config:
        - subnet: "172.8.0.0/16"
  computational_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "computational services network"
    ipam:
      driver: default
      config:
        - subnet: "172.9.0.0/16"
