version: "3.7"
services:
  api-server:
    image: ${DOCKER_REGISTRY:-itisfoundation}/api-server:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - WEBSERVER_HOST=${WEBSERVER_HOST:-webserver}
      - LOGLEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - ../.env
    depends_on:
      - postgres
      - webserver
    deploy:
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # gzip compression
        - traefik.http.middlewares.${SWARM_STACK_NAME}_gzip.compress=true
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_api-server.loadbalancer.server.port=8000
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.entrypoints=simcore_api
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_api-server.middlewares=${SWARM_STACK_NAME}_gzip@docker
    networks:
      - default

  catalog:
    image: ${DOCKER_REGISTRY:-itisfoundation}/catalog:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - DIRECTOR_HOST=${DIRECTOR_HOST:-director}
      - DIRECTOR_PORT=${DIRECTOR_PORT:-8080}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
      - BACKGROUND_TASK_REST_TIME=${CATALOG_BACKGROUND_TASK_REST_TIME:-60}
    depends_on:
      - postgres
      - director
    networks:
      - default

  director:
    image: ${DOCKER_REGISTRY:-itisfoundation}/director:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_AUTH=${REGISTRY_AUTH}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - REGISTRY_SSL=${REGISTRY_SSL}
      - DIRECTOR_REGISTRY_CACHING=${DIRECTOR_REGISTRY_CACHING}
      - DIRECTOR_REGISTRY_CACHING_TTL=${DIRECTOR_REGISTRY_CACHING_TTL}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_ID=${DIRECTOR_SELF_SIGNED_SSL_SECRET_ID}
      - DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME=${DIRECTOR_SELF_SIGNED_SSL_SECRET_NAME}
      - DIRECTOR_SELF_SIGNED_SSL_FILENAME=${DIRECTOR_SELF_SIGNED_SSL_FILENAME}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - EXTRA_HOSTS_SUFFIX=${EXTRA_HOSTS_SUFFIX:-undefined}
      - SIMCORE_SERVICES_NETWORK_NAME=interactive_services_subnet
      - MONITORING_ENABLED=${MONITORING_ENABLED:-True}
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
      - TRAEFIK_SIMCORE_ZONE=${TRAEFIK_SIMCORE_ZONE:-internal_simcore_stack}
      - LOGLEVEL=${LOG_LEVEL:-WARNING}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet

  webserver:
    image: ${DOCKER_REGISTRY:-itisfoundation}/webserver:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - BUILD_DATE=${BUILD_DATE:-1970-01-01T01:00:00Z}
      - DIRECTOR_HOST=${DIRECTOR_HOST:-director}
      - DIRECTOR_PORT=${DIRECTOR_PORT:-8080}
      - STORAGE_HOST=${STORAGE_HOST:-storage}
      - STORAGE_PORT=${STORAGE_PORT:-8080}
      - CATALOG_HOST=${CATALOG_HOST:-catalog}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - WEBSERVER_LOGLEVEL=${LOG_LEVEL:-WARNING}
      - DIAGNOSTICS_MAX_DELAY_SECS=30
      - DIAGNOSTICS_MAX_AVG_LATENCY=10
    env_file:
      - ../.env
    depends_on:
      - storage
      - catalog
      - director
      - postgres
      - rabbit
      - redis
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
          - node.role == manager
      labels:
        - io.simcore.zone=${TRAEFIK_SIMCORE_ZONE}
        # gzip compression
        - traefik.http.middlewares.${SWARM_STACK_NAME}_gzip.compress=true
        # ssl header necessary so that socket.io upgrades correctly from polling to websocket mode. the middleware must be attached to the right connection.
        - traefik.http.middlewares.${SWARM_STACK_NAME_NO_HYPHEN}_sslheader.headers.customrequestheaders.X-Forwarded-Proto=http
        - traefik.enable=true
        - traefik.http.services.${SWARM_STACK_NAME}_webserver.loadbalancer.server.port=8080
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.rule=hostregexp(`{host:.+}`)
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.entrypoints=http
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.priority=1
        - traefik.http.routers.${SWARM_STACK_NAME}_webserver.middlewares=${SWARM_STACK_NAME}_gzip@docker, ${SWARM_STACK_NAME_NO_HYPHEN}_sslheader@docker
    networks:
      - default
      - interactive_services_subnet

  sidecar:
    image: ${DOCKER_REGISTRY:-itisfoundation}/sidecar:${DOCKER_IMAGE_TAG:-latest}
    init: true
    deploy:
      mode: replicated
      replicas: 8
      endpoint_mode: dnsrr
      resources:
        reservations:
          cpus: "0.1"
          memory: "100M"
    volumes:
      - input:/home/scu/input
      - output:/home/scu/output
      - log:/home/scu/log
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/hostname:/home/scu/hostname:ro
    environment:
      - RABBIT_HOST=${RABBIT_HOST}
      - RABBIT_PORT=${RABBIT_PORT}
      - RABBIT_USER=${RABBIT_USER}
      - RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - RABBIT_CHANNELS=${RABBIT_CHANNELS}
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - STORAGE_ENDPOINT=${STORAGE_ENDPOINT}
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PW=${REGISTRY_PW}
      - SWARM_STACK_NAME=${SWARM_STACK_NAME:-simcore}
      - SIDECAR_LOGLEVEL=${LOG_LEVEL:-WARNING}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    depends_on:
      - rabbit
      - postgres
      - redis
    networks:
      - computational_services_subnet

  storage:
    image: ${DOCKER_REGISTRY:-itisfoundation}/storage:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - STORAGE_LOGLEVEL=${LOG_LEVEL:-WARNING}
      - STORAGE_MONITORING_ENABLED=1
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_SECURE=${S3_SECURE}
      - BF_API_SECRET=${BF_API_SECRET}
      - BF_API_KEY=${BF_API_KEY}
      - TRACING_ENABLED=${TRACING_ENABLED:-True}
      - TRACING_ZIPKIN_ENDPOINT=${TRACING_ZIPKIN_ENDPOINT:-http://jaeger:9411}
    depends_on:
      - postgres
    deploy:
      placement:
        constraints:
          - node.platform.os == linux
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet

  rabbit:
    image: itisfoundation/rabbitmq:3.8.0-management
    init: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    networks:
      - default
      - computational_services_subnet

  migration:
    image: ${DOCKER_REGISTRY:-itisfoundation}/migration:${DOCKER_IMAGE_TAG:-latest}
    init: true
    environment:
      - POSTGRES_ENDPOINT=${POSTGRES_ENDPOINT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    depends_on:
      - postgres
    networks:
      - default

  postgres:
    image: postgres:10.11
    init: true
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default
      - interactive_services_subnet
      - computational_services_subnet
    # NOTES: this is not yet compatible with portainer deployment but could work also for other containers
    # works with Docker 19.03 and not yet with Portainer 1.23.0 (see https://github.com/portainer/portainer/issues/3551)
    # in the meantime postgres allows to set a configuration through CLI.
    # sysctls:
    #   # NOTES: these values are needed here because docker swarm kills long running idle
    #   # connections by default after 15 minutes see https://github.com/moby/moby/issues/31208
    #   # info about these values are here https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html
    #   - net.ipv4.tcp_keepalive_intvl=600
    #   - net.ipv4.tcp_keepalive_probes=9
    #   - net.ipv4.tcp_keepalive_time=600
    command:
      [
        "postgres",
        "-c",
        "tcp_keepalives_idle=600",
        "-c",
        "tcp_keepalives_interval=600",
        "-c",
        "tcp_keepalives_count=5",
      ]

  redis:
    image: redis:5.0-alpine
    init: true
    networks:
      - default
      - computational_services_subnet

  traefik:
    image: traefik:v2.2.1
    init: true
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--log.level=WARNING"
      - "--accesslog=false"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--entryPoints.metrics.address=:8082"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.forwardedHeaders.insecure"
      - "--entryPoints.simcore_api.address=:10081"
      - "--entryPoints.simcore_api.forwardedHeaders.insecure"
      - "--entryPoints.traefik_monitor.address=:8080"
      - "--entryPoints.traefik_monitor.forwardedHeaders.insecure"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.network=${SWARM_STACK_NAME}_default"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.constraints=Label(`io.simcore.zone`, `${TRAEFIK_SIMCORE_ZONE}`)"
      - "--tracing=true"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://jaeger:5778/sampling"
      - "--tracing.jaeger.localAgentHostPort=jaeger:6831"

    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

    deploy:
      placement:
        constraints:
          - node.role == manager
    networks:
      - default
      - interactive_services_subnet

volumes:
  input: {}
  output: {}
  log: {}
  postgres_data: {}

networks:
  default:
    attachable: true
  interactive_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "interactive services network"
    ipam:
      driver: default
      config:
        - subnet: "172.8.0.0/16"
  computational_services_subnet:
    driver: overlay
    attachable: true
    internal: false
    labels:
      com.simcore.description: "computational services network"
    ipam:
      driver: default
      config:
        - subnet: "172.9.0.0/16"
