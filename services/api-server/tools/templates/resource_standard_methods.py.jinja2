from loguru import logger
from typing import List, Optional

from fastapi import APIRouter, Body, Depends, HTTPException, Query
from starlette import status

from .. import db
from ..store import crud_{{ rnp }} as crud
from ..schemas import schemas_{{ rnp }} as schemas

router = APIRouter()

{#  STANDARD METHODS: https://cloud.google.com/apis/design/standard_methods  #}


@router.get("/{{ rnp }}", response_model=List[schemas.DAGOut])
async def list_{{ rnp }}(
    page_token: Optional[str] = Query(
        None, description="Requests a specific page of the list results"
    ),
    page_size: int = Query(
        0, ge=0, description="Maximum number of results to be returned"
    ),
    order_by: Optional[str] = Query(
        None, description="Sorts in ascending order comma-separated fields"
    ),
    conn: db.SAConnection = Depends(db.get_cnx),
):
    # List is suited to data from a single collection that is bounded in size and not cached

    # Applicable common patterns
    # SEE pagination: https://cloud.google.com/apis/design/design_patterns#list_pagination
    # SEE sorting https://cloud.google.com/apis/design/design_patterns#sorting_order

    # Applicable naming conventions
    # TODO: filter: https://cloud.google.com/apis/design/naming_convention#list_filter_field
    # SEE response: https://cloud.google.com/apis/design/naming_convention#list_response
    logger.debug("%s %s %s", page_token, page_size, order_by)
    {{ rnp }} = await crud.list_{{ rnp }}(conn)
    return {{ rnp }}


@router.get("/{{ rnp }}/{{'{'}}{{ rn }}_id{{'}'}}", response_model=schemas.DAGOut)
async def get_{{ rn }}({{ rn }}_id: int, conn: db.SAConnection = Depends(db.get_cnx)):
    {{ rn }} = await crud.get_{{ rn }}(conn, {{ rn }}_id)
    return {{ rn }}


@router.post(
    "/{{ rnp }}",
    response_model=int,
    status_code=status.HTTP_201_CREATED,
    response_description="Successfully created {{ rn }}",
)
async def create_{{ rn }}(
    {{ rn }}: schemas.DAGIn = Body(...), conn: db.SAConnection = Depends(db.get_cnx)
):
    assert {{ rn }}  # nosec

    if {{ rn }}.version == "0.0.0" and {{ rn }}.key == "foo":
        # client-assigned resouce name
        raise HTTPException(
            status_code=status.HTTP_409_CONFLICT,
            detail=f"{{ rn }} version already exists",
        )

    # FIXME: conversion DAG (issue with workbench being json in orm and dict in schema)
    {{ rn }}_id = await crud.create_{{ rn }}(conn, {{ rn }})
    # TODO: no need to return since there is not extra info?, perhaps return
    return {{ rn }}_id


@router.patch("/{{ rnp }}/{{'{'}}{{ rn }}_id{{'}'}}", response_model=schemas.DAGOut)
async def udpate_{{ rn }}(
    {{ rn }}_id: int,
    {{ rn }}: schemas.DAGIn = Body(None),
    conn: db.SAConnection = Depends(db.get_cnx),
):
    async with conn.begin():
        await crud.update_{{ rn }}(conn, {{ rn }}_id, {{ rn }})
        updated_{{ rn }} = await crud.get_{{ rn }}(conn, {{ rn }}_id)

    return updated_{{ rn }}


@router.put("/{{ rnp }}/{{'{'}}{{ rn }}_id{{'}'}}", response_model=Optional[schemas.DAGOut])
async def replace_{{ rn }}(
    {{ rn }}_id: int,
    {{ rn }}: schemas.DAGIn = Body(...),
    conn: db.SAConnection = Depends(db.get_cnx),
):
    await crud.replace_{{ rn }}(conn, {{ rn }}_id, {{ rn }})


@router.delete(
    "/{{ rnp }}/{{'{'}}{{ rn }}_id{{'}'}}",
    status_code=status.HTTP_204_NO_CONTENT,
    response_description="Successfully deleted",
)
async def delete_{{ rn }}({{ rn }}_id: int, conn: db.SAConnection = Depends(db.get_cnx)):
    # If the Delete method immediately removes the resource, it should return an empty response.
    # If the Delete method initiates a long-running operation, it should return the long-running operation.
    # If the Delete method only marks the resource as being deleted, it should return the updated resource.
    await crud.delete_{{ rn }}(conn, {{ rn }}_id)
