# pylint:disable=unused-variable
# pylint:disable=unused-argument
# pylint:disable=redefined-outer-name

from typing import List

import pytest
from starlette.testclient import TestClient
from starlette import status


# TODO: app is init globally ... which is bad!
from simcore_service_api_server.core.application import api_version, app, api_vtag


@pytest.fixture
def client(environ_context, postgres_service):
    # TODO: create new web-app everyt
    with TestClient(app) as cli:
        yield cli


def test_list_{{ rnp }}(client):
    response = client.get(f"/{api_vtag}/{{ rnp }}")
    assert response.status_code == status.HTTP_200_OK
    assert response.json() == []

    # inject three dagin
    response = client.get(f"/{api_vtag}/{{ rnp }}")
    assert response.status_code == status.HTTP_200_OK
    # TODO: assert i can list them as dagouts

    # TODO: assert dagout have identifiers now


def test_standard_operations_on_resource(client, fake_data_dag_in):

    response = client.post(f"/{api_vtag}/{{ rnp }}", json=fake_data_dag_in)
    assert response.status_code == status.HTTP_201_CREATED
    assert response.json() == 1

    # list
    response = client.get(f"/{api_vtag}/{{ rnp }}")
    assert response.status_code == status.HTTP_200_OK
    got = response.json()

    assert isinstance(got, List)
    assert len(got) == 1

    # TODO: data_in is not the same as data_out??
    data_out = got[0]
    assert data_out["id"] == 1  # extra key, once in db

    # get
    response = client.get(f"/{api_vtag}/{{ rnp }}/1")
    assert response.status_code == status.HTTP_200_OK
    assert response.json() == data_out

    # delete
    response = client.delete(f"/{api_vtag}/{{ rnp }}/1")
    assert response.status_code == status.HTTP_204_NO_CONTENT
