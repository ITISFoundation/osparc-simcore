{
  "openapi": "3.0.2",
  "info": {
    "title": "osparc.io web API",
    "description": "osparc-simcore public web API specifications",
    "version": "0.3.0",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/ITISFoundation/osparc-manual/b809d93619512eb60c827b7e769c6145758378d0/_media/osparc-logo.svg",
      "altText": "osparc-simcore logo"
    }
  },
  "paths": {
    "/v0/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get My Profile",
        "operationId": "get_my_profile",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update My Profile",
        "operationId": "update_my_profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List Files",
        "description": "Gets metadata for all file resources ",
        "operationId": "list_files",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Files V0 Files Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileMetadata"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files/content": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Upload File",
        "description": "Uploads a single file to the system",
        "operationId": "upload_file",
        "parameters": [
          {
            "required": false,
            "schema": {
              "title": "Content-Length",
              "type": "string"
            },
            "name": "content-length",
            "in": "header"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v0_files_content_put"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files/{file_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get File",
        "description": "Gets metadata for a given file resource ",
        "operationId": "get_file",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "File Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files/{file_id}/content": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download File",
        "operationId": "download_file",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "File Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a arbitrary binary data",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/solvers": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Solvers",
        "operationId": "list_solvers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Solvers V0 Solvers Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Solver"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/solvers/{solver_id}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver",
        "operationId": "get_solver",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/solvers/{solver_id}/jobs": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Jobs",
        "description": "List of all jobs with a given solver ",
        "operationId": "list_jobs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Jobs V0 Solvers  Solver Id  Jobs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Create Job",
        "description": "Creates a job for a solver with given inputs.\n\nNOTE: This operation does **not** start the job",
        "operationId": "create_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Inputs",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobInput"
                },
                "default": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_name}/{version}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver By Name And Version",
        "operationId": "get_solver_by_name_and_version",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Name",
              "pattern": "^(simcore)/(services)/comp(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "solver_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Version",
              "type": "string"
            },
            "name": "version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List All Jobs",
        "description": "List of all jobs created by user ",
        "operationId": "list_all_jobs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List All Jobs V0 Jobs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job",
        "operationId": "get_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:start": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Start Job",
        "operationId": "start_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:stop": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Stop Job",
        "operationId": "stop_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:inspect": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Inspect Job",
        "operationId": "inspect_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}/outputs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Job Outputs",
        "operationId": "list_job_outputs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Job Outputs V0 Jobs  Job Id  Outputs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobOutput"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}/outputs/{output_name}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Output",
        "operationId": "get_job_output",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Output Name",
              "type": "string"
            },
            "name": "output_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_upload_file_v0_files_content_put": {
        "title": "Body_upload_file_v0_files_content_put",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "FileMetadata": {
        "title": "FileMetadata",
        "required": [
          "filename"
        ],
        "type": "object",
        "properties": {
          "file_id": {
            "title": "File Id",
            "type": "string",
            "description": "File unique identifier built upon its name and checksum",
            "format": "uuid"
          },
          "filename": {
            "title": "Filename",
            "type": "string",
            "description": "File with extenson"
          },
          "content_type": {
            "title": "Content Type",
            "type": "string"
          },
          "checksum": {
            "title": "Checksum",
            "type": "string",
            "description": "MD5 hash of the file's content"
          }
        },
        "description": "Describes a file stored on the server side ",
        "example": {
          "file_id": "f0e1fb11-208d-3ed2-b5ef-cab7a7398f78",
          "filename": "Architecture-of-Scalable-Distributed-ETL-System-whitepaper.pdf",
          "content_type": "application/pdf",
          "checksum": "de47d0e1229aa2dfb80097389094eadd-1"
        }
      },
      "Groups": {
        "title": "Groups",
        "required": [
          "me",
          "all"
        ],
        "type": "object",
        "properties": {
          "me": {
            "$ref": "#/components/schemas/UsersGroup"
          },
          "organizations": {
            "title": "Organizations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsersGroup"
            },
            "default": []
          },
          "all": {
            "$ref": "#/components/schemas/UsersGroup"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Job": {
        "title": "Job",
        "required": [
          "solver_id",
          "inputs_checksum",
          "created_at",
          "id",
          "url",
          "solver_url",
          "outputs_url"
        ],
        "type": "object",
        "properties": {
          "solver_id": {
            "title": "Solver Id",
            "type": "string",
            "description": "Solver used to run this job",
            "format": "uuid"
          },
          "inputs_checksum": {
            "title": "Inputs Checksum",
            "type": "string",
            "description": "Input's checksum"
          },
          "created_at": {
            "title": "Created At",
            "type": "string",
            "description": "Job creation timestamp",
            "format": "date-time"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to get this resource",
            "format": "uri"
          },
          "solver_url": {
            "title": "Solver Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the solver's job",
            "format": "uri"
          },
          "outputs_url": {
            "title": "Outputs Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to the job outputs",
            "format": "uri"
          }
        },
        "example": {
          "solver_id": "32cfd2c5-ad5c-4086-ba5e-6f76a17dcb7a",
          "inputs_checksum": "12345",
          "created_at": "2021-01-22T23:59:52.322176",
          "id": "f5c44f80-af84-3d45-8836-7933f67959a6",
          "url": "https://api.osparc.io/v0/jobs/f5c44f80-af84-3d45-8836-7933f67959a6",
          "solver_url": "https://api.osparc.io/v0/solvers/42838344-03de-4ce2-8d93-589a5dcdfd05",
          "outputs_url": "https://api.osparc.io/v0/jobs/f5c44f80-af84-3d45-8836-7933f67959a6/outputs"
        }
      },
      "JobInput": {
        "title": "JobInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name given to the input/output in solver specs (see solver metadata.yml)"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "Data type expected on this input/ouput"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Short human readable name to identify input/output"
          },
          "value": {
            "$ref": "#/components/schemas/PortValue"
          }
        },
        "example": {
          "name": "T",
          "type": "number",
          "title": "Temperature",
          "value": "33"
        }
      },
      "JobOutput": {
        "title": "JobOutput",
        "required": [
          "name",
          "value",
          "job_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Name given to the input/output in solver specs (see solver metadata.yml)"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "Data type expected on this input/ouput"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Short human readable name to identify input/output"
          },
          "value": {
            "$ref": "#/components/schemas/PortValue"
          },
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "description": "Job that produced this output",
            "format": "uuid"
          }
        },
        "example": {
          "name": "SAR",
          "type": "data:application/hdf5",
          "title": "SAR field output file-id",
          "value": "1dc2b1e6-a139-47ad-9e0c-b7b791cd4d7a",
          "job_id": "99d9ac65-9f10-4e2f-a433-b5e412bb037b"
        }
      },
      "JobStatus": {
        "title": "JobStatus",
        "required": [
          "job_id",
          "state",
          "submitted_at"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStates"
          },
          "progress": {
            "title": "Progress",
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "integer",
            "default": 0
          },
          "submitted_at": {
            "title": "Submitted At",
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "title": "Started At",
            "type": "string",
            "description": "Timestamp that indicate the moment the solver starts execution or None if the event did not occur",
            "format": "date-time"
          },
          "stopped_at": {
            "title": "Stopped At",
            "type": "string",
            "description": "Timestamp at which the solver finished or killed execution or None if the event did not occur",
            "format": "date-time"
          }
        },
        "description": "NOTE About naming. The result of an inspection on X returns a Status object\n    What is the status of X? What sort of state is X in?\n    SEE https://english.stackexchange.com/questions/12958/status-vs-state"
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          },
          "docs_url": {
            "title": "Docs Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "default": "https://docs.osparc.io"
          },
          "docs_dev_url": {
            "title": "Docs Dev Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "default": "https://api.osparc.io/dev/docs"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          },
          "doc_url": "https://api.osparc.io/doc",
          "doc_dev_url": "https://api.osparc.io/dev/doc"
        }
      },
      "PortValue": {
        "title": "PortValue",
        "anyOf": [
          {
            "type": "number"
          },
          {
            "type": "string"
          },
          {
            "type": "integer"
          }
        ]
      },
      "Profile": {
        "title": "Profile",
        "required": [
          "login",
          "role"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "example": "Maxwell"
          },
          "login": {
            "title": "Login",
            "type": "string",
            "format": "email"
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleEnum"
          },
          "groups": {
            "$ref": "#/components/schemas/Groups"
          },
          "gravatar_id": {
            "title": "Gravatar Id",
            "maxLength": 40,
            "type": "string",
            "description": "md5 hash value of email to retrieve an avatar image from https://www.gravatar.com"
          }
        },
        "example": {
          "first_name": "James",
          "last_name": "Maxwell",
          "login": "james-maxwell@itis.swiss",
          "role": "USER",
          "groups": {
            "me": {
              "gid": "123",
              "label": "maxy",
              "description": "primary group"
            },
            "organizations": [],
            "all": {
              "gid": "1",
              "label": "Everyone",
              "description": "all users"
            }
          },
          "gravatar_id": "9a8930a5b20d7048e37740bac5c1ca4f"
        }
      },
      "ProfileUpdate": {
        "title": "ProfileUpdate",
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "example": "Maxwell"
          }
        }
      },
      "Solver": {
        "title": "Solver",
        "required": [
          "name",
          "version",
          "id",
          "title",
          "maintainer",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "pattern": "^(simcore)/(services)/comp(/[\\w/-]+)+$",
            "type": "string",
            "description": "Unique solver name with path namespaces"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string",
            "description": "semantic version number of the node"
          },
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Human readable name"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "maintainer": {
            "title": "Maintainer",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "description": "Link to get this resource",
            "format": "uri"
          }
        },
        "description": "A released solver with a specific version ",
        "example": {
          "name": "simcore/services/comp/isolve",
          "version": "2.1.1",
          "id": "f7c25b7d-edd6-32a4-9751-6072e4163537",
          "title": "iSolve",
          "description": "EM solver",
          "maintainer": "info@itis.swiss",
          "url": "https://api.osparc.io/v0/solvers/f7c25b7d-edd6-32a4-9751-6072e4163537"
        }
      },
      "TaskStates": {
        "title": "TaskStates",
        "enum": [
          "undefined",
          "pending",
          "running",
          "success",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UserRoleEnum": {
        "title": "UserRoleEnum",
        "enum": [
          "ANONYMOUS",
          "GUEST",
          "USER",
          "TESTER"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UsersGroup": {
        "title": "UsersGroup",
        "required": [
          "gid",
          "label"
        ],
        "type": "object",
        "properties": {
          "gid": {
            "title": "Gid",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
