{
  "openapi": "3.0.2",
  "info": {
    "title": "Public API Server",
    "description": "**osparc-simcore Public RESTful API Specifications**\n## Python Library\n- Check the [documentation](https://itisfoundation.github.io/osparc-simcore-python-client)\n- Quick install: ``pip install git+https://github.com/ITISFoundation/osparc-simcore-python-client.git``\n",
    "version": "0.4.0",
    "x-logo": {
      "url": "https://raw.githubusercontent.com/ITISFoundation/osparc-manual/b809d93619512eb60c827b7e769c6145758378d0/_media/osparc-logo.svg",
      "altText": "osparc-simcore logo"
    }
  },
  "paths": {
    "/v0/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get My Profile",
        "operationId": "get_my_profile",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update My Profile",
        "operationId": "update_my_profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List Files",
        "description": "Lists all user's files ",
        "operationId": "list_files",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/files:upload": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload Single File",
        "operationId": "upload_single_file",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_single_file_v0_files_upload_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploaded"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files:upload-multiple": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Upload Multiple Files",
        "operationId": "upload_multiple_files",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_multiple_files_v0_files_upload_multiple_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Upload Multiple Files V0 Files Upload Multiple Post",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileUploaded"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}:download": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download File",
        "operationId": "download_file",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "File Id",
              "type": "string"
            },
            "name": "file_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/upload-multiple-view": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Files Upload Multiple View",
        "description": "Web form to upload files at http://localhost:8000/v0/files/upload-form-view\n\nOvercomes limitation of Swagger UI view\nNOTE: As of 2020-10-07, Swagger UI doesn't support multiple file uploads in the same form field",
        "operationId": "files_upload_multiple_view",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/solvers": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Solvers",
        "description": "Returns a list of the latest version of each solver",
        "operationId": "list_solvers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Solvers V0 Solvers Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Solver"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_id}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver By Id",
        "operationId": "get_solver_by_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_name}/{version}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver By Name And Version",
        "operationId": "get_solver_by_name_and_version",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Name",
              "pattern": "^(simcore)/(services)/(comp)(/[^\\s/]+)+$",
              "type": "string"
            },
            "name": "solver_name",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Version",
              "type": "string"
            },
            "name": "version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_id}/jobs/": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Jobs",
        "description": "List of all jobs with a given solver ",
        "operationId": "list_jobs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Create Job",
        "description": "Creates a job for a solver with given inputs.\n\nNOTE: This operation does **not** start the job",
        "operationId": "create_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Inputs",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobInput"
                },
                "default": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_id}/jobs:run": {
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Run Job",
        "description": "create + start job in a single call ",
        "operationId": "run_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Solver Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "solver_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Inputs",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/JobInput"
                },
                "default": []
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List All Jobs",
        "description": "List of all jobs created by user ",
        "operationId": "list_all_jobs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job",
        "operationId": "get_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:start": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Start Job",
        "operationId": "start_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:stop": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Stop Job",
        "operationId": "stop_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}:inspect": {
      "post": {
        "tags": [
          "jobs"
        ],
        "summary": "Inspect Job",
        "operationId": "inspect_job",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}/outputs": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "List Job Outputs",
        "operationId": "list_job_outputs",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Job Outputs V0 Jobs  Job Id  Outputs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobOutput"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/jobs/{job_id}/outputs/{output_name}": {
      "get": {
        "tags": [
          "jobs"
        ],
        "summary": "Get Job Output",
        "operationId": "get_job_output",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Job Id",
              "type": "string",
              "format": "uuid"
            },
            "name": "job_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Output Name",
              "minLength": 3,
              "type": "string"
            },
            "name": "output_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_upload_multiple_files_v0_files_upload_multiple_post": {
        "title": "Body_upload_multiple_files_v0_files_upload_multiple_post",
        "required": [
          "files"
        ],
        "type": "object",
        "properties": {
          "files": {
            "title": "Files",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "Body_upload_single_file_v0_files_upload_post": {
        "title": "Body_upload_single_file_v0_files_upload_post",
        "required": [
          "file"
        ],
        "type": "object",
        "properties": {
          "file": {
            "title": "File",
            "type": "string",
            "format": "binary"
          }
        }
      },
      "FileUploaded": {
        "title": "FileUploaded",
        "required": [
          "filename",
          "content_type",
          "hash"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "title": "Filename",
            "type": "string"
          },
          "content_type": {
            "title": "Content Type",
            "type": "string"
          },
          "hash": {
            "title": "Hash",
            "type": "string"
          },
          "download_url": {
            "title": "Download Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "Describes a file on the server side "
      },
      "Groups": {
        "title": "Groups",
        "required": [
          "me",
          "all"
        ],
        "type": "object",
        "properties": {
          "me": {
            "$ref": "#/components/schemas/UsersGroup"
          },
          "organizations": {
            "title": "Organizations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsersGroup"
            },
            "default": []
          },
          "all": {
            "$ref": "#/components/schemas/UsersGroup"
          }
        }
      },
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "errors": {
            "title": "Validation errors",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "Job": {
        "title": "Job",
        "required": [
          "job_id",
          "inputs_sha",
          "solver_id",
          "solver_url",
          "inspect_url",
          "outputs_url"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "format": "uuid"
          },
          "inputs_sha": {
            "title": "Inputs Sha",
            "type": "string"
          },
          "solver_id": {
            "title": "Solver Id",
            "type": "string",
            "format": "uuid"
          },
          "solver_url": {
            "title": "Solver Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "inspect_url": {
            "title": "Inspect Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          },
          "outputs_url": {
            "title": "Outputs Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        }
      },
      "JobInput": {
        "title": "JobInput",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 3,
            "type": "string",
            "description": "Name given to the input/output in solver specs (see solver metadata.yml)"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "Data type expected on this input/ouput"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Short human readable name to identify input/output"
          },
          "value": {
            "title": "Value",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "example": {
          "name": "T",
          "content_type": "number",
          "title": "Temperature",
          "value": "33"
        }
      },
      "JobOutput": {
        "title": "JobOutput",
        "required": [
          "name",
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "minLength": 3,
            "type": "string",
            "description": "Name given to the input/output in solver specs (see solver metadata.yml)"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "Data type expected on this input/ouput"
          },
          "title": {
            "title": "Title",
            "type": "string",
            "description": "Short human readable name to identify input/output"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskStates"
              }
            ],
            "description": "State towards completion of this output"
          },
          "value": {
            "title": "Value",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": "Result value in this output"
          }
        },
        "example": {
          "name": "SAR",
          "content_type": "data:application/hdf5",
          "title": "SAR field output file",
          "value": "1dc2b1e6-a139-47ad-9e0c-b7b791cd4d7a"
        }
      },
      "JobStatus": {
        "title": "JobStatus",
        "required": [
          "job_id",
          "state",
          "submitted_at"
        ],
        "type": "object",
        "properties": {
          "job_id": {
            "title": "Job Id",
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/TaskStates"
          },
          "progress": {
            "title": "Progress",
            "maximum": 100.0,
            "minimum": 0.0,
            "type": "integer",
            "default": 0
          },
          "submitted_at": {
            "title": "Submitted At",
            "type": "string",
            "format": "date-time"
          },
          "started_at": {
            "title": "Started At",
            "type": "string",
            "description": "Time stamp that indicates the solver starting execution",
            "format": "date-time"
          },
          "stopped_at": {
            "title": "Stopped At",
            "type": "string",
            "description": "Time stamp at which the solver finished or killed execution",
            "format": "date-time"
          }
        },
        "description": "NOTE About naming. The result of an inspection on X returns a Status object\n    What is the status of X? What sort of state is X in?\n    SEE https://english.stackexchange.com/questions/12958/status-vs-state"
      },
      "Meta": {
        "title": "Meta",
        "required": [
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "version": {
            "title": "Version",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
            },
            "description": "Maps every route's path tag with a released version"
          },
          "docs_url": {
            "title": "Docs Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "default": "https://docs.osparc.io"
          },
          "docs_dev_url": {
            "title": "Docs Dev Url",
            "maxLength": 65536,
            "minLength": 1,
            "type": "string",
            "format": "uri",
            "default": "https://api.osparc.io/dev/docs"
          }
        },
        "example": {
          "name": "simcore_service_foo",
          "version": "2.4.45",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          },
          "doc_url": "https://api.osparc.io/doc",
          "doc_dev_url": "https://api.osparc.io/dev/doc"
        }
      },
      "Profile": {
        "title": "Profile",
        "required": [
          "login",
          "role"
        ],
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "example": "Maxwell"
          },
          "login": {
            "title": "Login",
            "type": "string",
            "format": "email"
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleEnum"
          },
          "groups": {
            "$ref": "#/components/schemas/Groups"
          },
          "gravatar_id": {
            "title": "Gravatar Id",
            "maxLength": 40,
            "type": "string",
            "description": "Hash value of email to retrieve an avatar image from https://www.gravatar.com"
          }
        }
      },
      "ProfileUpdate": {
        "title": "ProfileUpdate",
        "type": "object",
        "properties": {
          "first_name": {
            "title": "First Name",
            "type": "string",
            "example": "James"
          },
          "last_name": {
            "title": "Last Name",
            "type": "string",
            "example": "Maxwell"
          }
        }
      },
      "Solver": {
        "title": "Solver",
        "required": [
          "uuid",
          "name",
          "version",
          "title",
          "maintainer",
          "solver_url"
        ],
        "type": "object",
        "properties": {
          "uuid": {
            "title": "Uuid",
            "type": "string",
            "description": "Same as the solver's image sha256",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string",
            "description": "Image name including namespace"
          },
          "version": {
            "title": "Version",
            "type": "string"
          },
          "version_aliases": {
            "title": "Version Aliases",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "maintainer": {
            "title": "Maintainer",
            "type": "string"
          },
          "released": {
            "title": "Released",
            "type": "string",
            "format": "date-time"
          },
          "solver_url": {
            "title": "Solver Url",
            "maxLength": 2083,
            "minLength": 1,
            "type": "string",
            "format": "uri"
          }
        },
        "description": "A released solver with a specific version\n\nThis version might have human-readable alias (e.g. latest) or\nhierarchical version tags (e.g. 3, 3.2)"
      },
      "TaskStates": {
        "title": "TaskStates",
        "enum": [
          "undefined",
          "pending",
          "running",
          "success",
          "failed"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UserRoleEnum": {
        "title": "UserRoleEnum",
        "enum": [
          "ANONYMOUS",
          "GUEST",
          "USER",
          "TESTER"
        ],
        "type": "string",
        "description": "An enumeration."
      },
      "UsersGroup": {
        "title": "UsersGroup",
        "required": [
          "gid",
          "label"
        ],
        "type": "object",
        "properties": {
          "gid": {
            "title": "Gid",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        }
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
