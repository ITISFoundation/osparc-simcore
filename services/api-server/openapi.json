{
  "openapi": "3.1.0",
  "info": {
    "title": "osparc.io public API",
    "description": "osparc-simcore public API specifications",
    "version": "0.7.0"
  },
  "paths": {
    "/v0/meta": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Get Service Metadata",
        "operationId": "get_service_metadata",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Meta"
                }
              }
            }
          }
        }
      }
    },
    "/v0/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get My Profile",
        "operationId": "get_my_profile",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update My Profile",
        "operationId": "update_my_profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List Files",
        "description": "\ud83d\udea8 **Deprecated**: This endpoint is deprecated and will be removed in a future release.\nPlease use `GET /v0/files/page` instead.\n\n\n\nLists all files stored in the system\n\nAdded in *version 0.5*: \n\nRemoved in *version 0.7*: This endpoint is deprecated and will be removed in a future version",
        "operationId": "list_files",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/File"
                  },
                  "type": "array",
                  "title": "Response List Files V0 Files Get"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/files/content": {
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Upload File",
        "description": "Uploads a single file to the system",
        "operationId": "upload_file",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "content-length",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Content-Length"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_v0_files_content_put"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Get Upload Links",
        "description": "Get upload links for uploading a file to storage",
        "operationId": "get_upload_links",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/UserFileToProgramJob"
                  },
                  {
                    "$ref": "#/components/schemas/UserFile"
                  }
                ],
                "title": "Client File"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientFileUploadData"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get File",
        "description": "Gets metadata for a given file resource",
        "operationId": "get_file",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete File",
        "operationId": "delete_file",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files:search": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Search Files Page",
        "description": "Search files",
        "operationId": "search_files_page",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "sha256_checksum",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-fA-F0-9]{64}$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sha256 Checksum"
            }
          },
          {
            "name": "file_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_File_"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}:abort": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Abort Multipart Upload",
        "operationId": "abort_multipart_upload",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_abort_multipart_upload_v0_files__file_id__abort_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}:complete": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Complete Multipart Upload",
        "operationId": "complete_multipart_upload",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_complete_multipart_upload_v0_files__file_id__complete_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}/content": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download File",
        "operationId": "download_file",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "File Id"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response"
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a arbitrary binary data"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/programs/{program_key}/releases/{version}": {
      "get": {
        "tags": [
          "programs"
        ],
        "summary": "Get Program Release",
        "description": "Gets a specific release of a solver",
        "operationId": "get_program_release",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "program_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Program Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Program"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/programs/{program_key}/releases/{version}/jobs": {
      "post": {
        "tags": [
          "programs"
        ],
        "summary": "Create Program Job",
        "description": "Creates a program job",
        "operationId": "create_program_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "program_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Program Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "x-simcore-parent-project-uuid",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Project-Uuid"
            }
          },
          {
            "name": "x-simcore-parent-node-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Node-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_create_program_job_v0_programs__program_key__releases__version__jobs_post"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Solvers",
        "description": "\ud83d\udea8 **Deprecated**: This endpoint is deprecated and will be removed in a future release.\nPlease use `GET /v0/solvers/page` instead.\n\n\n\nLists all available solvers (latest version)\n\nNew in *version 0.5.0*\n\nRemoved in *version 0.7*: This endpoint is deprecated and will be removed in a future version",
        "operationId": "list_solvers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Solver"
                  },
                  "type": "array",
                  "title": "Response List Solvers V0 Solvers Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/solvers/releases": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Lists All Releases",
        "description": "\ud83d\udea8 **Deprecated**: This endpoint is deprecated and will be removed in a future release.\nPlease use `GET /v0/solvers/{solver_key}/releases/page` instead.\n\n\n\nLists all released solvers (not just latest version)\n\nNew in *version 0.5.0*\n\nRemoved in *version 0.7*: This endpoint is deprecated and will be removed in a future version",
        "operationId": "list_solvers_releases",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Solver"
                  },
                  "type": "array",
                  "title": "Response List Solvers Releases V0 Solvers Releases Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/solvers/{solver_key}/latest": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Latest Release of a Solver",
        "description": "Gets latest release of a solver",
        "operationId": "get_solver",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Solver Releases",
        "description": "Lists all releases of a given (one) solver\n\nSEE get_solver_releases_page for a paginated version of this function",
        "operationId": "list_solver_releases",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Solver"
                  },
                  "title": "Response List Solver Releases V0 Solvers  Solver Key  Releases Get"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver Release",
        "description": "Gets a specific release of a solver",
        "operationId": "get_solver_release",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Solver"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/ports": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Solver Ports",
        "description": "Lists inputs and outputs of a given solver\n\nNew in *version 0.5.0*",
        "operationId": "list_solver_ports",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnePage_SolverPort_"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/pricing_plan": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Solver Pricing Plan",
        "description": "Gets solver pricing plan\n\nNew in *version 0.7*",
        "operationId": "get_solver_pricing_plan",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePricingPlanGetLegacy"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs": {
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Create Solver Job",
        "description": "Creates a job in a specific release with given inputs.\n\nNOTE: This operation does **not** start the job",
        "operationId": "create_solver_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "hidden",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Hidden"
            }
          },
          {
            "name": "x-simcore-parent-project-uuid",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Project-Uuid"
            }
          },
          {
            "name": "x-simcore-parent-node-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Node-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobInputs"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "List Jobs",
        "description": "\ud83d\udea8 **Deprecated**: This endpoint is deprecated and will be removed in a future release.\nPlease use `GET /{solver_key}/releases/{version}/jobs/page` instead.\n\n\n\nList of jobs in a specific released solver (limited to 20 jobs)\n\nNew in *version 0.5*\n\nRemoved in *version 0.7*: This endpoint is deprecated and will be removed in a future version",
        "operationId": "list_jobs",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Job"
                  },
                  "title": "Response List Jobs V0 Solvers  Solver Key  Releases  Version  Jobs Get"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}": {
      "delete": {
        "tags": [
          "solvers"
        ],
        "summary": "Delete Job",
        "description": "Deletes an existing solver job\n\nNew in *version 0.7*",
        "operationId": "delete_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job",
        "description": "Gets job of a given solver",
        "operationId": "get_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:start": {
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Start Job",
        "description": "Starts job job_id created with the solver solver_key:version\n\nAdded in *version 0.4.3*: query parameter `cluster_id`\nAdded in *version 0.6*: responds with a 202 when successfully starting a computation\nChanged in *version 0.8*: query parameter `cluster_id` deprecated",
        "operationId": "start_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "cluster_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "deprecated": true,
              "title": "Cluster Id"
            },
            "deprecated": true
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "200": {
            "description": "Job already started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "406": {
            "description": "Cluster not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Configuration error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:stop": {
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Stop Job",
        "operationId": "stop_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}:inspect": {
      "post": {
        "tags": [
          "solvers"
        ],
        "summary": "Inspect Job",
        "operationId": "inspect_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/metadata": {
      "patch": {
        "tags": [
          "solvers"
        ],
        "summary": "Replace Job Custom Metadata",
        "description": "Updates custom metadata from a job\n\nNew in *version 0.7*",
        "operationId": "replace_job_custom_metadata",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobMetadataUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Metadata not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job Custom Metadata",
        "description": "Gets custom metadata from a job\n\nNew in *version 0.7*",
        "operationId": "get_job_custom_metadata",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobMetadata"
                }
              }
            }
          },
          "404": {
            "description": "Metadata not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/page": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Jobs Page",
        "description": "List of jobs on a specific released solver (includes pagination)\n\nNew in *version 0.7*",
        "operationId": "get_jobs_page",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_Job_"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/outputs": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job Outputs",
        "operationId": "get_job_outputs",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOutputs"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/outputs/logfile": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job Output Logfile",
        "description": "Special extra output with persistent logs file for the solver run.\n\n**NOTE**: this is not a log stream but a predefined output that is only\navailable after the job is done.\n\nNew in *version 0.4.0*",
        "operationId": "get_job_output_logfile",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "307": {
            "description": "Successful Response"
          },
          "200": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns a log file"
          },
          "404": {
            "description": "Log not found"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/wallet": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job Wallet",
        "description": "Get job wallet\n\nNew in *version 0.7*",
        "operationId": "get_job_wallet",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletGetWithAvailableCreditsLegacy"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "403": {
            "description": "Access to wallet is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/pricing_unit": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Job Pricing Unit",
        "description": "Get job pricing unit\n\nNew in *version 0.7*",
        "operationId": "get_job_pricing_unit",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingUnitGetLegacy"
                }
              }
            }
          },
          "404": {
            "description": "Pricing unit not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/solvers/{solver_key}/releases/{version}/jobs/{job_id}/logstream": {
      "get": {
        "tags": [
          "solvers"
        ],
        "summary": "Get Log Stream",
        "operationId": "get_log_stream",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "solver_key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^simcore/services/comp/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
              "title": "Solver Key"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "title": "Version"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a JobLog or an ErrorGet",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "string",
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/JobLog"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorGet"
                    }
                  ],
                  "title": "Response 200 Get Log Stream V0 Solvers  Solver Key  Releases  Version  Jobs  Job Id  Logstream Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: Logs are already being streamed",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies": {
      "get": {
        "tags": [
          "studies"
        ],
        "summary": "List Studies",
        "description": "New in *version 0.5.0*",
        "operationId": "list_studies",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_Study_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}": {
      "get": {
        "tags": [
          "studies"
        ],
        "summary": "Get Study",
        "description": "New in *version 0.5.0*",
        "operationId": "get_study",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Study"
                }
              }
            }
          },
          "404": {
            "description": "Study not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}:clone": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Clone Study",
        "operationId": "clone_study",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "x-simcore-parent-project-uuid",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Project-Uuid"
            }
          },
          {
            "name": "x-simcore-parent-node-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Node-Id"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Study"
                }
              }
            }
          },
          "404": {
            "description": "Study not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/ports": {
      "get": {
        "tags": [
          "studies"
        ],
        "summary": "List Study Ports",
        "description": "Lists metadata on ports of a given study\n\nNew in *version 0.5.0*",
        "operationId": "list_study_ports",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnePage_StudyPort_"
                }
              }
            }
          },
          "404": {
            "description": "Study not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Create Study Job",
        "description": "hidden -- if True (default) hides project from UI",
        "operationId": "create_study_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "hidden",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Hidden"
            }
          },
          {
            "name": "x-simcore-parent-project-uuid",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Project-Uuid"
            }
          },
          {
            "name": "x-simcore-parent-node-id",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Simcore-Parent-Node-Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobInputs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}": {
      "delete": {
        "tags": [
          "studies"
        ],
        "summary": "Delete Study Job",
        "description": "Deletes an existing study job",
        "operationId": "delete_study_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            },
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}:start": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Start Study Job",
        "description": "Changed in *version 0.6.0*: Now responds with a 202 when successfully starting a computation\nChanged in *version 0.8*: query parameter `cluster_id` deprecated",
        "operationId": "start_study_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          },
          {
            "name": "cluster_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "deprecated": true,
              "title": "Cluster Id"
            },
            "deprecated": true
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "402": {
            "description": "Payment required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "404": {
            "description": "Job/wallet/pricing details not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "200": {
            "description": "Job already started",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "406": {
            "description": "Cluster not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Configuration error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}:stop": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Stop Study Job",
        "operationId": "stop_study_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}:inspect": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Inspect Study Job",
        "operationId": "inspect_study_job",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobStatus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}/outputs": {
      "post": {
        "tags": [
          "studies"
        ],
        "summary": "Get Study Job Outputs",
        "operationId": "get_study_job_outputs",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobOutputs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}/outputs/log-links": {
      "get": {
        "tags": [
          "studies"
        ],
        "summary": "Get download links for study job log files",
        "operationId": "get_study_job_output_logfile",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobLogsMap"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/studies/{study_id}/jobs/{job_id}/metadata": {
      "get": {
        "tags": [
          "studies"
        ],
        "summary": "Get Study Job Custom Metadata",
        "description": "Get custom metadata from a study's job\n\nNew in *version 0.7*",
        "operationId": "get_study_job_custom_metadata",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "studies"
        ],
        "summary": "Replace Study Job Custom Metadata",
        "description": "Changes custom metadata of a study's job\n\nNew in *version 0.7*",
        "operationId": "replace_study_job_custom_metadata",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "study_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Study Id"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Job Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobMetadataUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobMetadata"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/wallets/default": {
      "get": {
        "tags": [
          "wallets"
        ],
        "summary": "Get Default Wallet",
        "description": "Get default wallet\n\nNew in *version 0.7*",
        "operationId": "get_default_wallet",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletGetWithAvailableCreditsLegacy"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "403": {
            "description": "Access to wallet is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/wallets/{wallet_id}": {
      "get": {
        "tags": [
          "wallets"
        ],
        "summary": "Get Wallet",
        "description": "Get wallet\n\nNew in *version 0.7*",
        "operationId": "get_wallet",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Wallet Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletGetWithAvailableCreditsLegacy"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "403": {
            "description": "Access to wallet is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/wallets/{wallet_id}/licensed-items": {
      "get": {
        "tags": [
          "wallets"
        ],
        "summary": "Get Available Licensed Items For Wallet",
        "description": "Get all available licensed items for a given wallet",
        "operationId": "get_available_licensed_items_for_wallet",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Wallet Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_LicensedItemGet_"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "403": {
            "description": "Access to wallet is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/wallets/{wallet_id}/licensed-items/{licensed_item_id}/checkout": {
      "post": {
        "tags": [
          "wallets"
        ],
        "summary": "Checkout Licensed Item",
        "description": "Checkout licensed item",
        "operationId": "checkout_licensed_item",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "wallet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Wallet Id"
            }
          },
          {
            "name": "licensed_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Licensed Item Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensedItemCheckoutData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensedItemCheckoutGet"
                }
              }
            }
          },
          "404": {
            "description": "Wallet not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "403": {
            "description": "Access to wallet is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/credits/price": {
      "get": {
        "tags": [
          "credits"
        ],
        "summary": "Get Credits Price",
        "description": "New in *version 0.6.0*",
        "operationId": "get_credits_price",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCreditPriceLegacy"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v0/licensed-items": {
      "get": {
        "tags": [
          "licensed-items"
        ],
        "summary": "Get Licensed Items",
        "description": "Get all licensed items",
        "operationId": "get_licensed_items",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page_LicensedItemGet_"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/licensed-items/{licensed_item_id}/checked-out-items/{licensed_item_checkout_id}/release": {
      "post": {
        "tags": [
          "licensed-items"
        ],
        "summary": "Release Licensed Item",
        "description": "Release previously checked out licensed item",
        "operationId": "release_licensed_item",
        "security": [
          {
            "HTTPBasic": []
          }
        ],
        "parameters": [
          {
            "name": "licensed_item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Licensed Item Id"
            }
          },
          {
            "name": "licensed_item_checkout_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Licensed Item Checkout Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensedItemCheckoutGet"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "502": {
            "description": "Unexpected error when communicating with backend service",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "503": {
            "description": "Service unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "504": {
            "description": "Request to a backend service timed out.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorGet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_abort_multipart_upload_v0_files__file_id__abort_post": {
        "properties": {
          "client_file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserFileToProgramJob"
              },
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "title": "Client File"
          }
        },
        "type": "object",
        "required": [
          "client_file"
        ],
        "title": "Body_abort_multipart_upload_v0_files__file_id__abort_post"
      },
      "Body_complete_multipart_upload_v0_files__file_id__complete_post": {
        "properties": {
          "client_file": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UserFileToProgramJob"
              },
              {
                "$ref": "#/components/schemas/UserFile"
              }
            ],
            "title": "Client File"
          },
          "uploaded_parts": {
            "$ref": "#/components/schemas/FileUploadCompletionBody"
          }
        },
        "type": "object",
        "required": [
          "client_file",
          "uploaded_parts"
        ],
        "title": "Body_complete_multipart_upload_v0_files__file_id__complete_post"
      },
      "Body_create_program_job_v0_programs__program_key__releases__version__jobs_post": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 500
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "title": "Body_create_program_job_v0_programs__program_key__releases__version__jobs_post"
      },
      "Body_upload_file_v0_files_content_put": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_file_v0_files_content_put"
      },
      "ClientFileUploadData": {
        "properties": {
          "file_id": {
            "type": "string",
            "format": "uuid",
            "title": "File Id",
            "description": "The file resource id"
          },
          "upload_schema": {
            "$ref": "#/components/schemas/FileUploadData",
            "description": "Schema for uploading file"
          }
        },
        "type": "object",
        "required": [
          "file_id",
          "upload_schema"
        ],
        "title": "ClientFileUploadData"
      },
      "ErrorGet": {
        "properties": {
          "errors": {
            "items": {},
            "type": "array",
            "title": "Errors"
          }
        },
        "type": "object",
        "required": [
          "errors"
        ],
        "title": "ErrorGet",
        "example": {
          "errors": [
            "some error message",
            "another error message"
          ]
        }
      },
      "File": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id",
            "description": "Resource identifier"
          },
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "Name of the file with extension"
          },
          "content_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Type",
            "description": "Guess of type content [EXPERIMENTAL]"
          },
          "checksum": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-fA-F0-9]{64}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Checksum",
            "description": "SHA256 hash of the file's content"
          },
          "e_tag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "E Tag",
            "description": "S3 entity tag"
          }
        },
        "type": "object",
        "required": [
          "id",
          "filename"
        ],
        "title": "File",
        "description": "Represents a file stored on the server side i.e. a unique reference to a file in the cloud."
      },
      "FileUploadCompletionBody": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/UploadedPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "parts"
        ],
        "title": "FileUploadCompletionBody"
      },
      "FileUploadData": {
        "properties": {
          "chunk_size": {
            "type": "integer",
            "minimum": 0,
            "title": "Chunk Size"
          },
          "urls": {
            "items": {
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Urls"
          },
          "links": {
            "$ref": "#/components/schemas/UploadLinks"
          }
        },
        "type": "object",
        "required": [
          "chunk_size",
          "urls",
          "links"
        ],
        "title": "FileUploadData"
      },
      "GetCreditPriceLegacy": {
        "properties": {
          "productName": {
            "type": "string",
            "title": "Productname"
          },
          "usdPerCredit": {
            "anyOf": [
              {
                "type": "number",
                "minimum": 0.0
              },
              {
                "type": "null"
              }
            ],
            "title": "Usdpercredit",
            "description": "Price of a credit in USD. If None, then this product's price is UNDEFINED"
          },
          "minPaymentAmountUsd": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Minpaymentamountusd",
            "description": "Minimum amount (included) in USD that can be paid for this productCan be None if this product's price is UNDEFINED"
          }
        },
        "type": "object",
        "required": [
          "productName",
          "usdPerCredit",
          "minPaymentAmountUsd"
        ],
        "title": "GetCreditPriceLegacy"
      },
      "Groups": {
        "properties": {
          "me": {
            "$ref": "#/components/schemas/UsersGroup"
          },
          "organizations": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/UsersGroup"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organizations",
            "default": []
          },
          "all": {
            "$ref": "#/components/schemas/UsersGroup"
          }
        },
        "type": "object",
        "required": [
          "me",
          "all"
        ],
        "title": "Groups"
      },
      "HTTPValidationError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Validation errors"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Job": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "pattern": "^([^\\s/]+/?){1,10}$",
            "title": "Name"
          },
          "inputs_checksum": {
            "type": "string",
            "title": "Inputs Checksum",
            "description": "Input's checksum"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "Job creation timestamp"
          },
          "runner_name": {
            "type": "string",
            "pattern": "^([^\\s/]+/?){1,10}$",
            "title": "Runner Name",
            "description": "Runner that executes job"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Link to get this resource (self)"
          },
          "runner_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Runner Url",
            "description": "Link to the solver's job (parent collection)"
          },
          "outputs_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Outputs Url",
            "description": "Link to the job outputs (sub-collection)"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name",
          "inputs_checksum",
          "created_at",
          "runner_name",
          "url",
          "runner_url",
          "outputs_url"
        ],
        "title": "Job",
        "example": {
          "created_at": "2021-01-22T23:59:52.322176",
          "id": "f622946d-fd29-35b9-a193-abdd1095167c",
          "inputs_checksum": "12345",
          "name": "solvers/isolve/releases/1.3.4/jobs/f622946d-fd29-35b9-a193-abdd1095167c",
          "outputs_url": "https://api.osparc.io/v0/solvers/isolve/releases/1.3.4/jobs/f622946d-fd29-35b9-a193-abdd1095167c/outputs",
          "runner_name": "solvers/isolve/releases/1.3.4",
          "runner_url": "https://api.osparc.io/v0/solvers/isolve/releases/1.3.4",
          "url": "https://api.osparc.io/v0/solvers/isolve/releases/1.3.4/jobs/f622946d-fd29-35b9-a193-abdd1095167c"
        }
      },
      "JobInputs": {
        "properties": {
          "values": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/File"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Values"
          }
        },
        "type": "object",
        "required": [
          "values"
        ],
        "title": "JobInputs",
        "example": {
          "values": {
            "enabled": true,
            "input_file": {
              "filename": "input.txt",
              "id": "0a3b2c56-dbcd-4871-b93b-d454b7883f9f"
            },
            "n": 55,
            "title": "Temperature",
            "x": 4.33
          }
        }
      },
      "JobLog": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id"
          },
          "node_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Id"
          },
          "log_level": {
            "type": "integer",
            "title": "Log Level"
          },
          "messages": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Messages"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "log_level",
          "messages"
        ],
        "title": "JobLog",
        "example": {
          "job_id": "145beae4-a3a8-4fde-adbb-4e8257c2c083",
          "log_level": 10,
          "messages": [
            "PROGRESS: 5/10"
          ],
          "node_id": "3742215e-6756-48d2-8b73-4d043065309f"
        }
      },
      "JobLogsMap": {
        "properties": {
          "log_links": {
            "items": {
              "$ref": "#/components/schemas/LogLink"
            },
            "type": "array",
            "title": "Log Links",
            "description": "Array of download links"
          }
        },
        "type": "object",
        "required": [
          "log_links"
        ],
        "title": "JobLogsMap"
      },
      "JobMetadata": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id",
            "description": "Parent Job"
          },
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "object",
            "title": "Metadata",
            "description": "Custom key-value map"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Link to get this resource (self)"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "metadata",
          "url"
        ],
        "title": "JobMetadata",
        "example": {
          "job_id": "3497e4de-0e69-41fb-b08f-7f3875a1ac4b",
          "metadata": {
            "bool": "true",
            "float": "3.14",
            "int": "42",
            "str": "hej med dig"
          },
          "url": "https://f02b2452-1dd8-4882-b673-af06373b41b3.fake"
        }
      },
      "JobMetadataUpdate": {
        "properties": {
          "metadata": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ]
            },
            "type": "object",
            "title": "Metadata",
            "description": "Custom key-value map"
          }
        },
        "type": "object",
        "title": "JobMetadataUpdate",
        "example": {
          "metadata": {
            "bool": "true",
            "float": "3.14",
            "int": "42",
            "str": "hej med dig"
          }
        }
      },
      "JobOutputs": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id",
            "description": "Job that produced this output"
          },
          "results": {
            "additionalProperties": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/File"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "string"
                },
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "results"
        ],
        "title": "JobOutputs",
        "example": {
          "job_id": "99d9ac65-9f10-4e2f-a433-b5e412bb037b",
          "results": {
            "enabled": false,
            "maxSAR": 4.33,
            "n": 55,
            "output_file": {
              "filename": "sar_matrix.txt",
              "id": "0a3b2c56-dbcd-4871-b93b-d454b7883f9f"
            },
            "title": "Specific Absorption Rate"
          }
        }
      },
      "JobStatus": {
        "properties": {
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id"
          },
          "state": {
            "$ref": "#/components/schemas/RunningState"
          },
          "progress": {
            "type": "integer",
            "maximum": 100,
            "minimum": 0,
            "title": "Progress",
            "default": 0
          },
          "submitted_at": {
            "type": "string",
            "format": "date-time",
            "title": "Submitted At",
            "description": "Last modification timestamp of the solver job"
          },
          "started_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Started At",
            "description": "Timestamp that indicate the moment the solver starts execution or None if the event did not occur"
          },
          "stopped_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stopped At",
            "description": "Timestamp at which the solver finished or killed execution or None if the event did not occur"
          }
        },
        "type": "object",
        "required": [
          "job_id",
          "state",
          "submitted_at"
        ],
        "title": "JobStatus",
        "example": {
          "job_id": "145beae4-a3a8-4fde-adbb-4e8257c2c083",
          "progress": 3,
          "started_at": "2021-04-01 07:16:43.670610",
          "state": "STARTED",
          "submitted_at": "2021-04-01 07:15:54.631007"
        }
      },
      "LicensedItemCheckoutData": {
        "properties": {
          "number_of_seats": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Number Of Seats",
            "minimum": 0
          },
          "service_run_id": {
            "type": "string",
            "title": "Service Run Id"
          }
        },
        "type": "object",
        "required": [
          "number_of_seats",
          "service_run_id"
        ],
        "title": "LicensedItemCheckoutData"
      },
      "LicensedItemCheckoutGet": {
        "properties": {
          "licensed_item_checkout_id": {
            "type": "string",
            "format": "uuid",
            "title": "Licensed Item Checkout Id"
          },
          "licensed_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Licensed Item Id"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Version"
          },
          "wallet_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Wallet Id",
            "minimum": 0
          },
          "user_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "User Id",
            "minimum": 0
          },
          "product_name": {
            "type": "string",
            "title": "Product Name"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "title": "Started At"
          },
          "stopped_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stopped At"
          },
          "num_of_seats": {
            "type": "integer",
            "title": "Num Of Seats"
          }
        },
        "type": "object",
        "required": [
          "licensed_item_checkout_id",
          "licensed_item_id",
          "key",
          "version",
          "wallet_id",
          "user_id",
          "product_name",
          "started_at",
          "stopped_at",
          "num_of_seats"
        ],
        "title": "LicensedItemCheckoutGet"
      },
      "LicensedItemGet": {
        "properties": {
          "licensed_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Licensed Item Id"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "version": {
            "type": "string",
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Version"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "licensed_resource_type": {
            "$ref": "#/components/schemas/LicensedResourceType"
          },
          "licensed_resources": {
            "items": {
              "$ref": "#/components/schemas/LicensedResource"
            },
            "type": "array",
            "title": "Licensed Resources"
          },
          "pricing_plan_id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricing Plan Id",
            "minimum": 0
          },
          "is_hidden_on_market": {
            "type": "boolean",
            "title": "Is Hidden On Market"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "title": "Modified At"
          }
        },
        "type": "object",
        "required": [
          "licensed_item_id",
          "key",
          "version",
          "display_name",
          "licensed_resource_type",
          "licensed_resources",
          "pricing_plan_id",
          "is_hidden_on_market",
          "created_at",
          "modified_at"
        ],
        "title": "LicensedItemGet"
      },
      "LicensedResource": {
        "properties": {
          "source": {
            "$ref": "#/components/schemas/LicensedResourceSource"
          },
          "category_id": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Category Id"
          },
          "category_display": {
            "type": "string",
            "title": "Category Display"
          },
          "terms_of_use_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Terms Of Use Url"
          }
        },
        "type": "object",
        "required": [
          "source",
          "category_id",
          "category_display",
          "terms_of_use_url"
        ],
        "title": "LicensedResource"
      },
      "LicensedResourceSource": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "thumbnail": {
            "type": "string",
            "title": "Thumbnail"
          },
          "features": {
            "$ref": "#/components/schemas/LicensedResourceSourceFeaturesDict"
          },
          "doi": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Doi"
          },
          "license_key": {
            "type": "string",
            "title": "License Key"
          },
          "license_version": {
            "type": "string",
            "title": "License Version"
          },
          "protection": {
            "type": "string",
            "enum": [
              "Code",
              "PayPal"
            ],
            "title": "Protection"
          },
          "available_from_url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Available From Url"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "thumbnail",
          "features",
          "doi",
          "license_key",
          "license_version",
          "protection",
          "available_from_url"
        ],
        "title": "LicensedResourceSource"
      },
      "LicensedResourceSourceFeaturesDict": {
        "properties": {
          "age": {
            "type": "string",
            "title": "Age"
          },
          "date": {
            "type": "string",
            "format": "date",
            "title": "Date"
          },
          "ethnicity": {
            "type": "string",
            "title": "Ethnicity"
          },
          "functionality": {
            "type": "string",
            "title": "Functionality"
          },
          "height": {
            "type": "string",
            "title": "Height"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "sex": {
            "type": "string",
            "title": "Sex"
          },
          "species": {
            "type": "string",
            "title": "Species"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "weight": {
            "type": "string",
            "title": "Weight"
          }
        },
        "type": "object",
        "required": [
          "date"
        ],
        "title": "LicensedResourceSourceFeaturesDict"
      },
      "LicensedResourceType": {
        "type": "string",
        "enum": [
          "VIP_MODEL"
        ],
        "title": "LicensedResourceType"
      },
      "Links": {
        "properties": {
          "first": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First"
          },
          "last": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last"
          },
          "self": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Self"
          },
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next"
          },
          "prev": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prev"
          }
        },
        "type": "object",
        "required": [
          "first",
          "last",
          "self",
          "next",
          "prev"
        ],
        "title": "Links"
      },
      "LogLink": {
        "properties": {
          "node_name": {
            "type": "string",
            "title": "Node Name"
          },
          "download_link": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Download Link"
          }
        },
        "type": "object",
        "required": [
          "node_name",
          "download_link"
        ],
        "title": "LogLink"
      },
      "Meta": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Version"
          },
          "released": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "string",
                  "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Released",
            "description": "Maps every route's path tag with a released version"
          },
          "docs_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Docs Url"
          },
          "docs_dev_url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Docs Dev Url"
          }
        },
        "type": "object",
        "required": [
          "name",
          "version",
          "docs_url",
          "docs_dev_url"
        ],
        "title": "Meta",
        "example": {
          "docs_dev_url": "https://api.osparc.io/dev/doc",
          "docs_url": "https://api.osparc.io/dev/doc",
          "name": "simcore_service_foo",
          "released": {
            "v1": "1.3.4",
            "v2": "2.4.45"
          },
          "version": "2.4.45"
        }
      },
      "OnePage_SolverPort_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/SolverPort"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "OnePage[SolverPort]"
      },
      "OnePage_StudyPort_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/StudyPort"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "OnePage[StudyPort]"
      },
      "Page_File_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/File"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "limit",
          "offset",
          "links"
        ],
        "title": "Page[File]"
      },
      "Page_Job_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "limit",
          "offset",
          "links"
        ],
        "title": "Page[Job]"
      },
      "Page_LicensedItemGet_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/LicensedItemGet"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "limit",
          "offset",
          "links"
        ],
        "title": "Page[LicensedItemGet]"
      },
      "Page_Study_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Study"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit"
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Offset"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "type": "object",
        "required": [
          "items",
          "total",
          "limit",
          "offset",
          "links"
        ],
        "title": "Page[Study]"
      },
      "PricingPlanClassification": {
        "type": "string",
        "enum": [
          "TIER",
          "LICENSE"
        ],
        "title": "PricingPlanClassification"
      },
      "PricingUnitGetLegacy": {
        "properties": {
          "pricingUnitId": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricingunitid",
            "minimum": 0
          },
          "unitName": {
            "type": "string",
            "title": "Unitname"
          },
          "unitExtraInfo": {
            "$ref": "#/components/schemas/UnitExtraInfoTier"
          },
          "currentCostPerUnit": {
            "type": "number",
            "minimum": 0.0,
            "title": "Currentcostperunit"
          },
          "default": {
            "type": "boolean",
            "title": "Default"
          }
        },
        "type": "object",
        "required": [
          "pricingUnitId",
          "unitName",
          "unitExtraInfo",
          "currentCostPerUnit",
          "default"
        ],
        "title": "PricingUnitGetLegacy"
      },
      "Profile": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "id": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Id",
            "minimum": 0
          },
          "login": {
            "type": "string",
            "format": "email",
            "title": "Login"
          },
          "role": {
            "$ref": "#/components/schemas/UserRoleEnum"
          },
          "groups": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Groups"
              },
              {
                "type": "null"
              }
            ]
          },
          "gravatar_id": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 40
              },
              {
                "type": "null"
              }
            ],
            "title": "Gravatar Id",
            "description": "md5 hash value of email to retrieve an avatar image from https://www.gravatar.com"
          }
        },
        "type": "object",
        "required": [
          "id",
          "login",
          "role"
        ],
        "title": "Profile",
        "example": {
          "first_name": "James",
          "gravatar_id": "9a8930a5b20d7048e37740bac5c1ca4f",
          "groups": {
            "all": {
              "description": "all users",
              "gid": "1",
              "label": "Everyone"
            },
            "me": {
              "description": "primary group",
              "gid": "123",
              "label": "maxy"
            },
            "organizations": []
          },
          "id": "20",
          "last_name": "Maxwell",
          "login": "james-maxwell@itis.swiss",
          "role": "USER"
        }
      },
      "ProfileUpdate": {
        "properties": {
          "first_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          }
        },
        "type": "object",
        "title": "ProfileUpdate"
      },
      "Program": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Resource identifier"
          },
          "version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Version",
            "description": "Semantic version number of the resource"
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "title": "Title",
            "description": "Human readable name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the resource"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Link to get this resource"
          },
          "version_display": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version Display"
          }
        },
        "type": "object",
        "required": [
          "id",
          "version",
          "title",
          "url",
          "version_display"
        ],
        "title": "Program",
        "description": "A released program with a specific version",
        "example": {
          "description": "Simulation framework",
          "id": "simcore/services/dynamic/sim4life",
          "maintainer": "info@itis.swiss",
          "title": "Sim4life",
          "url": "https://api.osparc.io/v0/solvers/simcore%2Fservices%2Fdynamic%2Fsim4life/releases/8.0.0",
          "version": "8.0.0",
          "version_display": "8.0.0"
        }
      },
      "RunningState": {
        "type": "string",
        "enum": [
          "UNKNOWN",
          "PUBLISHED",
          "NOT_STARTED",
          "PENDING",
          "WAITING_FOR_RESOURCES",
          "STARTED",
          "SUCCESS",
          "FAILED",
          "ABORTED",
          "WAITING_FOR_CLUSTER"
        ],
        "title": "RunningState",
        "description": "State of execution of a project's computational workflow\n\nSEE StateType for task state"
      },
      "ServicePricingPlanGetLegacy": {
        "properties": {
          "pricingPlanId": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Pricingplanid",
            "minimum": 0
          },
          "displayName": {
            "type": "string",
            "title": "Displayname"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "classification": {
            "$ref": "#/components/schemas/PricingPlanClassification"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "pricingPlanKey": {
            "type": "string",
            "title": "Pricingplankey"
          },
          "pricingUnits": {
            "items": {
              "$ref": "#/components/schemas/PricingUnitGetLegacy"
            },
            "type": "array",
            "title": "Pricingunits"
          }
        },
        "type": "object",
        "required": [
          "pricingPlanId",
          "displayName",
          "description",
          "classification",
          "createdAt",
          "pricingPlanKey",
          "pricingUnits"
        ],
        "title": "ServicePricingPlanGetLegacy"
      },
      "Solver": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Resource identifier"
          },
          "version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Version",
            "description": "Semantic version number of the resource"
          },
          "title": {
            "type": "string",
            "maxLength": 100,
            "title": "Title",
            "description": "Human readable name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 1000
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "description": "Description of the resource"
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 2083,
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Link to get this resource"
          },
          "maintainer": {
            "type": "string",
            "title": "Maintainer",
            "description": "Maintainer of the solver"
          }
        },
        "type": "object",
        "required": [
          "id",
          "version",
          "title",
          "url",
          "maintainer"
        ],
        "title": "Solver",
        "description": "A released solver with a specific version",
        "example": {
          "description": "EM solver",
          "id": "simcore/services/comp/isolve",
          "maintainer": "info@itis.swiss",
          "title": "iSolve",
          "url": "https://api.osparc.io/v0/solvers/simcore%2Fservices%2Fcomp%2Fisolve/releases/2.1.1",
          "version": "2.1.1"
        }
      },
      "SolverPort": {
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[^_\\W0-9]\\w*$",
            "title": "Key name",
            "description": "port identifier name"
          },
          "kind": {
            "type": "string",
            "enum": [
              "input",
              "output"
            ],
            "title": "Kind"
          },
          "content_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Schema",
            "description": "jsonschema for the port's value. SEE https://json-schema.org"
          }
        },
        "type": "object",
        "required": [
          "key",
          "kind"
        ],
        "title": "SolverPort",
        "example": {
          "content_schema": {
            "maximum": 5,
            "minimum": 0,
            "title": "Sleep interval",
            "type": "integer",
            "x_unit": "second"
          },
          "key": "input_2",
          "kind": "input"
        }
      },
      "Study": {
        "properties": {
          "uid": {
            "type": "string",
            "format": "uuid",
            "title": "Uid"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "uid"
        ],
        "title": "Study"
      },
      "StudyPort": {
        "properties": {
          "key": {
            "type": "string",
            "format": "uuid",
            "title": "Key name",
            "description": "port identifier name.Correponds to the UUID of the parameter/probe node in the study"
          },
          "kind": {
            "type": "string",
            "enum": [
              "input",
              "output"
            ],
            "title": "Kind"
          },
          "content_schema": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Content Schema",
            "description": "jsonschema for the port's value. SEE https://json-schema.org"
          }
        },
        "type": "object",
        "required": [
          "key",
          "kind"
        ],
        "title": "StudyPort",
        "example": {
          "content_schema": {
            "maximum": 5,
            "minimum": 0,
            "title": "Sleep interval",
            "type": "integer",
            "x_unit": "second"
          },
          "key": "f763658f-a89a-4a90-ace4-c44631290f12",
          "kind": "input"
        }
      },
      "UnitExtraInfoTier": {
        "properties": {
          "CPU": {
            "type": "integer",
            "minimum": 0,
            "title": "Cpu"
          },
          "RAM": {
            "type": "integer",
            "minimum": 0,
            "title": "Ram"
          },
          "VRAM": {
            "type": "integer",
            "minimum": 0,
            "title": "Vram"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": [
          "CPU",
          "RAM",
          "VRAM"
        ],
        "title": "UnitExtraInfoTier",
        "description": "Custom information that is propagated to the frontend. Defined fields are mandatory."
      },
      "UploadLinks": {
        "properties": {
          "abort_upload": {
            "type": "string",
            "title": "Abort Upload"
          },
          "complete_upload": {
            "type": "string",
            "title": "Complete Upload"
          }
        },
        "type": "object",
        "required": [
          "abort_upload",
          "complete_upload"
        ],
        "title": "UploadLinks"
      },
      "UploadedPart": {
        "properties": {
          "number": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Number",
            "minimum": 0
          },
          "e_tag": {
            "type": "string",
            "title": "E Tag"
          }
        },
        "type": "object",
        "required": [
          "number",
          "e_tag"
        ],
        "title": "UploadedPart"
      },
      "UserFile": {
        "properties": {
          "filename": {
            "type": "string",
            "title": "Filename",
            "description": "File name"
          },
          "filesize": {
            "type": "integer",
            "minimum": 0,
            "title": "Filesize",
            "description": "File size in bytes"
          },
          "sha256_checksum": {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{64}$",
            "title": "Sha256 Checksum",
            "description": "SHA256 checksum"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "filesize",
          "sha256_checksum"
        ],
        "title": "UserFile",
        "description": "Represents a file stored on the client side"
      },
      "UserFileToProgramJob": {
        "properties": {
          "filename": {
            "type": "string",
            "pattern": ".+",
            "title": "Filename",
            "description": "File name"
          },
          "filesize": {
            "type": "integer",
            "minimum": 0,
            "title": "Filesize",
            "description": "File size in bytes"
          },
          "sha256_checksum": {
            "type": "string",
            "pattern": "^[a-fA-F0-9]{64}$",
            "title": "Sha256 Checksum",
            "description": "SHA256 checksum"
          },
          "program_key": {
            "type": "string",
            "pattern": "^simcore/services/dynamic/([a-z0-9][a-z0-9_.-]*/)*([a-z0-9-_]+[a-z0-9])$",
            "title": "Program Key",
            "description": "Program identifier"
          },
          "program_version": {
            "type": "string",
            "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
            "title": "Program Version",
            "description": "Program version"
          },
          "job_id": {
            "type": "string",
            "format": "uuid",
            "title": "Job Id",
            "description": "Job identifier"
          },
          "workspace_path": {
            "type": "string",
            "pattern": "^workspace/.*",
            "format": "path",
            "title": "Workspace Path",
            "description": "The file's relative path within the job's workspace directory. E.g. 'workspace/myfile.txt'"
          }
        },
        "type": "object",
        "required": [
          "filename",
          "filesize",
          "sha256_checksum",
          "program_key",
          "program_version",
          "job_id",
          "workspace_path"
        ],
        "title": "UserFileToProgramJob"
      },
      "UserRoleEnum": {
        "type": "string",
        "enum": [
          "ANONYMOUS",
          "GUEST",
          "USER",
          "TESTER",
          "PRODUCT_OWNER",
          "ADMIN"
        ],
        "title": "UserRoleEnum"
      },
      "UsersGroup": {
        "properties": {
          "gid": {
            "type": "string",
            "title": "Gid"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "gid",
          "label"
        ],
        "title": "UsersGroup"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WalletGetWithAvailableCreditsLegacy": {
        "properties": {
          "walletId": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Walletid",
            "minimum": 0
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "owner": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Owner",
            "minimum": 0
          },
          "thumbnail": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Thumbnail"
          },
          "status": {
            "$ref": "#/components/schemas/WalletStatus"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "title": "Created"
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "title": "Modified"
          },
          "availableCredits": {
            "type": "number",
            "minimum": 0.0,
            "title": "Availablecredits"
          }
        },
        "type": "object",
        "required": [
          "walletId",
          "name",
          "owner",
          "status",
          "created",
          "modified",
          "availableCredits"
        ],
        "title": "WalletGetWithAvailableCreditsLegacy"
      },
      "WalletStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "INACTIVE"
        ],
        "title": "WalletStatus"
      }
    },
    "securitySchemes": {
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
