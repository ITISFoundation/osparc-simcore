# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from simcore_service_storage_sdk.configuration import Configuration


class Fake(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path_value': 'str',
        'query_value': 'str',
        'body_value': 'dict(str, object)'
    }

    attribute_map = {
        'path_value': 'path_value',
        'query_value': 'query_value',
        'body_value': 'body_value'
    }

    def __init__(self, path_value=None, query_value=None, body_value=None, local_vars_configuration=None):  # noqa: E501
        """Fake - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._path_value = None
        self._query_value = None
        self._body_value = None
        self.discriminator = None

        self.path_value = path_value
        self.query_value = query_value
        self.body_value = body_value

    @property
    def path_value(self):
        """Gets the path_value of this Fake.  # noqa: E501


        :return: The path_value of this Fake.  # noqa: E501
        :rtype: str
        """
        return self._path_value

    @path_value.setter
    def path_value(self, path_value):
        """Sets the path_value of this Fake.


        :param path_value: The path_value of this Fake.  # noqa: E501
        :type path_value: str
        """
        if self.local_vars_configuration.client_side_validation and path_value is None:  # noqa: E501
            raise ValueError("Invalid value for `path_value`, must not be `None`")  # noqa: E501

        self._path_value = path_value

    @property
    def query_value(self):
        """Gets the query_value of this Fake.  # noqa: E501


        :return: The query_value of this Fake.  # noqa: E501
        :rtype: str
        """
        return self._query_value

    @query_value.setter
    def query_value(self, query_value):
        """Sets the query_value of this Fake.


        :param query_value: The query_value of this Fake.  # noqa: E501
        :type query_value: str
        """
        if self.local_vars_configuration.client_side_validation and query_value is None:  # noqa: E501
            raise ValueError("Invalid value for `query_value`, must not be `None`")  # noqa: E501

        self._query_value = query_value

    @property
    def body_value(self):
        """Gets the body_value of this Fake.  # noqa: E501


        :return: The body_value of this Fake.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._body_value

    @body_value.setter
    def body_value(self, body_value):
        """Sets the body_value of this Fake.


        :param body_value: The body_value of this Fake.  # noqa: E501
        :type body_value: dict(str, object)
        """
        if self.local_vars_configuration.client_side_validation and body_value is None:  # noqa: E501
            raise ValueError("Invalid value for `body_value`, must not be `None`")  # noqa: E501

        self._body_value = body_value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fake):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Fake):
            return True

        return self.to_dict() != other.to_dict()
