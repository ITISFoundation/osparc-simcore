# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    OpenAPI spec version: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TableSynchronisation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "dry_run": "bool",
        "fire_and_forget": "bool",
        "removed": "list[str]",
    }

    attribute_map = {
        "dry_run": "dry_run",
        "fire_and_forget": "fire_and_forget",
        "removed": "removed",
    }

    def __init__(self, dry_run=None, fire_and_forget=None, removed=None):  # noqa: E501
        """TableSynchronisation - a model defined in OpenAPI"""  # noqa: E501

        self._dry_run = None
        self._fire_and_forget = None
        self._removed = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        if fire_and_forget is not None:
            self.fire_and_forget = fire_and_forget
        self.removed = removed

    @property
    def dry_run(self):
        """Gets the dry_run of this TableSynchronisation.  # noqa: E501


        :return: The dry_run of this TableSynchronisation.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this TableSynchronisation.


        :param dry_run: The dry_run of this TableSynchronisation.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def fire_and_forget(self):
        """Gets the fire_and_forget of this TableSynchronisation.  # noqa: E501


        :return: The fire_and_forget of this TableSynchronisation.  # noqa: E501
        :rtype: bool
        """
        return self._fire_and_forget

    @fire_and_forget.setter
    def fire_and_forget(self, fire_and_forget):
        """Sets the fire_and_forget of this TableSynchronisation.


        :param fire_and_forget: The fire_and_forget of this TableSynchronisation.  # noqa: E501
        :type: bool
        """

        self._fire_and_forget = fire_and_forget

    @property
    def removed(self):
        """Gets the removed of this TableSynchronisation.  # noqa: E501


        :return: The removed of this TableSynchronisation.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed

    @removed.setter
    def removed(self, removed):
        """Sets the removed of this TableSynchronisation.


        :param removed: The removed of this TableSynchronisation.  # noqa: E501
        :type: list[str]
        """
        if removed is None:
            raise ValueError(
                "Invalid value for `removed`, must not be `None`"
            )  # noqa: E501

        self._removed = removed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableSynchronisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
