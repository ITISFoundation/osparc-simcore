# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    OpenAPI spec version: 0.1.0
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200Error(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'errors': 'list[InlineResponse200ErrorErrors]',
        'logs': 'list[InlineResponse200ErrorLogs]',
        'status': 'int'
    }

    attribute_map = {
        'errors': 'errors',
        'logs': 'logs',
        'status': 'status'
    }

    def __init__(self, errors=None, logs=None, status=None):  # noqa: E501
        """InlineResponse200Error - a model defined in OpenAPI"""  # noqa: E501

        self._errors = None
        self._logs = None
        self._status = None
        self.discriminator = None

        if errors is not None:
            self.errors = errors
        if logs is not None:
            self.logs = logs
        if status is not None:
            self.status = status

    @property
    def errors(self):
        """Gets the errors of this InlineResponse200Error.  # noqa: E501

        errors metadata  # noqa: E501

        :return: The errors of this InlineResponse200Error.  # noqa: E501
        :rtype: list[InlineResponse200ErrorErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this InlineResponse200Error.

        errors metadata  # noqa: E501

        :param errors: The errors of this InlineResponse200Error.  # noqa: E501
        :type: list[InlineResponse200ErrorErrors]
        """

        self._errors = errors

    @property
    def logs(self):
        """Gets the logs of this InlineResponse200Error.  # noqa: E501

        log messages  # noqa: E501

        :return: The logs of this InlineResponse200Error.  # noqa: E501
        :rtype: list[InlineResponse200ErrorLogs]
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this InlineResponse200Error.

        log messages  # noqa: E501

        :param logs: The logs of this InlineResponse200Error.  # noqa: E501
        :type: list[InlineResponse200ErrorLogs]
        """

        self._logs = logs

    @property
    def status(self):
        """Gets the status of this InlineResponse200Error.  # noqa: E501

        HTTP error code  # noqa: E501

        :return: The status of this InlineResponse200Error.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200Error.

        HTTP error code  # noqa: E501

        :param status: The status of this InlineResponse200Error.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Error):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
