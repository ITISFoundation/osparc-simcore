# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    OpenAPI spec version: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "uuid": "str",
        "name": "str",
        "description": "str",
        "prj_owner": "str",
        "access_rights": "dict(str, object)",
        "creation_date": "str",
        "last_change_date": "str",
        "thumbnail": "str",
        "workbench": "dict(str, object)",
        "ui": "ProjectUi",
        "tags": "list[int]",
        "classifiers": "list[str]",
        "dev": "object",
        "state": "object",
        "quality": "object",
    }

    attribute_map = {
        "uuid": "uuid",
        "name": "name",
        "description": "description",
        "prj_owner": "prjOwner",
        "access_rights": "accessRights",
        "creation_date": "creationDate",
        "last_change_date": "lastChangeDate",
        "thumbnail": "thumbnail",
        "workbench": "workbench",
        "ui": "ui",
        "tags": "tags",
        "classifiers": "classifiers",
        "dev": "dev",
        "state": "state",
        "quality": "quality",
    }

    def __init__(
        self,
        uuid=None,
        name=None,
        description=None,
        prj_owner=None,
        access_rights=None,
        creation_date=None,
        last_change_date=None,
        thumbnail=None,
        workbench=None,
        ui=None,
        tags=None,
        classifiers=None,
        dev=None,
        state=None,
        quality=None,
    ):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501

        self._uuid = None
        self._name = None
        self._description = None
        self._prj_owner = None
        self._access_rights = None
        self._creation_date = None
        self._last_change_date = None
        self._thumbnail = None
        self._workbench = None
        self._ui = None
        self._tags = None
        self._classifiers = None
        self._dev = None
        self._state = None
        self._quality = None
        self.discriminator = None

        self.uuid = uuid
        self.name = name
        self.description = description
        self.prj_owner = prj_owner
        self.access_rights = access_rights
        self.creation_date = creation_date
        self.last_change_date = last_change_date
        self.thumbnail = thumbnail
        self.workbench = workbench
        if ui is not None:
            self.ui = ui
        if tags is not None:
            self.tags = tags
        if classifiers is not None:
            self.classifiers = classifiers
        if dev is not None:
            self.dev = dev
        if state is not None:
            self.state = state
        if quality is not None:
            self.quality = quality

    @property
    def uuid(self):
        """Gets the uuid of this Project.  # noqa: E501

        project unique identifier  # noqa: E501

        :return: The uuid of this Project.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Project.

        project unique identifier  # noqa: E501

        :param uuid: The uuid of this Project.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError(
                "Invalid value for `uuid`, must not be `None`"
            )  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501

        project name  # noqa: E501

        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.

        project name  # noqa: E501

        :param name: The name of this Project.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501

        longer one-line description about the project  # noqa: E501

        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.

        longer one-line description about the project  # noqa: E501

        :param description: The description of this Project.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError(
                "Invalid value for `description`, must not be `None`"
            )  # noqa: E501

        self._description = description

    @property
    def prj_owner(self):
        """Gets the prj_owner of this Project.  # noqa: E501

        user email  # noqa: E501

        :return: The prj_owner of this Project.  # noqa: E501
        :rtype: str
        """
        return self._prj_owner

    @prj_owner.setter
    def prj_owner(self, prj_owner):
        """Sets the prj_owner of this Project.

        user email  # noqa: E501

        :param prj_owner: The prj_owner of this Project.  # noqa: E501
        :type: str
        """
        if prj_owner is None:
            raise ValueError(
                "Invalid value for `prj_owner`, must not be `None`"
            )  # noqa: E501

        self._prj_owner = prj_owner

    @property
    def access_rights(self):
        """Gets the access_rights of this Project.  # noqa: E501

        object containing the GroupID as key and read/write/execution permissions as value  # noqa: E501

        :return: The access_rights of this Project.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._access_rights

    @access_rights.setter
    def access_rights(self, access_rights):
        """Sets the access_rights of this Project.

        object containing the GroupID as key and read/write/execution permissions as value  # noqa: E501

        :param access_rights: The access_rights of this Project.  # noqa: E501
        :type: dict(str, object)
        """
        if access_rights is None:
            raise ValueError(
                "Invalid value for `access_rights`, must not be `None`"
            )  # noqa: E501

        self._access_rights = access_rights

    @property
    def creation_date(self):
        """Gets the creation_date of this Project.  # noqa: E501

        project creation date  # noqa: E501

        :return: The creation_date of this Project.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Project.

        project creation date  # noqa: E501

        :param creation_date: The creation_date of this Project.  # noqa: E501
        :type: str
        """
        if creation_date is None:
            raise ValueError(
                "Invalid value for `creation_date`, must not be `None`"
            )  # noqa: E501
        if creation_date is not None and not re.search(
            r"\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[0-9])(:(\\d|[0-5]\\d)){2}(\\.\\d{3})?Z",
            creation_date,
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `creation_date`, must be a follow pattern or equal to `/\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[0-9])(:(\\d|[0-5]\\d)){2}(\\.\\d{3})?Z/`"
            )  # noqa: E501

        self._creation_date = creation_date

    @property
    def last_change_date(self):
        """Gets the last_change_date of this Project.  # noqa: E501

        last save date  # noqa: E501

        :return: The last_change_date of this Project.  # noqa: E501
        :rtype: str
        """
        return self._last_change_date

    @last_change_date.setter
    def last_change_date(self, last_change_date):
        """Sets the last_change_date of this Project.

        last save date  # noqa: E501

        :param last_change_date: The last_change_date of this Project.  # noqa: E501
        :type: str
        """
        if last_change_date is None:
            raise ValueError(
                "Invalid value for `last_change_date`, must not be `None`"
            )  # noqa: E501
        if last_change_date is not None and not re.search(
            r"\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[0-9])(:(\\d|[0-5]\\d)){2}(\\.\\d{3})?Z",
            last_change_date,
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `last_change_date`, must be a follow pattern or equal to `/\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[0-9])(:(\\d|[0-5]\\d)){2}(\\.\\d{3})?Z/`"
            )  # noqa: E501

        self._last_change_date = last_change_date

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Project.  # noqa: E501

        url of the latest screenshot of the project  # noqa: E501

        :return: The thumbnail of this Project.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Project.

        url of the latest screenshot of the project  # noqa: E501

        :param thumbnail: The thumbnail of this Project.  # noqa: E501
        :type: str
        """
        if thumbnail is None:
            raise ValueError(
                "Invalid value for `thumbnail`, must not be `None`"
            )  # noqa: E501
        if thumbnail is not None and len(thumbnail) > 2083:
            raise ValueError(
                "Invalid value for `thumbnail`, length must be less than or equal to `2083`"
            )  # noqa: E501
        if thumbnail is not None and len(thumbnail) < 0:
            raise ValueError(
                "Invalid value for `thumbnail`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._thumbnail = thumbnail

    @property
    def workbench(self):
        """Gets the workbench of this Project.  # noqa: E501


        :return: The workbench of this Project.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._workbench

    @workbench.setter
    def workbench(self, workbench):
        """Sets the workbench of this Project.


        :param workbench: The workbench of this Project.  # noqa: E501
        :type: dict(str, object)
        """
        if workbench is None:
            raise ValueError(
                "Invalid value for `workbench`, must not be `None`"
            )  # noqa: E501

        self._workbench = workbench

    @property
    def ui(self):
        """Gets the ui of this Project.  # noqa: E501


        :return: The ui of this Project.  # noqa: E501
        :rtype: ProjectUi
        """
        return self._ui

    @ui.setter
    def ui(self, ui):
        """Sets the ui of this Project.


        :param ui: The ui of this Project.  # noqa: E501
        :type: ProjectUi
        """

        self._ui = ui

    @property
    def tags(self):
        """Gets the tags of this Project.  # noqa: E501


        :return: The tags of this Project.  # noqa: E501
        :rtype: list[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Project.


        :param tags: The tags of this Project.  # noqa: E501
        :type: list[int]
        """

        self._tags = tags

    @property
    def classifiers(self):
        """Gets the classifiers of this Project.  # noqa: E501

        Contains the reference to the project classifiers  # noqa: E501

        :return: The classifiers of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers):
        """Sets the classifiers of this Project.

        Contains the reference to the project classifiers  # noqa: E501

        :param classifiers: The classifiers of this Project.  # noqa: E501
        :type: list[str]
        """

        self._classifiers = classifiers

    @property
    def dev(self):
        """Gets the dev of this Project.  # noqa: E501

        object used for development purposes only  # noqa: E501

        :return: The dev of this Project.  # noqa: E501
        :rtype: object
        """
        return self._dev

    @dev.setter
    def dev(self, dev):
        """Sets the dev of this Project.

        object used for development purposes only  # noqa: E501

        :param dev: The dev of this Project.  # noqa: E501
        :type: object
        """

        self._dev = dev

    @property
    def state(self):
        """Gets the state of this Project.  # noqa: E501

        Project state  # noqa: E501

        :return: The state of this Project.  # noqa: E501
        :rtype: object
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Project.

        Project state  # noqa: E501

        :param state: The state of this Project.  # noqa: E501
        :type: object
        """

        self._state = state

    @property
    def quality(self):
        """Gets the quality of this Project.  # noqa: E501

        Object containing Quality Assessment related data  # noqa: E501

        :return: The quality of this Project.  # noqa: E501
        :rtype: object
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Project.

        Object containing Quality Assessment related data  # noqa: E501

        :param quality: The quality of this Project.  # noqa: E501
        :type: object
        """

        self._quality = quality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
