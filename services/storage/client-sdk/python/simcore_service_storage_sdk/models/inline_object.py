# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from simcore_service_storage_sdk.configuration import Configuration


class InlineObject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source': 'Project',
        'destination': 'Project',
        'nodes_map': 'dict(str, str)'
    }

    attribute_map = {
        'source': 'source',
        'destination': 'destination',
        'nodes_map': 'nodes_map'
    }

    def __init__(self, source=None, destination=None, nodes_map=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._source = None
        self._destination = None
        self._nodes_map = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if destination is not None:
            self.destination = destination
        if nodes_map is not None:
            self.nodes_map = nodes_map

    @property
    def source(self):
        """Gets the source of this InlineObject.  # noqa: E501


        :return: The source of this InlineObject.  # noqa: E501
        :rtype: Project
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineObject.


        :param source: The source of this InlineObject.  # noqa: E501
        :type source: Project
        """

        self._source = source

    @property
    def destination(self):
        """Gets the destination of this InlineObject.  # noqa: E501


        :return: The destination of this InlineObject.  # noqa: E501
        :rtype: Project
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this InlineObject.


        :param destination: The destination of this InlineObject.  # noqa: E501
        :type destination: Project
        """

        self._destination = destination

    @property
    def nodes_map(self):
        """Gets the nodes_map of this InlineObject.  # noqa: E501

        maps source and destination node uuids  # noqa: E501

        :return: The nodes_map of this InlineObject.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._nodes_map

    @nodes_map.setter
    def nodes_map(self, nodes_map):
        """Sets the nodes_map of this InlineObject.

        maps source and destination node uuids  # noqa: E501

        :param nodes_map: The nodes_map of this InlineObject.  # noqa: E501
        :type nodes_map: dict(str, str)
        """

        self._nodes_map = nodes_map

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject):
            return True

        return self.to_dict() != other.to_dict()
