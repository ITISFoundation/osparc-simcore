# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    OpenAPI spec version: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ProjectUi(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "workbench": "dict(str, object)",
        "slideshow": "dict(str, object)",
        "current_node_id": "str",
    }

    attribute_map = {
        "workbench": "workbench",
        "slideshow": "slideshow",
        "current_node_id": "currentNodeId",
    }

    def __init__(
        self, workbench=None, slideshow=None, current_node_id=None
    ):  # noqa: E501
        """ProjectUi - a model defined in OpenAPI"""  # noqa: E501

        self._workbench = None
        self._slideshow = None
        self._current_node_id = None
        self.discriminator = None

        if workbench is not None:
            self.workbench = workbench
        if slideshow is not None:
            self.slideshow = slideshow
        if current_node_id is not None:
            self.current_node_id = current_node_id

    @property
    def workbench(self):
        """Gets the workbench of this ProjectUi.  # noqa: E501


        :return: The workbench of this ProjectUi.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._workbench

    @workbench.setter
    def workbench(self, workbench):
        """Sets the workbench of this ProjectUi.


        :param workbench: The workbench of this ProjectUi.  # noqa: E501
        :type: dict(str, object)
        """

        self._workbench = workbench

    @property
    def slideshow(self):
        """Gets the slideshow of this ProjectUi.  # noqa: E501


        :return: The slideshow of this ProjectUi.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._slideshow

    @slideshow.setter
    def slideshow(self, slideshow):
        """Sets the slideshow of this ProjectUi.


        :param slideshow: The slideshow of this ProjectUi.  # noqa: E501
        :type: dict(str, object)
        """

        self._slideshow = slideshow

    @property
    def current_node_id(self):
        """Gets the current_node_id of this ProjectUi.  # noqa: E501


        :return: The current_node_id of this ProjectUi.  # noqa: E501
        :rtype: str
        """
        return self._current_node_id

    @current_node_id.setter
    def current_node_id(self, current_node_id):
        """Sets the current_node_id of this ProjectUi.


        :param current_node_id: The current_node_id of this ProjectUi.  # noqa: E501
        :type: str
        """

        self._current_node_id = current_node_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectUi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
