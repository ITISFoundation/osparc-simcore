# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import datetime
import unittest

import simcore_service_storage_sdk
from simcore_service_storage_sdk.models.table_synchronisation_enveloped import (  # noqa: E501
    TableSynchronisationEnveloped,
)
from simcore_service_storage_sdk.rest import ApiException


class TestTableSynchronisationEnveloped(unittest.TestCase):
    """TableSynchronisationEnveloped unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TableSynchronisationEnveloped
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # model = simcore_service_storage_sdk.models.table_synchronisation_enveloped.TableSynchronisationEnveloped()  # noqa: E501
        if include_optional:
            return TableSynchronisationEnveloped(
                data=simcore_service_storage_sdk.models.table_synchronisation.TableSynchronisation(
                    dry_run=True,
                    fire_and_forget=True,
                    removed=["0"],
                ),
                error=null,
            )
        else:
            return TableSynchronisationEnveloped(
                data=simcore_service_storage_sdk.models.table_synchronisation.TableSynchronisation(
                    dry_run=True,
                    fire_and_forget=True,
                    removed=["0"],
                ),
                error=null,
            )

    def testTableSynchronisationEnveloped(self):
        """Test TableSynchronisationEnveloped"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
