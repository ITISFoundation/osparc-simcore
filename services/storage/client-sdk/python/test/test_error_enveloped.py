# coding: utf-8

"""
    simcore-service-storage API

    API definition for simcore-service-storage service  # noqa: E501

    The version of the OpenAPI document: 0.2.1
    Contact: support@simcore.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import datetime
import unittest

import simcore_service_storage_sdk
from simcore_service_storage_sdk.models.error_enveloped import (  # noqa: E501
    ErrorEnveloped,
)
from simcore_service_storage_sdk.rest import ApiException


class TestErrorEnveloped(unittest.TestCase):
    """ErrorEnveloped unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ErrorEnveloped
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # model = simcore_service_storage_sdk.models.error_enveloped.ErrorEnveloped()  # noqa: E501
        if include_optional:
            return ErrorEnveloped(
                data=null,
                error={
                    "BadRequestError": {
                        "logs": [
                            {
                                "message": "Requested information is incomplete or malformed",
                                "level": "ERROR",
                            },
                            {
                                "message": "Invalid email and password",
                                "level": "ERROR",
                                "logger": "USER",
                            },
                        ],
                        "errors": [
                            {
                                "code": "InvalidEmail",
                                "message": "Email is malformed",
                                "field": "email",
                            },
                            {
                                "code": "UnsavePassword",
                                "message": "Password is not secure",
                                "field": "pasword",
                            },
                        ],
                        "status": 400,
                    }
                },
            )
        else:
            return ErrorEnveloped(
                data=null,
                error={
                    "BadRequestError": {
                        "logs": [
                            {
                                "message": "Requested information is incomplete or malformed",
                                "level": "ERROR",
                            },
                            {
                                "message": "Invalid email and password",
                                "level": "ERROR",
                                "logger": "USER",
                            },
                        ],
                        "errors": [
                            {
                                "code": "InvalidEmail",
                                "message": "Email is malformed",
                                "field": "email",
                            },
                            {
                                "code": "UnsavePassword",
                                "message": "Password is not secure",
                                "field": "pasword",
                            },
                        ],
                        "status": 400,
                    }
                },
            )

    def testErrorEnveloped(self):
        """Test ErrorEnveloped"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
