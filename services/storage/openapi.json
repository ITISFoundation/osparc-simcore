{
  "openapi": "3.1.0",
  "info": {
    "title": "simcore_service_storage",
    "description": "Service that manages osparc storage backend",
    "version": "0.6.0"
  },
  "paths": {
    "/v0/": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get Health",
        "operationId": "get_health_v0__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_HealthCheck_"
                }
              }
            }
          }
        }
      }
    },
    "/v0/status": {
      "get": {
        "tags": [
          "status"
        ],
        "summary": "Get Status",
        "operationId": "get_status_v0_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_AppStatusCheck_"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations": {
      "get": {
        "tags": [
          "locations"
        ],
        "summary": "List Storage Locations",
        "operationId": "list_storage_locations_v0_locations_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_list_FileLocation__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/datasets": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "List Datasets Metadata",
        "operationId": "list_datasets_metadata_v0_locations__location_id__datasets_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_list_DatasetMetaDataGet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/datasets/{dataset_id}/metadata": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "List Dataset Files Metadata",
        "operationId": "list_dataset_files_metadata_v0_locations__location_id__datasets__dataset_id__metadata_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "dataset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Dataset Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "expand_dirs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Expand Dirs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_list_FileMetaDataGet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/metadata": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List Files Metadata",
        "operationId": "list_files_metadata_v0_locations__location_id__files_metadata_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "project_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Project Id"
            }
          },
          {
            "name": "uuid_filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Uuid Filter"
            }
          },
          {
            "name": "expand_dirs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "title": "Expand Dirs"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_list_FileMetaDataGet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/{file_id}/metadata": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Get File Metadata",
        "operationId": "get_file_metadata_v0_locations__location_id__files__file_id__metadata_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "user-agent",
            "in": "header",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "User-Agent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Envelope_FileMetaDataGet_"
                    },
                    {
                      "$ref": "#/components/schemas/Envelope_FileMetaDataGetv010_"
                    },
                    {
                      "$ref": "#/components/schemas/Envelope_dict_"
                    }
                  ],
                  "title": "Response Get File Metadata V0 Locations  Location Id  Files  File Id  Metadata Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/{file_id}": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "Download File",
        "operationId": "download_file_v0_locations__location_id__files__file_id__get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "link_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LinkType",
              "default": "PRESIGNED"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_FileDownloadResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "files"
        ],
        "summary": "Upload File",
        "description": "creates upload file links:\n\nThis function covers v1 and v2 versions of the handler.\nNote: calling this entrypoint on an already existing file will overwrite that file. That file will be deleted\nbefore the upload takes place.\n\nv1 rationale:\n    - client calls this handler, which returns a single link (either direct S3 or presigned) to the S3 backend\n    - client uploads the file\n    - storage relies on lazy update to find if the file is finished uploaded (when client calls get_file_meta_data, or if the dsm_cleaner goes over it after the upload time is expired)\n\nv2 rationale:\n    - client calls this handler, which returns a FileUploadSchema object containing 1 or more links (either S3/presigned links)\n    - client uploads the file (by chunking it if there are more than 1 presigned link)\n    - client calls complete_upload handle which will reconstruct the file on S3 backend\n    - client waits for completion to finish and then the file is accessible on S3 backend\n\n\nUse-case v1: query.file_size is not defined, returns a PresignedLink model (backward compatibility)\nUse-case v1.1: if query.link_type=presigned or None, returns a presigned link (limited to a single 5GB file)\nUse-case v1.2: if query.link_type=s3, returns a s3 direct link (limited to a single 5TB file)\n\nUser-case v2: query.is_directory is True (query.file_size is forced to -1), returns an s3 path where to upload all the content of the directory\nUser-case v2: if query.file_size is defined, returns a FileUploadSchema model, expects client to call \"complete_upload\" when the file is finished uploading\nUse-case v2.1: if query.file_size == 0 and query.link_type=presigned or None, returns a single presigned link inside FileUploadSchema (limited to a single 5Gb file)\nUse-case v2.2: if query.file_size > 0 and query.link_type=presigned or None, returns 1 or more presigned links depending on the file size (limited to a single 5TB file)\nUse-case v2.3: if query.link_type=s3 and query.file_size>=0, returns a single s3 direct link (limited to a single 5TB file)",
        "operationId": "upload_file_v0_locations__location_id__files__file_id__put",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "link_type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/LinkType",
              "default": "PRESIGNED"
            }
          },
          {
            "name": "file_size",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^\\s*(\\d*\\.?\\d+)\\s*(\\w+)?"
                },
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Size"
            }
          },
          {
            "name": "is_directory",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Is Directory"
            }
          },
          {
            "name": "sha256_checksum",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-fA-F0-9]{64}$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sha256 Checksum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Envelope_FileUploadResponseV1_"
                    },
                    {
                      "$ref": "#/components/schemas/Envelope_FileUploadSchema_"
                    }
                  ],
                  "title": "Response Upload File V0 Locations  Location Id  Files  File Id  Put"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "files"
        ],
        "summary": "Delete File",
        "operationId": "delete_file_v0_locations__location_id__files__file_id__delete",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/{file_id}:abort": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Abort Upload File",
        "operationId": "abort_upload_file_v0_locations__location_id__files__file_id__abort_post",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/{file_id}:complete": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Complete Upload File",
        "operationId": "complete_upload_file_v0_locations__location_id__files__file_id__complete_post",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadCompletionBody"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_FileUploadCompleteResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/files/{file_id}:complete/futures/{future_id}": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Is Completed Upload File",
        "operationId": "is_completed_upload_file_v0_locations__location_id__files__file_id__complete_futures__future_id__post",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "future_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Future Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_FileUploadCompleteFutureResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/files/{file_id}:soft-copy": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Copy As Soft Link",
        "operationId": "copy_as_soft_link_v0_files__file_id__soft_copy_post",
        "parameters": [
          {
            "name": "file_id",
            "in": "path",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
                },
                {
                  "type": "string",
                  "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
                }
              ],
              "title": "File Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SoftCopyBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_FileMetaDataGet_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/paths": {
      "get": {
        "tags": [
          "files"
        ],
        "summary": "List Paths",
        "description": "Returns one level of files (paginated)",
        "operationId": "list_paths_v0_locations__location_id__paths_get",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "file_filter",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "path"
                },
                {
                  "type": "null"
                }
              ],
              "title": "File Filter"
            }
          },
          {
            "name": "cursor",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Cursor"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "default": 50,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CursorPage___T_Customized_PathMetaDataGet_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/locations/{location_id}/paths/{path}:size": {
      "post": {
        "tags": [
          "files"
        ],
        "summary": "Compute Path Size",
        "operationId": "compute_path_size_v0_locations__location_id__paths__path__size_post",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "path",
              "title": "Path"
            }
          },
          {
            "name": "location_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Location Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_PathTotalSizeCreate_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/simcore-s3:access": {
      "post": {
        "tags": [
          "simcore-s3"
        ],
        "summary": "Get Or Create Temporary S3 Access",
        "operationId": "get_or_create_temporary_s3_access_v0_simcore_s3_access_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_S3Settings_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/simcore-s3/folders/{folder_id}": {
      "delete": {
        "tags": [
          "simcore-s3"
        ],
        "summary": "Delete Folders Of Project",
        "operationId": "delete_folders_of_project_v0_simcore_s3_folders__folder_id__delete",
        "parameters": [
          {
            "name": "folder_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Folder Id"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "node_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Node Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v0/simcore-s3/files/metadata:search": {
      "post": {
        "tags": [
          "simcore-s3"
        ],
        "summary": "Search Files",
        "operationId": "search_files_v0_simcore_s3_files_metadata_search_post",
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "exclusiveMinimum": true,
              "title": "User Id",
              "minimum": 0
            }
          },
          {
            "name": "startswith",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Startswith"
            }
          },
          {
            "name": "sha256_checksum",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^[a-fA-F0-9]{64}$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Sha256 Checksum"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "required": true,
            "schema": {
              "const": "owned",
              "type": "string",
              "title": "Kind"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 50,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Envelope_list_FileMetaDataGet__"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AppStatusCheck": {
        "properties": {
          "app_name": {
            "type": "string",
            "title": "App Name",
            "description": "Application name"
          },
          "version": {
            "type": "string",
            "title": "Version",
            "description": "Application's version"
          },
          "services": {
            "type": "object",
            "title": "Services",
            "description": "Other backend services connected from this service",
            "default": {}
          },
          "sessions": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sessions",
            "description": "Client sessions info. If single session per app, then is denoted as main",
            "default": {}
          },
          "url": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Url",
            "description": "Link to current resource"
          },
          "diagnostics_url": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "Diagnostics Url",
            "description": "Link to diagnostics report sub-resource. This MIGHT take some time to compute"
          }
        },
        "type": "object",
        "required": [
          "app_name",
          "version"
        ],
        "title": "AppStatusCheck"
      },
      "CursorPage___T_Customized_PathMetaDataGet_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/PathMetaDataGet"
            },
            "type": "array",
            "title": "Items"
          },
          "total": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total",
            "description": "Total items"
          },
          "current_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Page",
            "description": "Cursor to refetch the current page"
          },
          "current_page_backwards": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Current Page Backwards",
            "description": "Cursor to refetch the current page starting from the last item"
          },
          "previous_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Previous Page",
            "description": "Cursor for the previous page"
          },
          "next_page": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page",
            "description": "Cursor for the next page"
          }
        },
        "type": "object",
        "required": [
          "items"
        ],
        "title": "CursorPage[~_T]Customized[PathMetaDataGet]"
      },
      "DatasetMetaDataGet": {
        "properties": {
          "dataset_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "string",
                "pattern": "^N:dataset:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
              }
            ],
            "title": "Dataset Id"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "dataset_id",
          "display_name"
        ],
        "title": "DatasetMetaDataGet"
      },
      "Envelope_AppStatusCheck_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AppStatusCheck"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[AppStatusCheck]"
      },
      "Envelope_FileDownloadResponse_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileDownloadResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileDownloadResponse]"
      },
      "Envelope_FileMetaDataGet_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetaDataGet"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileMetaDataGet]"
      },
      "Envelope_FileMetaDataGetv010_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetaDataGetv010"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileMetaDataGetv010]"
      },
      "Envelope_FileUploadCompleteFutureResponse_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileUploadCompleteFutureResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileUploadCompleteFutureResponse]"
      },
      "Envelope_FileUploadCompleteResponse_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileUploadCompleteResponse"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileUploadCompleteResponse]"
      },
      "Envelope_FileUploadResponseV1_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileUploadResponseV1"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileUploadResponseV1]"
      },
      "Envelope_FileUploadSchema_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileUploadSchema"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[FileUploadSchema]"
      },
      "Envelope_HealthCheck_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/HealthCheck"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[HealthCheck]"
      },
      "Envelope_PathTotalSizeCreate_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PathTotalSizeCreate"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[PathTotalSizeCreate]"
      },
      "Envelope_S3Settings_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/S3Settings"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[S3Settings]"
      },
      "Envelope_dict_": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[dict]"
      },
      "Envelope_list_DatasetMetaDataGet__": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/DatasetMetaDataGet"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[list[DatasetMetaDataGet]]"
      },
      "Envelope_list_FileLocation__": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FileLocation"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[list[FileLocation]]"
      },
      "Envelope_list_FileMetaDataGet__": {
        "properties": {
          "data": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/FileMetaDataGet"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data"
          },
          "error": {
            "anyOf": [
              {},
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "type": "object",
        "title": "Envelope[list[FileMetaDataGet]]"
      },
      "FileDownloadResponse": {
        "properties": {
          "link": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Link"
          }
        },
        "type": "object",
        "required": [
          "link"
        ],
        "title": "FileDownloadResponse"
      },
      "FileLocation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "name",
          "id"
        ],
        "title": "FileLocation"
      },
      "FileMetaDataGet": {
        "properties": {
          "file_uuid": {
            "type": "string",
            "title": "File Uuid",
            "description": "NOT a unique ID, like (api|uuid)/uuid/file_name or DATCORE folder structure"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id",
            "description": "Storage location"
          },
          "project_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Name",
            "description": "optional project name, used by frontend to display path"
          },
          "node_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Name",
            "description": "optional node name, used by frontend to display path"
          },
          "file_name": {
            "type": "string",
            "title": "File Name",
            "description": "Display name for a file"
          },
          "file_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$"
              },
              {
                "type": "string",
                "pattern": "^N:package:[0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}$"
              }
            ],
            "title": "File Id",
            "description": "THIS IS the unique ID for the file. either (api|project_id)/node_id/file_name.ext for S3 and N:package:UUID for datcore"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "last_modified": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified"
          },
          "file_size": {
            "anyOf": [
              {
                "type": "integer",
                "const": -1
              },
              {
                "type": "integer",
                "minimum": 0
              }
            ],
            "title": "File Size",
            "description": "File size in bytes (-1 means invalid)",
            "default": -1
          },
          "entity_tag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Entity Tag",
            "description": "Entity tag (or ETag), represents a specific version of the file, None if invalid upload or datcore"
          },
          "is_soft_link": {
            "type": "boolean",
            "title": "Is Soft Link",
            "description": "If true, this file is a soft link.i.e. is another entry with the same object_name",
            "default": false
          },
          "is_directory": {
            "type": "boolean",
            "title": "Is Directory",
            "description": "if True this is a directory",
            "default": false
          },
          "sha256_checksum": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-fA-F0-9]{64}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sha256 Checksum",
            "description": "SHA256 message digest of the file content. Main purpose: cheap lookup."
          }
        },
        "type": "object",
        "required": [
          "file_uuid",
          "location_id",
          "file_name",
          "file_id",
          "created_at",
          "last_modified"
        ],
        "title": "FileMetaDataGet"
      },
      "FileMetaDataGetv010": {
        "properties": {
          "file_uuid": {
            "type": "string",
            "title": "File Uuid"
          },
          "location_id": {
            "type": "integer",
            "title": "Location Id"
          },
          "location": {
            "type": "string",
            "title": "Location"
          },
          "bucket_name": {
            "type": "string",
            "title": "Bucket Name"
          },
          "object_name": {
            "type": "string",
            "title": "Object Name"
          },
          "project_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Id"
          },
          "project_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Name"
          },
          "node_id": {
            "anyOf": [
              {
                "type": "string",
                "format": "uuid"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Id"
          },
          "node_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Node Name"
          },
          "file_name": {
            "type": "string",
            "title": "File Name"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": true,
                "minimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "user_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Name"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "file_uuid",
          "location_id",
          "location",
          "bucket_name",
          "object_name",
          "project_id",
          "project_name",
          "node_id",
          "node_name",
          "file_name",
          "user_id",
          "user_name"
        ],
        "title": "FileMetaDataGetv010"
      },
      "FileUploadCompleteFutureResponse": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/FileUploadCompleteState"
          },
          "e_tag": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "E Tag"
          }
        },
        "type": "object",
        "required": [
          "state"
        ],
        "title": "FileUploadCompleteFutureResponse"
      },
      "FileUploadCompleteLinks": {
        "properties": {
          "state": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "State"
          }
        },
        "type": "object",
        "required": [
          "state"
        ],
        "title": "FileUploadCompleteLinks"
      },
      "FileUploadCompleteResponse": {
        "properties": {
          "links": {
            "$ref": "#/components/schemas/FileUploadCompleteLinks"
          }
        },
        "type": "object",
        "required": [
          "links"
        ],
        "title": "FileUploadCompleteResponse"
      },
      "FileUploadCompleteState": {
        "type": "string",
        "enum": [
          "ok",
          "nok"
        ],
        "title": "FileUploadCompleteState"
      },
      "FileUploadCompletionBody": {
        "properties": {
          "parts": {
            "items": {
              "$ref": "#/components/schemas/UploadedPart"
            },
            "type": "array",
            "title": "Parts"
          }
        },
        "type": "object",
        "required": [
          "parts"
        ],
        "title": "FileUploadCompletionBody"
      },
      "FileUploadLinks": {
        "properties": {
          "abort_upload": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Abort Upload"
          },
          "complete_upload": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Complete Upload"
          }
        },
        "type": "object",
        "required": [
          "abort_upload",
          "complete_upload"
        ],
        "title": "FileUploadLinks"
      },
      "FileUploadResponseV1": {
        "properties": {
          "link": {
            "type": "string",
            "minLength": 1,
            "format": "uri",
            "title": "Link"
          }
        },
        "type": "object",
        "required": [
          "link"
        ],
        "title": "FileUploadResponseV1"
      },
      "FileUploadSchema": {
        "properties": {
          "chunk_size": {
            "type": "integer",
            "minimum": 0,
            "title": "Chunk Size"
          },
          "urls": {
            "items": {
              "type": "string",
              "minLength": 1,
              "format": "uri"
            },
            "type": "array",
            "title": "Urls"
          },
          "links": {
            "$ref": "#/components/schemas/FileUploadLinks"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "chunk_size",
          "urls",
          "links"
        ],
        "title": "FileUploadSchema"
      },
      "HTTPValidationError": {
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Validation errors"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheck": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "api_version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Version"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "name",
          "status",
          "api_version",
          "version"
        ],
        "title": "HealthCheck"
      },
      "LinkType": {
        "type": "string",
        "enum": [
          "PRESIGNED",
          "S3"
        ],
        "title": "LinkType"
      },
      "PathMetaDataGet": {
        "properties": {
          "path": {
            "type": "string",
            "format": "path",
            "title": "Path",
            "description": "the path to the current path"
          },
          "display_path": {
            "type": "string",
            "format": "path",
            "title": "Display Path",
            "description": "the path to display with UUID replaced (URL Encoded by parts as names may contain '/')"
          },
          "file_meta_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FileMetaDataGet"
              },
              {
                "type": "null"
              }
            ],
            "description": "if filled, this is the file meta data of the s3 object"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "path",
          "display_path"
        ],
        "title": "PathMetaDataGet"
      },
      "PathTotalSizeCreate": {
        "properties": {
          "path": {
            "type": "string",
            "format": "path",
            "title": "Path"
          },
          "size": {
            "type": "integer",
            "minimum": 0,
            "title": "Size"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "path",
          "size"
        ],
        "title": "PathTotalSizeCreate"
      },
      "S3Settings": {
        "properties": {
          "S3_ACCESS_KEY": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "S3 Access Key"
          },
          "S3_BUCKET_NAME": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "S3 Bucket Name"
          },
          "S3_ENDPOINT": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 1,
                "format": "uri"
              },
              {
                "type": "null"
              }
            ],
            "title": "S3 Endpoint",
            "description": "do not define if using standard AWS"
          },
          "S3_REGION": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "S3 Region"
          },
          "S3_SECRET_KEY": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "S3 Secret Key"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "S3_ACCESS_KEY",
          "S3_BUCKET_NAME",
          "S3_REGION",
          "S3_SECRET_KEY"
        ],
        "title": "S3Settings"
      },
      "SoftCopyBody": {
        "properties": {
          "link_id": {
            "type": "string",
            "pattern": "^(api|([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12}))\\/([0-9a-fA-F]{8}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{4}-?[0-9a-fA-F]{12})\\/(.+)$",
            "title": "Link Id"
          }
        },
        "type": "object",
        "required": [
          "link_id"
        ],
        "title": "SoftCopyBody"
      },
      "UploadedPart": {
        "properties": {
          "number": {
            "type": "integer",
            "exclusiveMinimum": true,
            "title": "Number",
            "minimum": 0
          },
          "e_tag": {
            "type": "string",
            "title": "E Tag"
          }
        },
        "type": "object",
        "required": [
          "number",
          "e_tag"
        ],
        "title": "UploadedPart"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}
