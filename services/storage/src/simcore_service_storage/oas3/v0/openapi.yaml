openapi: 3.0.0
info:
  description: API definition for simcore-service-storage service
  version: 0.1.0
  title: simcore-service-storage API
  contact:
    name: IT'IS Foundation
    email: support@simcore.io
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE
servers:
  - url: http://{host}:{port}/{version}
    description: Development server
    variables:
      host:
        default: 'localhost'
      port:
        default: '8001'
      version:
        default: 'v0'
        enum:
          - 'v0'
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
- name: users
  description: Operations available to regular users
paths:
  /:
    get:
      tags:
        - users
      summary: Service health-check endpoint
      description: Some general information on the API and state of the service behind
      operationId: root_get
      responses:
        "200":
          $ref: '#/components/responses/HealthCheck_200'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /files/metadata:
    get:
      summary: Get Files Metadata
      operationId: get_files_metadata
      responses:
        '200':
          description: 'list of file meta-datas'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: 'components/schemas/files.yaml#FileMetaData'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  /files/{fileId}/metadata:
    get:
      summary: Get File Metadata
      operationId: get_file_metadata
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata_200'
    patch:
      summary: Update File Metadata
      operationId: update_file_meta_data
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata_200'
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components/schemas/files.yaml#FileMetaData'


  /files/{fileId}:
    get:
      summary: Donwload File
      operationId: download_file
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata_200'
    put:
      summary: Upload File
      operationId: upload_file
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        $ref: '#/components/requestBodies/FileMetaData'
      responses:
        '200':
          $ref: '#/components/responses/FileMetadata_200'
    delete:
      summary: Delte File
      operationId: delete_file
      parameters:
      - name: fileId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        '204':
          description: ''

components:
  responses:
    HeathCheck_200:
      description: Returns service information
      content:
        application/json:
          schema:
            $ref: 'components/schemas/health_check.yaml#HealthCheckEnveloped'

    FileMetaData_200:
      description: 'Returns file metadata'
      content:
        application/json:
          schema:
            $ref: 'components/schemas/files.yaml#FileMetaData'

    DefaultErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yaml#ErrorEnveloped'
