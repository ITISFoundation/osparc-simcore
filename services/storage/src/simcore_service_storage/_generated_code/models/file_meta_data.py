# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class FileMetaData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filename=None, version=None, last_accessed=None, owner=None, storage_location=None):  # noqa: E501
        """FileMetaData - a model defined in OpenAPI

        :param filename: The filename of this FileMetaData.  # noqa: E501
        :type filename: str
        :param version: The version of this FileMetaData.  # noqa: E501
        :type version: str
        :param last_accessed: The last_accessed of this FileMetaData.  # noqa: E501
        :type last_accessed: float
        :param owner: The owner of this FileMetaData.  # noqa: E501
        :type owner: str
        :param storage_location: The storage_location of this FileMetaData.  # noqa: E501
        :type storage_location: str
        """
        self.openapi_types = {
            'filename': 'str',
            'version': 'str',
            'last_accessed': 'float',
            'owner': 'str',
            'storage_location': 'str'
        }

        self.attribute_map = {
            'filename': 'filename',
            'version': 'version',
            'last_accessed': 'last_accessed',
            'owner': 'owner',
            'storage_location': 'storage_location'
        }

        self._filename = filename
        self._version = version
        self._last_accessed = last_accessed
        self._owner = owner
        self._storage_location = storage_location

    @classmethod
    def from_dict(cls, dikt) -> 'FileMetaData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileMetaData of this FileMetaData.  # noqa: E501
        :rtype: FileMetaData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filename(self):
        """Gets the filename of this FileMetaData.


        :return: The filename of this FileMetaData.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FileMetaData.


        :param filename: The filename of this FileMetaData.
        :type filename: str
        """

        self._filename = filename

    @property
    def version(self):
        """Gets the version of this FileMetaData.


        :return: The version of this FileMetaData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FileMetaData.


        :param version: The version of this FileMetaData.
        :type version: str
        """

        self._version = version

    @property
    def last_accessed(self):
        """Gets the last_accessed of this FileMetaData.


        :return: The last_accessed of this FileMetaData.
        :rtype: float
        """
        return self._last_accessed

    @last_accessed.setter
    def last_accessed(self, last_accessed):
        """Sets the last_accessed of this FileMetaData.


        :param last_accessed: The last_accessed of this FileMetaData.
        :type last_accessed: float
        """

        self._last_accessed = last_accessed

    @property
    def owner(self):
        """Gets the owner of this FileMetaData.


        :return: The owner of this FileMetaData.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this FileMetaData.


        :param owner: The owner of this FileMetaData.
        :type owner: str
        """

        self._owner = owner

    @property
    def storage_location(self):
        """Gets the storage_location of this FileMetaData.


        :return: The storage_location of this FileMetaData.
        :rtype: str
        """
        return self._storage_location

    @storage_location.setter
    def storage_location(self, storage_location):
        """Sets the storage_location of this FileMetaData.


        :param storage_location: The storage_location of this FileMetaData.
        :type storage_location: str
        """

        self._storage_location = storage_location
