{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "simcore project",
  "description": "Description of a simcore project",
  "type": "object",
  "additionalProperties": false,
  "required": [
    "name",
    "description",
    "notes",
    "owner",
    "collaborators",
    "creationDate",
    "lastChangeDate",
    "workbench",
    "thumbnail",
    "$schema"
  ],
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri"
    },
    "name": {
      "type": "string",
      "description": "project name",
      "examples": [
        "Temporal Distortion Simulator"
      ]
    },
    "description": {
      "type": "string",
      "description": "longer one-line description about the project",
      "examples": [
        "Dabbling in temporal transitions ..."
      ]
    },
    "notes": {
      "type": "string",
      "description": "longer project description. using common mark",
      "examples": [
        "# title\nSome Text `with` common mark markup"
      ]
    },
    "thumbnail": {
      "type": "string",
      "format": "uri",
      "description": "pointer to an 512x512 image, ideally a data url"
    },
    "owner": {
      "type": "string",
      "description": "user uuid"
    },
    "collaborators": {
      "type": "object",
      "description": "UUIDs of the users/groups who should get access to this",
      "patternProperties": {
        "^\\S+$": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "read",
              "write"
            ]
          }
        }
      }
    },
    "creationDate": {
      "type": "string",
      "description": "project creation date",
      "pattern": "\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[1-9])(:(\\d|[0-5]\\d)){2}Z",
      "examples": [
        "2018-07-01T11:13:43Z"
      ]
    },
    "lastChangeDate": {
      "type": "string",
      "description": "last save date",
      "pattern": "\\d{4}-(12|11|10|0?[1-9])-(31|30|[0-2]?\\d)T(2[0-3]|1\\d|0?[1-9])(:(\\d|[0-5]\\d)){2}Z",
      "examples": [
        "2018-07-01T11:13:43Z"
      ]
    },
    "workbench": {
      "type": "object",
      "definitions": {

        "node": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "key",
            "version",
            "position",
            "label"
          ],
          "properties": {
            "key": {
              "type": "string",
              "description": "distinctive name for the node based on the docker registry path",
              "pattern": "^(service)/(computational|dynamic)(/[^\\s/]+)+$",
              "examples": [
                "service/computational/sleeper",
                "service/dynamic/3dviewer"
              ]
            },
            "version": {
              "type": "string",
              "description": "semantic version number of the node",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "examples": [
                "1.0.0",
                "0.0.1"
              ]
            },
            "label": {
              "type": "string",
              "description": "human readable name for the node to be displayed instead of the default name"
            },
            "inputs": {
              "type": "object",
              "description": "An opaque data structure describing the input configuration as well as the internal state of the node."
            },
            "inputNodes": {
              "type": "array",
              "description": "list of UUIDS of input nodes providing input data to this node",
              "items": {
                "type":"string",
                "pattern": "^[-_a-zA-Z0-9]+$",
                "description": "node UUID"
              }
            },
            "outputs": {
              "type": "object",
              "description": "nodes providing static (non api output) store their output here after computation is complete.",
              "patternProperties": {
                "^[-_a-zA-Z0-9]+$": {
                  "oneOf": [
                    {
                      "type": [
                        "integer",
                        "boolean",
                        "string",
                        "number"
                      ]
                    },
                    {
                      "type": "object",
                      "additionalProperties": false,
                      "required": [
                        "store",
                        "path"
                      ],
                      "properties": {
                        "store": {
                          "type": "string"
                        },
                        "path": {
                          "type": "string"
                        }
                      }
                    }
                  ]
                }
              }
            },
            "position": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "x",
                "y"
              ],
              "properties": {
                "x": {
                  "type": "integer"
                },
                "y": {
                  "type": "integer"
                }
              }
            },
            "parent": {
              "type": "string",
              "pattern": "^[-_a-zA-Z0-9]+$",
              "description": "pointing to a container node"
            }
          }
        },
        "containerNode": {
          "type": "object",
          "additionalProperties": false,
          "required": [
            "label",
            "position"
          ],
          "properties": {
            "label": {
              "$ref": "#/properties/workbench/definitions/node/properties/label"
            },
            "position": {
              "$ref": "#/properties/workbench/definitions/node/properties/position"
            },
            "inputNodes": {
              "$ref": "#/properties/workbench/definitions/node/properties/inputNodes"
            },
            "parent": {
              "$ref": "#/properties/workbench/definitions/node/properties/parent"
            }
          }
        }
      },
      "patternProperties": {
        "^[-_a-zA-Z0-9]+$": {
          "anyOf": [
            { "$ref": "#/properties/workbench/definitions/node" },
            { "$ref": "#/properties/workbench/definitions/containerNode" }
          ]
        }
      }
    }
  }
}
