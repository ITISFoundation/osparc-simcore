swagger: '2.0'
info:
  contact:
    email: oetiker@itis.ethz.ch
    name: Tobias Oetiker
  description: OSparc Server API
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  title: OSparc Server REST API
  version: 0.0.1
paths:
  /upload/abort:
    post:
      consumes:
        - application/json
      parameters:
        - description: cancel a pending upload
          in: body
          name: body
          schema:
            example:
              uploadId: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD
            properties:
              uploadId:
                type: string
            required:
              - uploadId
            type: object
      responses:
        '200':
          description: upload canceled
        '404':
          description: upload does not exist
      tags:
        - upload
      description: Abort a pending multi part upload
      operationId: uploadAbort
      summary: abort the pending upload
  /upload/complete:
    post:
      consumes:
        - application/json
      parameters:
        - description: a list of uploaded parts to be assembled into a file
          in: body
          name: body
          schema:
            example:
              - eTag: 7e10e7d25dc4581d89b9285be5f384fd
                partNumber: 1
              - eTag: 1c10d25dc4581d89b9285be5f334fec5
                partNumber: 2
            items:
              properties:
                eTag:
                  type: string
                partNumber:
                  format: int64
                  type: integer
              required:
                - partNumber
                - eTag
              type: object
            type: array
      responses:
        '201':
          description: new file has been created
          headers:
            ETag:
              description: Entity Tag of the newly created file
              type: string
        '404':
          description: No Such Upload
      tags:
        - upload
      description: Complete upload process
      operationId: uploadComplete
      summary: complete upload process
  /upload/part:
    post:
      consumes:
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - description: which upload does this belong to
          in: header
          name: X-Upload-Id
          required: true
          type: string
          x-example: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD
        - description: which part of the upload is this ?
          format: int64
          in: header
          name: X-Upload-Part-Number
          required: true
          type: integer
          x-example: 22
        - description: a raw block of data ... not encoded
          in: formData
          name: body
          type: file
          x-example: big-bad-binary-data
      responses:
        '200':
          description: confirmation for the successful part upload
          schema:
            example:
              eTag: 7e10e7d25dc4581d89b9285be5f384fd
              size: 9388854884884884
            properties:
              eTag:
                description: Entity Tag of the part just uploaded
                type: string
              size:
                format: int64
                type: integer
            required:
              - eTag
              - size
            type: object
        '404':
          description: No Such Upload
      tags:
        - upload
      description: Upload a block of data
      operationId: uploadPart
      summary: upload a data block
  /upload/start:
    post:
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: the properties of the File Object
          in: body
          name: body
          schema:
            example:
              lastModified: 15294862961234
              name: big-date.bin
              size: 1000000000000
            properties:
              lastModified:
                description: last file modification in milliseconds since 1970-01-01
                format: int64
                type: integer
              name:
                description: file name
                type: string
              size:
                description: file size in bytes
                format: int64
                type: integer
            required:
              - name
              - size
              - lastModified
            type: object
      responses:
        '200':
          description: |
            Meta information about the upload. If a pending upload has matched
            the information given in the fileMetaData the response will contain
            information about the already uploaded chunks of data.
          schema:
            example:
              partsPresent:
                - eTag: 7778aef83f66abc1fa1e8477f296d394
                  partNumber: 1
                  size: 1024
                - eTag: 8234979234987eafff384
                  partNumber: 3
                  size: 1024
              uploadId: EXAMPLEJZ6e0YupT2h66iePQCc9IEbYbD...
            properties:
              partsPresent:
                items:
                  properties:
                    eTag:
                      type: string
                    partNumber:
                      format: int64
                      type: integer
                    size:
                      format: int64
                      type: integer
                  required:
                    - partNumber
                    - size
                    - eTag
                  type: object
                minItems: 0
                type: array
              uploadId:
                type: string
            required:
              - uploadId
              - partsPresent
            type: object
        '405':
          description: Request was not formed as expected
      tags:
        - upload
      description: Start or resume an upload
      operationId: uploadStart
      summary: start an upload
tags:
  - description: |
      The REST API is modeled after the S3 multi part upload service
      which makes this very simple to implement on the server side
      especially if you have an S3 like [minio.io](https://www.minio.io/).
    name: upload

