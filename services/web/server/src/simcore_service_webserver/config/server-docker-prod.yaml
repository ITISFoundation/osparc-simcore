#
# The environment variables in this context are those defined in the production container
#
# NOTE: Trafaret does not handle defaults as ${WEBSERVER_LOGLEVEL:-info}
#       To define defaults, see services/web/server/src/simcore_service_webserver/cli.py::create_environ
---
version: "1.0"
main:
  host: 0.0.0.0
  port: 8080
  client_outdir: ${SIMCORE_WEB_OUTDIR}
  log_level: ${WEBSERVER_LOGLEVEL}
  testing: False
  studies_access_enabled: ${WEBSERVER_STUDIES_ACCESS_ENABLED}
tracing:
  enabled: ${TRACING_ENABLED}
  zipkin_endpoint: ${TRACING_ZIPKIN_ENDPOINT}
socketio:
  enabled: True
director:
  host: ${DIRECTOR_HOST}
  port: ${DIRECTOR_PORT}
  version: v0
db:
  # Default for WEBSERVER_DB_INITTABLES set in cli.py
  init_tables: ${WEBSERVER_DB_INITTABLES}
  postgres:
    database: ${POSTGRES_DB}
    endpoint: ${POSTGRES_ENDPOINT}
    user: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    host: ${POSTGRES_HOST}
    port: ${POSTGRES_PORT}
    minsize: 4
    maxsize: 4
resource_manager:
  enabled: True
  resource_deletion_timeout_seconds: ${WEBSERVER_RESOURCES_DELETION_TIMEOUT_SECONDS}
  garbage_collection_interval_seconds: ${WEBSERVER_GARBAGE_COLLECTION_INTERVAL_SECONDS}
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
rabbit:
  host: ${RABBIT_HOST}
  port: ${RABBIT_PORT}
  user: ${RABBIT_USER}
  password: ${RABBIT_PASSWORD}
  channels:
    progress: "comp.backend.channels.progress"
    log: "comp.backend.channels.log"
login:
  enabled: True
  registration_invitation_required: ${WEBSERVER_LOGIN_REGISTRATION_INVITATION_REQUIRED}
  registration_confirmation_required: ${WEBSERVER_LOGIN_REGISTRATION_CONFIRMATION_REQUIRED}
smtp:
  sender: "OSPARC support <support@osparc.io>"
  host: ${SMTP_HOST}
  port: ${SMTP_PORT}
  tls: ${SMTP_TLS_ENABLED}
  username: ${SMTP_USERNAME}
  password: ${SMTP_PASSWORD}
storage:
  host: ${STORAGE_HOST}
  port: ${STORAGE_PORT}
  version: v0
catalog:
  host: ${CATALOG_HOST}
  port: 8000
  version: v0
application_proxy:
  enabled: False
reverse_proxy:
  enabled: False
rest:
  version: v0
projects:
  enabled: True
session:
  # python3 -c "from cryptography.fernet import Fernet; print(Fernet.generate_key())"
  secret_key: ${WEBSERVER_SESSION_SECRET_KEY}
activity:
  enabled: True
  prometheus_host: ${WEBSERVER_PROMETHEUS_HOST}
  prometheus_port: ${WEBSERVER_PROMETHEUS_PORT}
  prometheus_api_version: ${WEBSERVER_PROMETHEUS_API_VERSION}
