# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class ErrorError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, error: str=None, message: str=None, fields: Dict[str, str]=None):  # noqa: E501
        """ErrorError - a model defined in OpenAPI

        :param code: The code of this ErrorError.  # noqa: E501
        :type code: int
        :param error: The error of this ErrorError.  # noqa: E501
        :type error: str
        :param message: The message of this ErrorError.  # noqa: E501
        :type message: str
        :param fields: The fields of this ErrorError.  # noqa: E501
        :type fields: Dict[str, str]
        """
        self.openapi_types = {
            'code': int,
            'error': str,
            'message': str,
            'fields': Dict[str, str]
        }

        self.attribute_map = {
            'code': 'code',
            'error': 'error',
            'message': 'message',
            'fields': 'fields'
        }

        self._code = code
        self._error = error
        self._message = message
        self._fields = fields

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error_error of this ErrorError.  # noqa: E501
        :rtype: ErrorError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> int:
        """Gets the code of this ErrorError.


        :return: The code of this ErrorError.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code: int):
        """Sets the code of this ErrorError.


        :param code: The code of this ErrorError.
        :type code: int
        """

        self._code = code

    @property
    def error(self) -> str:
        """Gets the error of this ErrorError.


        :return: The error of this ErrorError.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this ErrorError.


        :param error: The error of this ErrorError.
        :type error: str
        """

        self._error = error

    @property
    def message(self) -> str:
        """Gets the message of this ErrorError.


        :return: The message of this ErrorError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ErrorError.


        :param message: The message of this ErrorError.
        :type message: str
        """

        self._message = message

    @property
    def fields(self) -> Dict[str, str]:
        """Gets the fields of this ErrorError.

        a dict with error messages specific fot request's fields  # noqa: E501

        :return: The fields of this ErrorError.
        :rtype: Dict[str, str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: Dict[str, str]):
        """Sets the fields of this ErrorError.

        a dict with error messages specific fot request's fields  # noqa: E501

        :param fields: The fields of this ErrorError.
        :type fields: Dict[str, str]
        """

        self._fields = fields
