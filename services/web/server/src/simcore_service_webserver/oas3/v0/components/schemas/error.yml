ErrorEnveloped:
  type: object
  required:
    - error
    - data
  properties:
    error:
      $ref: '#/Error'
    data:
      type: object
    status:
      type: integer

Error:
  type: object
  properties:
    logs:
      description: log messages
      type: array
      items:
        $ref: 'log_message.yml#LogMessage'
    errors:
      description: errors metadata
      type: array
      items:
         $ref: '#/ErrorItem'
    status:
      description: HTTP error code
      type: integer
  example:
    BadRequestError:
      logs:
        - message: 'Requested information is incomplete or malformed'
          level: ERROR
        - message: 'Invalid email and password'
          level: ERROR
          logger: USER
      errors:
        - code: "InvalidEmail"
          message: "Email is malformed"
          field: email
        - code: "UnsavePassword"
          message: "Password is not secure"
          field: pasword
      status: 400

# TODO: improve structure of Error model needs. Still not convince it is good enough!
#  - log entry
#  - meta-information to allow client taking a decision (e.g. raise execption).
#  - Some mechanism to transmit exceptions from server to client? Serialization of exceptions?

ErrorItem:
  type: object
  required:
    - code
    - message
  properties:
    code:
      type: string
      description: Typically the name of the exception that produced it otherwise some known error code
    message:
      type: string
      description: Error message specific to this item
    resource:
      type: string
      description: API resource affected by this error
    field:
      type: string
      description: Specific field within the resource
