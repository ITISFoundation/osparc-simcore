openapi: 3.0.0
info:
  description: API definition for simcore-service-webserver service
  version: 0.1.0
  title: simcore-service-webserver API
  contact:
    name: IT'IS Foundation
    email: support@simcore.io
  license:
    name: MIT
    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE
servers:
  - description: Development server
    url: http://{host}:{port}/{basePath}
    variables:
      host:
        default: 'localhost'
      port:
        default: '8001'
      basePath:
        enum:
          - v0
        default: v0
  - description: Production server
    url: '{publicUrl}/{basePath}'
    variables:
      publicUrl:
        default: 'https://osparc.io'
      basePath:
        enum:
          - v0
        default: v0
tags:
- name: admins
  description: Secured Admin-only calls
- name: tests
  description: Operations available for testing
- name: users
  description: Operations available to regular users
paths:
  /:
    get:
      tags:
        - users
      summary: Service health-check endpoint
      description: Some general information on the API and state of the service behind
      operationId: check_health
      responses:
        "200":
          description: Service information
          content:
            application/json:
              schema:
                $ref: 'components/schemas/health_check.yml#/HealthCheckEnveloped'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  /check/{action}:
    post:
      tags:
        - tests
      summary: Test checkpoint to ask server to fail or echo back the transmitted data
      operationId: check_action
      parameters:
        - in: query
          name: data
          schema:
            type: string
        - in: path
          name: action
          schema:
            type: string
            default: 'echo'
            enum: ['fail', 'echo']
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components/schemas/fake.yml#/FakeType'
      responses:
        '200':
          description: Echoes response based on action
          content:
            application/json:
              schema:
                $ref: 'components/schemas/fake.yml#/FakeEnveloped'
        default:
          description: 'Returns enveloped payload w/ or w/o data'
          content:
            application/json:
              schema:
                $ref: 'components/schemas/fake.yml#/FakeEnveloped'
  /auth/register:
    post:
      operationId: auth_register
      requestBody:
        description: user registration
        content:
          application/json:
            schema:
              $ref: 'components/schemas/registration.yml#/RegistrationType'
        required: true
      responses:
        '200':
          description: User has been succesfully registered.
          content:
            application/json:
              schema:
                $ref: 'components/schemas/log_message.yml#/LogMessageEnveloped'
        '400':
            $ref: '#/components/responses/DataError_BadRequest_400'
        '409':
            $ref: '#/components/responses/DataError_Conflict_409'
        '422':
            $ref: '#/components/responses/DataError_UnprocessableEntity_422'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  /auth/login:
    post:
      operationId: auth_login
      requestBody:
        content:
          application/json:
            schema:
              $ref: 'components/schemas/login.yml#/LoginFormType'
      responses:
        '200':
          description: Succesfully logged in
          content:
            application/json:
              schema:
                $ref: 'components/schemas/log_message.yml#/LogMessageEnveloped'
        '401':
          $ref: '#/components/responses/AuthError_Unauthorized_401'
        '422':
            $ref: '#/components/responses/DataError_UnprocessableEntity_422'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  /auth/logout:
    get:
      operationId: auth_logout
      responses:
        '200':
          description: Succesfully logged out
          content:
            application/json:
              schema:
                $ref: 'components/schemas/log_message.yml#/LogMessageEnveloped'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'
  #/auth/reset-password:
  /auth/change-email:
    post:
      operationId: auth_change_email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_email:
                  type: string
                  #format: email
      responses:
        '200':
          description: User has been succesfully registered.
          content:
            application/json:
              schema:
                $ref: 'components/schemas/log_message.yml#/LogMessageEnveloped'
        default:
          $ref: '#/components/responses/DefaultErrorResponse'

  #/auth/change-password:
  /auth/confirmation/{code}:
    get:
      operationId: auth_confirmation
      parameters:
        - name: code
          in: path
          required: true
          schema:
            type: string
            #format: uuid
      responses:
        default:
          $ref: '#/components/responses/OK_NoContent_204'



components:
  responses:
    # TODO:Envelope objects are still not well/easily defined. See discriminators
    OK_NoContent_204:
      description: everything is OK, but there is no content to return

    DefaultErrorResponse:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    DataError_BadRequest_400:
      description: requested information is incomplete or malformed
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    DataError_UnprocessableEntity_422:
      description: requested information is ok but invalid
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    DataError_NotFound_404:
      description: everything is okay, but the resource doesnt exist
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    DataError_Conflict_409:
      description: a confict of data exists, even with valid information
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    AuthError_Unauthorized_401:
      description: access token isnt provided or is invalid
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    AuthError_Forbidden_403:
      description: an access token is valid, but requires more privileges
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'

    InternalServerError_500:
      description: server throws an error, completely unexpected
      content:
        application/json:
          schema:
            $ref: 'components/schemas/error.yml#/ErrorEnveloped'
