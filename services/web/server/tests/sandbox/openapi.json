{
  "openapi": "3.0.2",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "paths": {
    "/catalog/services/{service_key}/{service_version}/inputs": {
      "get": {
        "summary": "List Service Inputs",
        "operationId": "list_service_inputs_catalog_services__service_key___service_version__inputs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInputApiOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/services/{service_key}/{service_version}/inputs/{input_key}": {
      "get": {
        "summary": "Get Service Input",
        "operationId": "get_service_input_catalog_services__service_key___service_version__inputs__input_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Input Key",
              "pattern": "^[-_a-zA-Z0-9]+$",
              "type": "string"
            },
            "name": "input_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInputApiOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/services/{service_key}/{service_version}/inputs:match": {
      "get": {
        "summary": "Get Compatible Inputs Given Source Output",
        "description": "    Filters inputs of this service that match a given service output\n\nReturns compatible input ports of the service, provided an output port of\na connected node.",
        "operationId": "get_compatible_inputs_given_source_output_catalog_services__service_key___service_version__inputs_match_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Fromservice",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "fromService",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Fromversion",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "fromVersion",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Fromoutput",
              "pattern": "^[-_a-zA-Z0-9]+$",
              "type": "string"
            },
            "name": "fromOutput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Compatible Inputs Given Source Output Catalog Services  Service Key   Service Version  Inputs Match Get",
                  "type": "array",
                  "items": {
                    "pattern": "^[-_a-zA-Z0-9]+$",
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/services/{service_key}/{service_version}/outputs": {
      "get": {
        "summary": "List Service Outputs",
        "operationId": "list_service_outputs_catalog_services__service_key___service_version__outputs_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response List Service Outputs Catalog Services  Service Key   Service Version  Outputs Get",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceOutputApiOut"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/services/{service_key}/{service_version}/outputs/{output_key}": {
      "get": {
        "summary": "Get Service Output",
        "operationId": "get_service_output_catalog_services__service_key___service_version__outputs__output_key__get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Output Key",
              "pattern": "^[-_a-zA-Z0-9]+$",
              "type": "string"
            },
            "name": "output_key",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceOutputApiOut"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/catalog/services/{service_key}/{service_version}/outputs:match": {
      "get": {
        "summary": "Get Compatible Outputs Given Target Input",
        "description": "Filters outputs of this service that match a given service input\n\nReturns compatible output port of a connected node for a given input",
        "operationId": "get_compatible_outputs_given_target_input_catalog_services__service_key___service_version__outputs_match_get",
        "parameters": [
          {
            "required": true,
            "schema": {
              "title": "Service Key",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "service_key",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Service Version",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "service_version",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "title": "Toservice",
              "pattern": "^(simcore)/(services)/(comp|dynamic|frontend)(/[\\w/-]+)+$",
              "type": "string"
            },
            "name": "toService",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Toversion",
              "pattern": "^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){2}(-(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*)(\\.(0|[1-9]\\d*|\\d*[-a-zA-Z][-\\da-zA-Z]*))*)?(\\+[-\\da-zA-Z]+(\\.[-\\da-zA-Z-]+)*)?$",
              "type": "string"
            },
            "name": "toVersion",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "title": "Toinput",
              "pattern": "^[-_a-zA-Z0-9]+$",
              "type": "string"
            },
            "name": "toInput",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response Get Compatible Outputs Given Target Input Catalog Services  Service Key   Service Version  Outputs Match Get",
                  "type": "array",
                  "items": {
                    "pattern": "^[-_a-zA-Z0-9]+$",
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "title": "HTTPValidationError",
        "type": "object",
        "properties": {
          "detail": {
            "title": "Detail",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "SelectBox": {
        "title": "SelectBox",
        "required": [
          "structure"
        ],
        "type": "object",
        "properties": {
          "structure": {
            "title": "Structure",
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Structure"
            }
          }
        },
        "additionalProperties": false
      },
      "ServiceInputApiOut": {
        "title": "ServiceInputApiOut",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type",
          "keyId"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type"
          },
          "keyId": {
            "title": "Keyid",
            "pattern": "^[-_a-zA-Z0-9]+$",
            "type": "string",
            "description": "Unique name identifier for this input"
          },
          "unitLong": {
            "title": "Unitlong",
            "type": "string",
            "description": "Long name of the unit, if available"
          },
          "unitShort": {
            "title": "Unitshort",
            "type": "string",
            "description": "Short name for the unit, if available"
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input port",
        "example": {
          "displayOrder": 2,
          "label": "Sleep Time",
          "description": "Time to wait before completion",
          "type": "number",
          "fileToKeyMap": {},
          "defaultValue": 0,
          "unit": "second",
          "widget": {
            "type": "TextArea",
            "details": {
              "minHeight": 0
            }
          },
          "keyId": "input_2",
          "unitLong": "seconds",
          "unitShort": "sec"
        }
      },
      "ServiceOutputApiOut": {
        "title": "ServiceOutputApiOut",
        "required": [
          "displayOrder",
          "label",
          "description",
          "type",
          "keyId"
        ],
        "type": "object",
        "properties": {
          "displayOrder": {
            "title": "Displayorder",
            "type": "number",
            "description": "use this to numerically sort the properties for display"
          },
          "label": {
            "title": "Label",
            "type": "string",
            "description": "short name for the property",
            "example": "Age"
          },
          "description": {
            "title": "Description",
            "type": "string",
            "description": "description of the property",
            "example": "Age in seconds since 1970"
          },
          "type": {
            "title": "Type",
            "pattern": "^(number|integer|boolean|string|data:([^/\\s,]+/[^/\\s,]+|\\[[^/\\s,]+/[^/\\s,]+(,[^/\\s]+/[^/,\\s]+)*\\]))$",
            "type": "string",
            "description": "data type expected on this input glob matching for data type is allowed"
          },
          "fileToKeyMap": {
            "title": "Filetokeymap",
            "type": "object",
            "description": "Place the data associated with the named keys in files"
          },
          "defaultValue": {
            "title": "Defaultvalue",
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ]
          },
          "unit": {
            "title": "Unit",
            "type": "string",
            "description": "Units, when it refers to a physical quantity"
          },
          "widget": {
            "title": "Widget",
            "allOf": [
              {
                "$ref": "#/components/schemas/Widget"
              }
            ],
            "description": "custom widget to use instead of the default one determined from the data-type",
            "deprecated": true
          },
          "keyId": {
            "title": "Keyid",
            "pattern": "^[-_a-zA-Z0-9]+$",
            "type": "string",
            "description": "Unique name identifier for this input"
          }
        },
        "additionalProperties": false,
        "description": "Metadata on a service input or output port",
        "example": {
          "displayOrder": 2,
          "label": "Sleep Time",
          "description": "Time to wait before completion",
          "type": "number",
          "fileToKeyMap": {},
          "defaultValue": 0,
          "unit": "second",
          "widget": {
            "type": "TextArea",
            "details": {
              "minHeight": 0
            }
          },
          "keyId": "input_2",
          "unitLong": "seconds",
          "unitShort": "sec"
        }
      },
      "Structure": {
        "title": "Structure",
        "required": [
          "key",
          "label"
        ],
        "type": "object",
        "properties": {
          "key": {
            "title": "Key",
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "number"
              }
            ]
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TextArea": {
        "title": "TextArea",
        "required": [
          "minHeight"
        ],
        "type": "object",
        "properties": {
          "minHeight": {
            "title": "Minheight",
            "exclusiveMinimum": 0.0,
            "type": "integer",
            "description": "minimum Height of the textarea"
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "type": "object",
        "properties": {
          "loc": {
            "title": "Location",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        }
      },
      "Widget": {
        "title": "Widget",
        "required": [
          "type",
          "details"
        ],
        "type": "object",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WidgetType"
              }
            ],
            "description": "type of the property"
          },
          "details": {
            "title": "Details",
            "anyOf": [
              {
                "$ref": "#/components/schemas/TextArea"
              },
              {
                "$ref": "#/components/schemas/SelectBox"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WidgetType": {
        "title": "WidgetType",
        "enum": [
          "TextArea",
          "SelectBox"
        ],
        "type": "string",
        "description": "An enumeration."
      }
    }
  }
}
