
""" This script produces a markdown document with links to template studies

    Aims to emulate links

"""
import datetime
import json
import sys
from pathlib import Path

from simcore_service_webserver.resources import resources
from simcore_service_webserver.login.utils import get_random_string
from simcore_service_webserver.login.registration import get_invitation_url, URL

MARKDOWN_FILENAME = "study_access_demo.md"
ISSUE = r"https://github.com/ITISFoundation/osparc-simcore/issues/"

current_path = Path( sys.argv[0] if __name__ == "__main__" else __file__).resolve()

HOST_URLS_MAPS = [
    ('localhost', r'http://127.0.0.1:9081'),
    ('master', r'http://osparc01.itis.ethz.ch:9081'),
    ('staging', r'https://staging.osparc.io'),
    ('osparc.io', r'https://osparc.io')
]


def write_list(hostname, url, data, fh):
    print("## studies available @{}".format(hostname), file=fh)
    print("", file=fh)
    for prj in data:
        print("- [{name}]({base_url}/study/{uuid})".format(base_url=url, **prj), file=fh)
    print("", file=fh)

def main():
    with resources.stream('data/fake-template-projects.isan.json') as fp:
        data = json.load(fp)

    with open(MARKDOWN_FILENAME, "wt") as fh:
        print("<!-- Generated by {} on {} -->".format(current_path.name, datetime.datetime.utcnow()), file=fh)
        print("# THE PORTAL Emulator\n", file=fh)
        print("This pages is for testing purposes for issue [#{1}]({0}{1})\n".format(ISSUE, 715), file=fh)

        for hostname, url in HOST_URLS_MAPS:
            write_list(hostname, url, data, fh)

        print("---", file=fh)

        print("# INVITATIONS Samples:", file=fh)
        codes = [ get_random_string(30) for n in range(5)]

        for hostname, url in HOST_URLS_MAPS:
            print("## urls for @{}".format(hostname), file=fh)
            for code in codes:
                print("- [{code}]({base_url})".format(base_url=get_invitation_url({'code':code, 'action':"INVITATION"}, URL(url)), code=code), file=fh)

        print("", file=fh)

if __name__ == "__main__":
    main()
