name: CI

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"
    paths-ignore:
      - "*.md"
      - "*.png"
      - "*.svg"
      - "docs/**"
      - ".vscode/**"
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "*.md"
      - "*.png"
      - "*.svg"
      - "docs/**"
      - ".vscode/**"
      - ".vscode-template/**"

env:
  # secrets can be set in settings/secrets on github
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CC_TEST_REPORTER_ID: 21a72eb30476c870140b1576258873a41be6692f71bd9aebe812174b7d8f4b4e
  #enable buildkit
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  unit-test-api:
    name: "[unit] api"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-api-${{ hashFiles('api/tests/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-api-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install api
        run: ./ci/github/unit-testing/api.bash install
      - name: test
        run: ./ci/github/unit-testing/api.bash test

  unit-test-api-server:
    name: "[unit] api-server"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-api-server-${{ hashFiles('services/api-server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-api-server-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/api-server.bash install
      - name: test
        run: ./ci/github/unit-testing/api-server.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_api_server_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_api_server_coverage
          path: codeclimate.unit_api_server_coverage.json

  unit-test-catalog:
    name: "[unit] catalog"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-catalog-${{ hashFiles('services/catalog/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-catalog-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/catalog.bash install
      - name: test
        run: ./ci/github/unit-testing/catalog.bash test
      - name: upload failed tests logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_catalog_docker_logs
          path: ./services/catalog/test_failures
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_catalog_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_catalog_coverage
          path: codeclimate.unit_catalog_coverage.json

  unit-test-director:
    name: "[unit] director"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-director-${{ hashFiles('services/director/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-director-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/director.bash install
      - name: test
        run: ./ci/github/unit-testing/director.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_director_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_director_coverage
          path: codeclimate.unit_director_coverage.json

  unit-test-director-v2:
    name: "[unit] director-v2"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo ::set-env name=DOCKER_BUILDX::1
      - name: setup python environment
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v1
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: install
        run: ./ci/github/unit-testing/director_v2.bash install
      - name: test
        run: ./ci/github/unit-testing/director_v2.bash test
      - name: upload failed tests logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: unit_tests_director_v2_docker_logs
          path: ./services/director-v2/test_failures
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_director_v2_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_director_v2_coverage
          path: codeclimate.unit_director_v2_coverage.json

  unit-test-sidecar:
    name: "[unit] sidecar"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-sidecar-${{ hashFiles('services/sidecar/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-sidecar-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/sidecar.bash install
      - name: test
        run: ./ci/github/unit-testing/sidecar.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_sidecar_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_sidecar_coverage
          path: codeclimate.unit_sidecar_coverage.json

  unit-test-frontend:
    name: "[unit] frontend"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [14]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - name: install
        run: ./ci/github/unit-testing/frontend.bash install
      - name: test
        run: ./ci/github/unit-testing/frontend.bash test
    # no coverage here??
    # - uses: codecov/codecov-action@v1
    #   with:
    #     flags: unittests #optional

  unit-test-python-linting:
    name: "[unit] python-linting"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-linting-${{ hashFiles('ci/helpers/install_pylint.bash') }}
          restore-keys: |
            ${{ runner.os }}-pip-linting-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/python-linting.bash install
      - name: test
        run: ./ci/github/unit-testing/python-linting.bash test

  unit-test-postgres-database:
    name: "[unit] postgres-database"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-postgres-database-${{ hashFiles('packages/postgres-database/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-postgres-database-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/postgres-database.bash install
      - name: test
        run: ./ci/github/unit-testing/postgres-database.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_postgresdb_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_postgresdb_coverage
          path: codeclimate.unit_postgresdb_coverage.json

  unit-test-service-library:
    name: "[unit] service-library"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-service-library-${{ hashFiles('packages/service-library/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-service-library-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/service-library.bash install
      - name: test
        run: ./ci/github/unit-testing/service-library.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_servicelib_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_servicelib_coverage
          path: codeclimate.unit_servicelib_coverage.json

  unit-test-models-library:
    name: "[unit] models-library"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-models-library-${{ hashFiles('packages/models-library/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-models-library-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/models-library.bash install
      - name: test
        run: ./ci/github/unit-testing/models-library.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_modelslib_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_modelslib_coverage
          path: codeclimate.unit_modelslib_coverage.json

  unit-test-simcore-sdk:
    name: "[unit] simcore-sdk"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-simcore-sdk${{ hashFiles('packages/simcore-sdk/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-simcore-sdk
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/simcore-sdk.bash install
      - name: test
        run: ./ci/github/unit-testing/simcore-sdk.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_simcoresdk_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_simcoresdk_coverage
          path: codeclimate.unit_simcoresdk_coverage.json

  unit-test-storage:
    name: "[unit] storage"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-storage-${{ hashFiles('services/storage/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-storage-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/unit-testing/storage.bash install
      - name: test
        run: ./ci/github/unit-testing/storage.bash test
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_storage_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_storage_coverage
          path: codeclimate.unit_storage_coverage.json

  # webserver tested are split according to time https://github.com/ITISFoundation/osparc-simcore/pull/1711
  unit-test-webserver-isolated:
    name: "[unit] webserver isolated"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-webserver-${{ hashFiles('services/web/server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-webserver-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install webserver
        run: ./ci/github/unit-testing/webserver.bash install
      - name: test
        run: ./ci/github/unit-testing/webserver.bash test_isolated
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_webserver_isolated_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_webserver_isolated_coverage
          path: codeclimate.unit_webserver_isolated_coverage.json

  # webserver tested are split according to time https://github.com/ITISFoundation/osparc-simcore/pull/1711
  unit-test-webserver-slow:
    name: "[unit] webserver slow"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-webserver-${{ hashFiles('services/web/server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-webserver-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install webserver
        run: ./ci/github/unit-testing/webserver.bash install
      - name: test
        run: ./ci/github/unit-testing/webserver.bash test_with_db_slow
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_webserver_slow_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_webserver_slow_coverage
          path: codeclimate.unit_webserver_slow_coverage.json

  # webserver tested are split according to time https://github.com/ITISFoundation/osparc-simcore/pull/1711
  unit-test-webserver-medium:
    name: "[unit] webserver medium"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-webserver-${{ hashFiles('services/web/server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-webserver-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install webserver
        run: ./ci/github/unit-testing/webserver.bash install
      - name: test
        run: ./ci/github/unit-testing/webserver.bash test_with_db_medium
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_webserver_medium_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_webserver_medium_coverage
          path: codeclimate.unit_webserver_medium_coverage.json

  # webserver tested are split according to time https://github.com/ITISFoundation/osparc-simcore/pull/1711
  unit-test-webserver-fast:
    name: "[unit] webserver fast"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-webserver-${{ hashFiles('services/web/server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-webserver-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install webserver
        run: ./ci/github/unit-testing/webserver.bash install
      - name: test
        run: ./ci/github/unit-testing/webserver.bash test_with_db_fast
      - uses: codecov/codecov-action@v1
        with:
          flags: unittests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.unit_webserver_fast_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: unit_webserver_fast_coverage
          path: codeclimate.unit_webserver_fast_coverage.json

  build-test-images:
    # make PR faster by executing this one straight as PR cannot push to the registry anyway
    runs-on: ubuntu-20.04
    name: "[build] docker images"
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        if: github.event_name == 'push'
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: show system environs
        if: github.event_name == 'push'
        run: ./ci/helpers/show_system_versions.bash
      - name: pull images
        if: github.event_name == 'push'
        run: ./ci/build/test-images.bash pull_images
      - name: build images
        if: github.event_name == 'push'
        run: ./ci/build/test-images.bash build_images
      - name: set owner variable
        if: github.event_name == 'push'
        run: echo "OWNER=${GITHUB_REPOSITORY%/*}" >> $GITHUB_ENV
      - name: push images
        # only pushes have access to the docker credentials
        if: github.event_name == 'push'
        run: ./ci/deploy/dockerhub-test-images.bash

  integration-test-webserver:
    name: "[int] webserver"
    needs: [build-test-images]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-webserver-${{ hashFiles('services/web/server/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-webserver-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/integration-testing/webserver.bash install
      - name: test
        run: ./ci/github/integration-testing/webserver.bash test
      - name: upload failed tests logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: integration_tests_webserver_docker_logs
          path: ./services/web/server/test_failures
      - name: cleanup
        if: always()
        run: ./ci/github/integration-testing/webserver.bash clean_up
      - uses: codecov/codecov-action@v1
        with:
          flags: integrationtests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.integration_webserver_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: integration_webserver_coverage
          path: codeclimate.integration_webserver_coverage.json

  integration-test-sidecar:
    name: "[int] sidecar"
    needs: [build-test-images]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-sidecar-${{ hashFiles('services/sidecar/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-sidecar-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/integration-testing/sidecar.bash install
      - name: test
        run: ./ci/github/integration-testing/sidecar.bash test
      - name: upload failed tests logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: integration_tests_sidecar_docker_logs
          path: ./services/sidecar/test_failures
      - name: cleanup
        if: always()
        run: ./ci/github/integration-testing/sidecar.bash clean_up
      - uses: codecov/codecov-action@v1
        with:
          flags: integrationtests #optional
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.integration_sidecar_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: integration_sidecar_coverage
          path: codeclimate.integration_sidecar_coverage.json

  integration-test-simcore-sdk:
    name: "[int] simcore-sdk"
    needs: [build-test-images]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-simcore-sdk-${{ hashFiles('packages/simcore-sdk/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-simcore-sdk-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/integration-testing/simcore-sdk.bash install
      - name: test
        run: ./ci/github/integration-testing/simcore-sdk.bash test
      - name: upload failed tests logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: integration_tests_simcore_sdk_docker_logs
          path: ./packages/simcore-sdk/test_failures
      - name: cleanup
        if: always()
        run: ./ci/github/integration-testing/simcore-sdk.bash clean_up
      - uses: codecov/codecov-action@v1
        with:
          flags: integrationtests
      - name: prepare codeclimate coverage file
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter format-coverage -t coverage.py -o codeclimate.integration_simcoresdk_coverage.json coverage.xml
      - name: upload codeclimate coverage
        uses: actions/upload-artifact@v2
        with:
          name: integration_simcoresdk_coverage
          path: codeclimate.integration_simcoresdk_coverage.json

  system-test-swarm-deploy:
    name: "[sys] deploy simcore"
    needs: [build-test-images]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-swarm-deploy-${{ hashFiles('tests/swarm-deploy/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-swarm-deploy-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/system-testing/swarm-deploy.bash install
      - name: test
        run: ./ci/github/system-testing/swarm-deploy.bash test
      - name: cleanup
        if: always()
        run: ./ci/github/system-testing/swarm-deploy.bash clean_up

  system-test-e2e:
    # FIXME: skip the job until make it faster and more reliable
    # https://github.com/ITISFoundation/osparc-simcore/issues/1594
    name: "[sys] e2e"
    needs: [build-test-images]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        node: [14]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data python
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-swarm-e2e-${{ hashFiles('tests/e2e/requirements/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-swarm-e2e-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - uses: actions/cache@v2
        name: getting cached data node
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: setup images
        run: ./ci/github/system-testing/e2e.bash setup_images
      - name: setup and start swarm
        run: ./ci/github/system-testing/e2e.bash setup_and_run_stack
      - name: setup environment
        run: ./ci/github/system-testing/e2e.bash setup_environment
      - name: setup registry
        run: ./ci/github/system-testing/e2e.bash setup_registry
      - name: setup database
        timeout-minutes: 2
        run: ./ci/github/system-testing/e2e.bash setup_database
      - name: test
        run: ./ci/github/system-testing/e2e.bash test
      - name: recover docker logs
        id: logs_recovery
        if: always()
        run: ./ci/github/system-testing/e2e.bash dump_docker_logs
      - name: upload docker logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: e2e_docker_container_logs
          path: simcore_logs
      - name: upload screenshots
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: e2e_screenshots
          path: tests/e2e/screenshots
      - name: cleanup
        if: always()
        run: ./ci/github/system-testing/e2e.bash clean_up

  system-test-environment-setup:
    name: "[sys] environment setup"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: [3.6]
        os: [ubuntu-20.04]
      fail-fast: false
    steps:
      - name: set PR default variables
        # only pushes have access to the docker credentials, use a default
        if: github.event_name == 'pull_request'
        run: |
          export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
          echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - uses: actions/cache@v2
        name: getting cached data
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-environment-setup-${{ hashFiles('tests/environment-setup/requirements/ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-environment-setup-
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: install
        run: ./ci/github/system-testing/environment-setup.bash install
      - name: test
        run: ./ci/github/system-testing/environment-setup.bash test
      - name: cleanup
        if: always()
        run: ./ci/github/system-testing/environment-setup.bash clean_up

  coverage:
    needs:
      [
        unit-test-catalog,
        unit-test-director,
        unit-test-director-v2,
        unit-test-sidecar,
        unit-test-service-library,
        unit-test-models-library,
        unit-test-simcore-sdk,
        unit-test-storage,
        unit-test-webserver-isolated,
        unit-test-webserver-slow,
        unit-test-webserver-medium,
        unit-test-webserver-fast,
        integration-test-webserver,
        integration-test-sidecar,
        integration-test-simcore-sdk,
      ]
    name: coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: unit_api_server_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_catalog_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_director_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_director_v2_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_sidecar_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_servicelib_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_modelslib_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_simcoresdk_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_storage_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_webserver_isolated_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_webserver_slow_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_webserver_medium_coverage
      - uses: actions/download-artifact@v1
        with:
          name: unit_webserver_fast_coverage
      - uses: actions/download-artifact@v1
        with:
          name: integration_webserver_coverage
      - uses: actions/download-artifact@v1
        with:
          name: integration_sidecar_coverage
      - uses: actions/download-artifact@v1
        with:
          name: integration_simcoresdk_coverage
      - name: put all artefacts together
        run: |
          mkdir all_coverages
          cp \
            unit_api_server_coverage/*.json \
            unit_catalog_coverage/*.json \
            unit_director_coverage/*.json \
            unit_director_v2_coverage/*.json \
            unit_sidecar_coverage/*.json \
            unit_servicelib_coverage/*.json \
            unit_modelslib_coverage/*.json \
            unit_simcoresdk_coverage/*.json \
            unit_storage_coverage/*.json \
            unit_webserver_isolated_coverage/*.json \
            unit_webserver_slow_coverage/*.json \
            unit_webserver_medium_coverage/*.json \
            unit_webserver_fast_coverage/*.json \
            integration_webserver_coverage/*.json \
            integration_sidecar_coverage/*.json \
            integration_simcoresdk_coverage/*.json \
            all_coverages/
          ls -al all_coverages
      - name: install codeclimate test reporter
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter sum-coverage all_coverages/codeclimate.*.json --parts 16
      - name: upload coverages
        run: |
          ./cc-test-reporter upload-coverage

  deploy:
    name: deploy to dockerhub
    if: github.event_name == 'push'
    needs:
      [
        unit-test-api,
        unit-test-catalog,
        unit-test-director,
        unit-test-director-v2,
        unit-test-sidecar,
        unit-test-frontend,
        unit-test-python-linting,
        unit-test-service-library,
        unit-test-models-library,
        unit-test-simcore-sdk,
        unit-test-storage,
        unit-test-webserver-isolated,
        unit-test-webserver-slow,
        unit-test-webserver-medium,
        unit-test-webserver-fast,
        integration-test-webserver,
        integration-test-sidecar,
        integration-test-simcore-sdk,
        system-test-swarm-deploy,
        system-test-e2e,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup docker
        run: |
          sudo ./ci/github/helpers/setup_docker_compose.bash
          ./ci/github/helpers/setup_docker_experimental.bash
          ./ci/github/helpers/setup_docker_buildx.bash
          echo "DOCKER_BUILDX=1" >> $GITHUB_ENV
      - name: set owner variable
        run: echo "OWNER=${GITHUB_REPOSITORY%/*}" >> $GITHUB_ENV
      - name: deploy master
        if: github.ref == 'refs/heads/master'
        env:
          TAG_PREFIX: master-github
        run: ./ci/deploy/dockerhub-deploy.bash
      - name: deploy hotfix
        if: contains(github.ref, 'refs/heads/hotfix_v')
        env:
          TAG_PREFIX: hotfix-github
        run: ./ci/deploy/dockerhub-deploy.bash
