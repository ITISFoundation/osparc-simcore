name: CI
# NOTE: this CI workflow is running a number of unit/integration/system tests jobs
# and also builds a set of "test" docker images (required for integration/system tests)
# if all tests are passing, and the CI runs on the master branch, then it will also deploy
# the "test" docker images to dockerhub registry
#
# in PRs: only the jobs that needs to run will be run by detecting file changes
#
# NOTE2: to keep the github branch protection simpler, the required jobs are the ones named:
# unit-tests, integration-tests, and system-tests

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"
  pull_request:
    branches:
      - "*"

  workflow_dispatch:
    inputs:
      tests:
        description: tests to run
        required: true
        default: 'all'
        type: choice
        options:
          - unit-tests
          - integration-tests
          - system-tests
          - all

env:
  DEFAULT_MAX_NANO_CPUS: 10000000
  DEFAULT_MAX_MEMORY: 268435456

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: detect file changes since last push
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      dask-task-models-library: ${{ steps.filter.outputs.dask-task-models-library }}
      models-library: ${{ steps.filter.outputs.models-library }}
      postgres-database: ${{ steps.filter.outputs.postgres-database }}
      service-integration: ${{ steps.filter.outputs.service-integration }}
      service-library: ${{ steps.filter.outputs.service-library }}
      settings-library: ${{ steps.filter.outputs.settings-library }}
      simcore-sdk: ${{ steps.filter.outputs.simcore-sdk }}
      agent: ${{ steps.filter.outputs.agent }}
      api: ${{ steps.filter.outputs.api }}
      api-server: ${{ steps.filter.outputs.api-server }}
      autoscaling: ${{ steps.filter.outputs.autoscaling }}
      catalog: ${{ steps.filter.outputs.catalog }}
      dask-sidecar: ${{ steps.filter.outputs.dask-sidecar }}
      datcore-adapter: ${{ steps.filter.outputs.datcore-adapter }}
      director: ${{ steps.filter.outputs.director }}
      director-v2: ${{ steps.filter.outputs.director-v2 }}
      dynamic-sidecar: ${{ steps.filter.outputs.dynamic-sidecar }}
      migration: ${{ steps.filter.outputs.migration }}
      static-webserver: ${{ steps.filter.outputs.static-webserver }}
      storage: ${{ steps.filter.outputs.storage }}
      webserver: ${{ steps.filter.outputs.webserver }}
      anything: ${{ steps.filter.outputs.anything }}
      anything-py: ${{ steps.filter.outputs.anything-py }}
      anything-js: ${{ steps.filter.outputs.anything-js }}
    steps:
      - uses: actions/checkout@v3
        if: ${{ github.event_name == 'push' }}
      # For pull requests it's not necessary to checkout the code
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dask-task-models-library:
              - 'packages/dask-task-models-library/**'
              - 'packages/pytest-simcore/**'
            models-library:
              - 'packages/models-library/**'
              - 'packages/postgres-database/**'
              - 'packages/pytest-simcore/**'
            postgres-database:
              - 'packages/postgres-database/**'
              - 'packages/pytest-simcore/**'
            service-integration:
              - 'packages/models-library/**'
              - 'packages/pytest-simcore/**'
              - 'packages/service-integration/**'
            service-library:
              - 'packages/pytest-simcore/**'
              - 'packages/service-library/**'
            settings-library:
              - 'packages/pytest-simcore/**'
              - 'packages/settings-library/**'
            simcore-sdk:
              - 'packages/**'
            agent:
              - 'packages/**'
              - 'services/agent/**'
            api:
              - 'api/**'
            api-server:
              - 'packages/**'
              - 'services/api-server/**'
            autoscaling:
              - 'packages/**'
              - 'services/autoscaling/**'
            catalog:
              - 'packages/**'
              - 'services/catalog/**'
            dask-sidecar:
              - 'packages/**'
              - 'services/dask-sidecar/**'
            datcore-adapter:
              - 'packages/**'
              - 'services/datcore-adapter/**'
            director:
              - 'packages/**'
              - 'services/director/**'
            director-v2:
              - 'packages/**'
              - 'services/director-v2/**'
            dynamic-sidecar:
              - 'packages/**'
              - 'services/dynamic-sidecar/**'
            migration:
              - 'packages/**'
              - 'services/migration/**'
            static-webserver:
              - 'services/static-webserver/**'
            storage:
              - 'packages/**'
              - 'services/storage/**'
            webserver:
              - 'packages/**'
              - 'services/web/**'
            anything:
              - 'packages/**'
              - 'services/**'
            anything-py:
              - '**/*.py'
            anything-js:
              - '**/*.js'
  build-test-images:
    # this step comes first, so that it is executed as first job in push calls
    # in PR calls this step is anyway skipped
    needs: changes
    if: ${{ needs.changes.outputs.anything == 'true' || github.event_name == 'push' }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python: ["3.9"]
        os: [ubuntu-20.04]
        docker_buildx: [v0.8.2]
        docker_compose: [1.29.1]
        include:
          - docker_compose: 1.29.1
            docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
      fail-fast: false
    name: "[build] docker images"
    steps:
      - uses: actions/checkout@v3
      - name: setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ matrix.docker_buildx }}
          driver: docker-container
      - name: setup docker-compose
        run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
      - name: expose github runtime for buildx
        uses: crazy-max/ghaction-github-runtime@v2
      - name: show system environs
        run: ./ci/helpers/show_system_versions.bash
      - name: build images
        run: |
          export DOCKER_IMAGE_TAG=$(exec ci/helpers/build_docker_image_tag.bash)
          mkdir --parents /${{ runner.temp }}/build
          make build local-dest=/${{ runner.temp }}/build
      - name: upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
          path: /${{ runner.temp }}/build

  unit-tests:
    name: "[unit]"
    needs: changes
    strategy:
      fail-fast: false
      matrix:
        name:
          - agent
          - api
          - api-server
          - autoscaling
          - catalog
          - dask-sidecar
          - dask-task-models-library
          - datcore-adapter
          - director
          - director-v2
          - dynamic-sidecar
          - models-library
          - postgres-database
          - pylint-3-9
          - pylint-3-10
          - pylint-3-11
          - service-integration
          - service-library
          - settings-library
          - simcore-sdk
          - storage
          - webserver-isolated
          - webserver-01
          - webserver-02
          - webserver-03

        include:
          # defaults (will be added to each job if not defined explicitely)
          - python: "3.9"
            os: ubuntu-20.04
            docker_buildx: v0.8.2
            docker_compose: 1.29.1
            docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
            test-cmd: test
            run-typecheck: false
            install-rclone: false
            install-rclone-volume-plugin: false
          # unit-tests definitions
          - name: agent
            install-rclone: true
            package-path: services/agent
            typecheck: true
          - name: api
            package-path: api/tests
          - name: api-server
            package-path: services/api-server
          - name: autoscaling
            package-path: services/autoscaling
          - name: catalog
            package-path: services/catalog
          - name: dask-sidecar
            package-path: services/dask-sidecar
          - name: dask-task-models-library
            package-path: packages/dask-task-models-library
            run-typecheck: true
          - name: datcore-adapter
            package-path: services/datcore-adapter
            run-typecheck: true
          - name: director
            package-path: services/director
            python: "3.6"
          - name: director-v2
            package-path: services/director-v2
            install-rclone-volume-plugin: true
          - name: dynamic-sidecar
            package-path: services/dynamic-sidecar
            run-typecheck: true
          - name: models-library
            package-path: packages/models-library
          - name: postgres-database
            package-path: packages/postgres-database
            run-typecheck: true
          - name: pylint-3-9
            package-path: packages/service-library
            python: "3.9"
            ci-bash-file: python-linting
          - name: pylint-3-10
            package-path: packages/service-library
            python: "3.10"
            ci-bash-file: python-linting
          - name: pylint-3-11
            package-path: packages/service-library
            python: "3.11"
            ci-bash-file: python-linting
          - name: service-integration
            package-path: packages/service-integration
          - name: service-library
            package-path: packages/service-library
          - name: settings-library
            package-path: packages/settings-library
          - name: simcore-sdk
            package-path: packages/simcore-sdk
            install-rclone: true
          - name: storage
            package-path: services/storage
          - name: webserver-isolated
            package-path: services/web/server
            ci-bash-file: webserver
            test-cmd: test_isolated
          - name: webserver-01
            package-path: services/web/server
            ci-bash-file: webserver
            test-cmd: test_with_db 01
          - name: webserver-02
            package-path: services/web/server
            ci-bash-file: webserver
            test-cmd: test_with_db 02
          - name: webserver-03
            package-path: services/web/server
            ci-bash-file: webserver
            test-cmd: test_with_db 03
    uses: ./.github/workflows/ci-testing-unit-test-job.yml
    with:
      name: ${{ matrix.name }}
      python: ${{ matrix.python }}
      os: ${{ matrix.os }}
      docker-buildx: ${{ matrix.docker_buildx }}
      docker-compose: ${{matrix.docker_compose }}
      docker-compose-sha: ${{ matrix.docker_compose_sha }}
      run-typecheck: ${{ matrix.run-typecheck }}
      package-path: ${{ matrix.package-path }}
      ci-bash-file: ${{ matrix.ci-bash-file }}
      test-cmd: ${{ matrix.test-cmd }}
      install-rclone: ${{ matrix.install-rclone }}
      install-rclone-volume-plugin: ${{ matrix.install-rclone-volume-plugin }}



  unit-test-frontend:
    needs: changes
    if: ${{ needs.changes.outputs.static-webserver == 'true' || github.event_name == 'push' }}
    timeout-minutes: 18 # if this timeout gets too small, then split the tests
    name: "[unit] frontend"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node: [14]
        os: [ubuntu-20.04]
        docker_buildx: [v0.8.2]
        docker_compose: [1.29.1]
        include:
          - docker_compose: 1.29.1
            docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: setup docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: ${{ matrix.docker_buildx }}
          driver: docker-container
      - name: setup docker-compose
        run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
      - uses: actions/setup-node@v3.5.1
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"
      - name: show system version
        run: ./ci/helpers/show_system_versions.bash
      - name: install
        run: ./ci/github/unit-testing/frontend.bash install
      - name: test
        run: ./ci/github/unit-testing/frontend.bash test
    # no coverage here??
    # - uses: codecov/codecov-action@v3.1.1
    #   with:
    #     flags: unittests #optional



  # integration-test-webserver-01:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything-py == 'true' || needs.changes.outputs.webserver == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[int] webserver 01"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "services/web/server/requirements/ci.txt"
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/integration-testing/webserver.bash install
  #     - name: test
  #       run: ./ci/github/integration-testing/webserver.bash test 01
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./services/web/server/test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/integration-testing/webserver.bash clean_up
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: integrationtests #optional

  # integration-test-webserver-02:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything-py == 'true' || needs.changes.outputs.webserver == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[int] webserver 02"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "services/web/server/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/integration-testing/webserver.bash install
  #     - name: test
  #       run: ./ci/github/integration-testing/webserver.bash test 02
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./services/web/server/test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/integration-testing/webserver.bash clean_up
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: integrationtests #optional

  # integration-test-director-v2-01:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything-py == 'true' || needs.changes.outputs.director-v2 == 'true' || github.event_name == 'push'}}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[int] director-v2 01"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "services/director-v2/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/integration-testing/director-v2.bash install
  #     - name: test
  #       run: ./ci/github/integration-testing/director-v2.bash test 01
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./services/director-v2/test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/integration-testing/director-v2.bash clean_up
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: integrationtests #optional

  # integration-test-director-v2-02:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything-py == 'true' || needs.changes.outputs.director-v2 == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[int] director-v2 02"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container

  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup rclone docker volume plugin
  #       run: sudo ./ci/github/helpers/install_rclone_docker_volume_plugin.bash
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "services/director-v2/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/integration-testing/director-v2.bash install
  #     - name: test
  #       run: ./ci/github/integration-testing/director-v2.bash test 02
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./services/director-v2/test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/integration-testing/director-v2.bash clean_up
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: integrationtests #optional

  # integration-test-simcore-sdk:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything-py == 'true' || needs.changes.outputs.simcore-sdk == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[int] simcore-sdk"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: install rclone
  #       run: sudo ./ci/github/helpers/install_rclone.bash
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "packages/simcore-sdk/requirements/ci.txt"
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/integration-testing/simcore-sdk.bash install
  #     - name: test
  #       run: ./ci/github/integration-testing/simcore-sdk.bash test
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./packages/simcore-sdk/test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/integration-testing/simcore-sdk.bash clean_up
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: integrationtests

  # integration-tests:
  #   # NOTE: this is a github required status check!
  #   if: always()
  #   needs:
  #     [
  #       integration-test-director-v2-01,
  #       integration-test-director-v2-02,
  #       integration-test-simcore-sdk,
  #       integration-test-webserver-01,
  #       integration-test-webserver-02,
  #     ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: a previous integration-test job failed
  #       if: ${{ contains(join(needs.*.result, ','), 'failure') }}
  #       run: |
  #         echo "::error title=ERROR::one of the unit-tests failed!"
  #         exit 1
  #     - name: all the previous integration-tests were run successfully or skipped
  #       if: ${{ !contains(join(needs.*.result, ','), 'failure') }}
  #       run: echo "::notice All good!"


  # system-test-public-api:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 25 # if this timeout gets too small, then split the tests
  #   name: "[sys] public api"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/public-api/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/public-api.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/public-api.bash test
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/public-api.bash clean_up

  # system-test-swarm-deploy:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] deploy simcore"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/swarm-deploy/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/swarm-deploy.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/swarm-deploy.bash test
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/swarm-deploy.bash clean_up

  # system-test-e2e:
  #   needs: [changes, build-test-images]
  #   if: ${{ needs.changes.outputs.anything == 'true' || github.event_name == 'push' }}
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] e2e"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       node: [14]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/e2e/requirements/requirements.txt"
  #     - uses: actions/setup-node@v3.5.1
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: "npm"
  #         cache-dependency-path: "tests/e2e/package-lock.json"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: setup
  #       run: ./ci/github/system-testing/e2e.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/e2e.bash test
  #     - name: dump docker logs
  #       id: docker_logs_dump
  #       if: failure()
  #       run: ./ci/github/system-testing/e2e.bash dump_docker_logs
  #     - name: upload docker logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./tests/e2e/test_failures
  #     - name: upload screenshots
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_screenshots
  #         path: tests/e2e/screenshots
  #     - name: upload e2e logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_logs
  #         path: tests/e2e/logs
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/e2e.bash clean_up

  # system-test-environment-setup:
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] environment setup"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/environment-setup/requirements/ci.txt"
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/environment-setup.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/environment-setup.bash test
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/environment-setup.bash clean_up

  # system-tests:
  #   # NOTE: this is a github required status check!
  #   if: always()
  #   needs:
  #     [
  #       system-test-e2e,
  #       system-test-environment-setup,
  #       system-test-public-api,
  #       system-test-swarm-deploy,
  #     ]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: a previous system-test job failed
  #       if: ${{ contains(join(needs.*.result, ','), 'failure') }}
  #       run: |
  #         echo "::error title=ERROR::one of the unit-tests failed!"
  #         exit 1
  #     - name: all the previous system-tests were run successfully or skipped
  #       if: ${{ !contains(join(needs.*.result, ','), 'failure') }}
  #       run: echo "::notice All good!"

  # deploy:
  #   name: deploy to dockerhub
  #   if: github.event_name == 'push'
  #   needs: [unit-tests, integration-tests, system-tests]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   env:
  #     # secrets can be set in settings/secrets on github
  #     DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: |
  #         make load-images local-src=/${{ runner.temp }}/build
  #     - name: set owner variable
  #       run: echo "OWNER=${GITHUB_REPOSITORY%/*}" >> $GITHUB_ENV
  #     - if: github.ref == 'refs/heads/master'
  #       name: deploy master image
  #       env:
  #         TAG_PREFIX: master-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
  #     - if: contains(github.ref, 'refs/heads/hotfix_v')
  #       name: deploy release hotfix image
  #       env:
  #         TAG_PREFIX: hotfix-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
  #     - if: contains(github.ref, 'refs/heads/hotfix_staging_')
  #       name: deploy staging hotfix image
  #       env:
  #         TAG_PREFIX: hotfix-staging-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
