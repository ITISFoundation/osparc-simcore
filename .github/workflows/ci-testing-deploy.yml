name: CI

on:
  push:
    branches:
      - "*"
    tags-ignore:
      - "*"
    paths:
      - "!*.md"
      - "!*.png"
      - "!*.svg"
      - "!docs/**"
      - "!.vscode/**"
      - "**.py"
      - "**.js"
      - "**/requirements/*.txt"
      - "**.json"
      - "**.Makefile"
      - ".github/workflows/ci-testing-deploy.yml"
      - "ci/**"
  pull_request:
    branches:
      - "*"
    paths:
      - "!*.md"
      - "!*.png"
      - "!*.svg"
      - "!docs/**"
      - "!.vscode/**"
      - "!.vscode-template/**"
      - "**.py"
      - "**.js"
      - "**/requirements/*.txt"
      - "**.json"
      - "**.Makefile"
      - ".github/workflows/ci-testing-deploy.yml"
      - "ci/**"
env:
  # secrets can be set in settings/secrets on github
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CC_TEST_REPORTER_ID: 21a72eb30476c870140b1576258873a41be6692f71bd9aebe812174b7d8f4b4e
  DEFAULT_MAX_NANO_CPUS: 10000000
  DEFAULT_MAX_MEMORY: 268435456

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    # this step comes first, so that it is executed as first job in push calls
    # in PR calls this step is anyway skipped
    uses: ./.github/workflows/reusable-build.yml

  unit-test:
    name: "[unit]"
    strategy:
      fail-fast: false
      matrix:
        python: ["3.9"]
        package-path: [api/tests, packages/dask-task-models-library, packages/models-library]
        package-install-cmd: [install-ci]
        package-install-cache-path: ["**/requirements/ci.txt"]
        test-cmd: [test-ci-unit]
        test-parameters: [""]
        run-codestyle: [false]
        include:
          - package-path: api/tests
            package-install-cmd: install
            package-install-cache-path: api/tests/requirements.txt
            test-cmd: test-ci

        # include:
        #   - package-path:
        #     package-install-cmd: install
        #     package-install-cache-path: api/tests/requirements.txt
        #     test-cmd: test-ci
        #   - package-path: packages/dask-task-models-library
        #     run-codestyle: true
        #   - package-path: packages/models-library
        #   - package-path: packages/postgres-database
        #   - package-path: packages/simcore-sdk
        #   - package-path: packages/service-integration
        #   - package-path: packages/service-library
        #     package-install-cmd: install-ci[all]
        #     test-cmd: test-ci[all]
        #   - package-path: packages/settings-library
        #   - package-path: services/api-server
        #   - package-path: services/autoscaling
        #   - package-path: services/catalog
        #   - package-path: services/dask-sidecar
        #   - package-path: services/datcore-adapter
        #     test-parameters: pytest-parameters="--numprocesses=auto"
        #   - package-path: services/director
        #     test-cmd: test-ci
        #     python: "3.6"
        #   - package-path: services/director-v2
        #     test-parameters: pytest-parameters="--numprocesses=auto --ignore-glob=**/with_dbs/**"
        #   - package-path: services/director-v2
        #     test-parameters: test-subfolder=with_dbs
        #   - package-path: services/dynamic-sidecar
        #     run-codestyle: true
        #   - package-path: services/storage
        #   - package-path: services/web/server
        #     test-parameters: test-subfolder=isolated pytest-parameters="--numprocesses=auto"
        #   - package-path: services/web/server
        #     test-parameters: test-subfolder=with_dbs/01
        #   - package-path: services/web/server
        #     test-parameters: test-subfolder=with_dbs/02
        #   - package-path: services/web/server
        #     test-parameters: test-subfolder=with_dbs/03
    uses: ./.github/workflows/reusable-unit-test.yml
    with:
      python: ${{ matrix.python }}
      package-path: ${{ matrix.package-path }}
      package-install-cmd: ${{ matrix.package-install-cmd }}
      package-install-cache-path: ${{ matrix.package-install-cache-path }}
      test-cmd: ${{ matrix.test-cmd }}
      test-parameters: ${{ matrix.test-parameters }}
      run-codestyle: ${{ matrix.run-codestyle }}

  # integration-test:
  #   name: "[int]"
  #   needs: build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - package-path: services/web/server
  #           test-parameters: test-subfolder=01
  #         - package-path: services/web/server
  #           test-parameters: test-subfolder=02
  #         - package-path: services/director-v2
  #           test-parameters: test-subfolder=01
  #         - package-path: services/director-v2
  #           test-parameters: test-subfolder=02
  #         - package-path: packages/simcore-sdk
  #           test-parameters: ""

  #   uses: ./.github/workflows/reusable-integration-test.yml
  #   with:
  #     package-path: ${{ matrix.package-path }}
  #     test-parameters: ${{ matrix.test-parameters }}

  # system-test:
  #   name: "[sys]"
  #   needs: build
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - test-name: public-api
  #         - test-name: swarm-deploy
  #         - test-name: e2e
  #   uses: ./.github/workflows/reusable-system-test.yml
  #   with:
  #     test-name: ${{ matrix.test-name }}

  # unit-test-director:
  #   timeout-minutes: 18 # if this timeout gets too small, then split the tests
  #   name: "[unit] director"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       # KEEP 3.6 Development of this service is frozen
  #       python: [3.6]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "services/director/requirements/ci.txt"
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/unit-testing/director.bash install
  #     - name: test
  #       run: ./ci/github/unit-testing/director.bash test
  #     - uses: codecov/codecov-action@v3.1.1
  #       with:
  #         flags: unittests #optional
  #     - name: prepare codeclimate coverage file
  #       run: |
  #         curl --location https://codeclimate.com/downloads/test-reporter/test-reporter-0.10.3-linux-amd64 > ./cc-test-reporter
  #         chmod +x ./cc-test-reporter && ./cc-test-reporter --version
  #         ./cc-test-reporter format-coverage --input-type coverage.py --output codeclimate.${{ github.job }}_coverage.json services/director/coverage.xml
  #     - name: store codeclimate coverage
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: codeclimate-${{ github.job }}-coverage
  #         path: codeclimate.${{ github.job }}_coverage.json

  # unit-test-frontend:
  #   timeout-minutes: 18 # if this timeout gets too small, then split the tests
  #   name: "[unit] frontend"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       node: [14]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - uses: actions/setup-node@v3.5.0
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: "npm"
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/unit-testing/frontend.bash install
  #     - name: test
  #       run: ./ci/github/unit-testing/frontend.bash test
  #   # no coverage here??
  #   # - uses: codecov/codecov-action@v3.1.1
  #   #   with:
  #   #     flags: unittests #optional

  # unit-test-python-linting:
  #   timeout-minutes: 18 # if this timeout gets too small, then split the tests
  #   name: "[unit] python-linting"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9", "3.10"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "packages/service-library/requirements/_test.txt"
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/unit-testing/python-linting.bash install
  #     - name: test
  #       run: ./ci/github/unit-testing/python-linting.bash test

  # system-test-public-api:
  #   timeout-minutes: 25 # if this timeout gets too small, then split the tests
  #   name: "[sys] public api"
  #   needs: [build-test-images]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - name: set PR default variables
  #       # only pushes have access to the docker credentials, use a default
  #       if: github.event_name == 'pull_request'
  #       run: |
  #         export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
  #         echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/public-api/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/public-api.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/public-api.bash test
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/public-api.bash clean_up

  # system-test-swarm-deploy:
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] deploy simcore"
  #   needs: [build-test-images]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - name: set PR default variables
  #       # only pushes have access to the docker credentials, use a default
  #       if: github.event_name == 'pull_request'
  #       run: |
  #         export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
  #         echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/swarm-deploy/requirements/ci.txt"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/swarm-deploy.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/swarm-deploy.bash test
  #     - name: upload failed tests logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./test_failures
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/swarm-deploy.bash clean_up

  # system-test-e2e:
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] e2e"
  #   needs: [build-test-images]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       node: [14]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - name: set PR default variables
  #       # only pushes have access to the docker credentials, use a default
  #       if: github.event_name == 'pull_request'
  #       run: |
  #         export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
  #         echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/e2e/requirements/requirements.txt"
  #     - uses: actions/setup-node@v3.5.0
  #       with:
  #         node-version: ${{ matrix.node }}
  #         cache: "npm"
  #         cache-dependency-path: "tests/e2e/package-lock.json"
  #     - name: expose github runtime for buildx
  #       uses: crazy-max/ghaction-github-runtime@v2
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: setup
  #       run: ./ci/github/system-testing/e2e.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/e2e.bash test
  #     - name: dump docker logs
  #       id: docker_logs_dump
  #       if: failure()
  #       run: ./ci/github/system-testing/e2e.bash dump_docker_logs
  #     - name: upload docker logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_docker_logs
  #         path: ./tests/e2e/test_failures
  #     - name: upload screenshots
  #       if: always()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_screenshots
  #         path: tests/e2e/screenshots
  #     - name: upload e2e logs
  #       if: failure()
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ${{ github.job }}_logs
  #         path: tests/e2e/logs
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/e2e.bash clean_up

  # system-test-environment-setup:
  #   timeout-minutes: 30 # if this timeout gets too small, then split the tests
  #   name: "[sys] environment setup"
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - name: set PR default variables
  #       # only pushes have access to the docker credentials, use a default
  #       if: github.event_name == 'pull_request'
  #       run: |
  #         export TMP_DOCKER_REGISTRY=${GITHUB_REPOSITORY%/*}
  #         echo "DOCKER_REGISTRY=${TMP_DOCKER_REGISTRY,,}" >> $GITHUB_ENV
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: setup python environment
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python }}
  #         cache: "pip"
  #         cache-dependency-path: "tests/environment-setup/requirements/ci.txt"
  #     - name: show system version
  #       run: ./ci/helpers/show_system_versions.bash
  #     - name: install
  #       run: ./ci/github/system-testing/environment-setup.bash install
  #     - name: test
  #       run: ./ci/github/system-testing/environment-setup.bash test
  #     - name: cleanup
  #       if: always()
  #       run: ./ci/github/system-testing/environment-setup.bash clean_up

  # deploy:
  #   name: deploy to dockerhub
  #   if: github.event_name == 'push'
  #   needs:
  #     [
  #       unit-test-api-server,
  #       unit-test-autoscaling,
  #       unit-test-api,
  #       unit-test-catalog,
  #       unit-test-dask-sidecar,
  #       unit-test-dask-task-models-library,
  #       unit-test-datcore-adapter,
  #       unit-test-director-v2,
  #       unit-test-director,
  #       unit-test-dynamic-sidecar,
  #       unit-test-frontend,
  #       unit-test-models-library,
  #       unit-test-postgres-database,
  #       unit-test-python-linting,
  #       unit-test-service-integration,
  #       unit-test-service-library,
  #       unit-test-settings-library,
  #       unit-test-simcore-sdk,
  #       unit-test-storage,
  #       unit-test-webserver-01,
  #       unit-test-webserver-02,
  #       unit-test-webserver-03,
  #       integration-test-director-v2-01,
  #       integration-test-director-v2-02,
  #       integration-test-simcore-sdk,
  #       integration-test-webserver-01,
  #       integration-test-webserver-02,
  #       system-test-public-api,
  #       system-test-swarm-deploy,
  #     ]
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       python: ["3.9"]
  #       os: [ubuntu-20.04]
  #       docker_buildx: [v0.8.2]
  #       docker_compose: [1.29.1]
  #       include:
  #         - docker_compose: 1.29.1
  #           docker_compose_sha: 8097769d32e34314125847333593c8edb0dfc4a5b350e4839bef8c2fe8d09de7
  #     fail-fast: false
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: setup docker buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v2
  #       with:
  #         version: ${{ matrix.docker_buildx }}
  #         driver: docker-container
  #     - name: setup docker-compose
  #       run: sudo ./ci/github/helpers/setup_docker_compose.bash ${{ matrix.docker_compose }} ${{ matrix.docker_compose_sha }}
  #     - name: download docker images
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: docker-buildx-images-${{ runner.os }}-${{ github.sha }}
  #         path: /${{ runner.temp }}/build
  #     - name: load docker images
  #       run: make load-images local-src=/${{ runner.temp }}/build
  #     - name: set owner variable
  #       run: echo "OWNER=${GITHUB_REPOSITORY%/*}" >> $GITHUB_ENV
  #     - if: github.ref == 'refs/heads/master'
  #       name: deploy master image
  #       env:
  #         TAG_PREFIX: master-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
  #     - if: contains(github.ref, 'refs/heads/hotfix_v')
  #       name: deploy release hotfix image
  #       env:
  #         TAG_PREFIX: hotfix-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
  #     - if: contains(github.ref, 'refs/heads/hotfix_staging_')
  #       name: deploy staging hotfix image
  #       env:
  #         TAG_PREFIX: hotfix-staging-github
  #       run: ./ci/deploy/dockerhub-deploy.bash -n
