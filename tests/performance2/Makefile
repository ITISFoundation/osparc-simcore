#
# Targets for DEVELOPMENT of tests/public-api
#
include ../../scripts/common.Makefile
include ../../scripts/common-package.Makefile



.PHONY: install-dev install-prod install-ci
install-dev install-prod install-ci: _check_venv_active ## install app in development/production or CI mode
	# installing in $(subst install-,,$@) mode
	@uv pip sync requirements/$(subst install-,,$@).txt


# Define the files where user input will be saved
LOCUST_CONFIG_FILE := .locust.conf
# Authentication credentials file
AUTH_CREDS_FILE := .auth-credentials.env
# Define host IP using get_my_ip function from common.Makefile
HOST_IP := $(get_my_ip)

# Function to create Locust configuration file if it doesn't exist
define create_locust_config
	@if [ ! -f $(LOCUST_CONFIG_FILE) ]; then \
		printf "$(YELLOW)First time setup: Creating Locust configuration file$(NC)\n"; \
		read -p "Number of processes [4]: " processes; \
		processes=$${processes:-4}; \
		read -p "Host to load test [http://localhost:8080]: " host; \
		host=$${host:-http://localhost:8080}; \
		echo; \
		echo "# Locust configuration file - Autogenerated" > $(LOCUST_CONFIG_FILE); \
		echo "[locust]" >> $(LOCUST_CONFIG_FILE); \
		echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE); \
		echo "headless = true" >> $(LOCUST_CONFIG_FILE); \
		echo "host = $$host" >> $(LOCUST_CONFIG_FILE); \
		echo "users = 10" >> $(LOCUST_CONFIG_FILE); \
		echo "spawn-rate = 1" >> $(LOCUST_CONFIG_FILE); \
		echo "run-time = 10s" >> $(LOCUST_CONFIG_FILE); \
		echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE); \
		echo "" >> $(LOCUST_CONFIG_FILE); \
		echo "[logging]" >> $(LOCUST_CONFIG_FILE); \
		echo "level = INFO" >> $(LOCUST_CONFIG_FILE); \
		printf "$(GREEN)Locust configuration file created. It won't be asked again.$(NC)\n"; \
	else \
		printf "$(GREEN)Using existing Locust configuration file $(LOCUST_CONFIG_FILE)$(NC)\n"; \
	fi
endef

# Function to create Locust configuration file without Grafana integration
define create_locust_config_no_grafana
	@if [ ! -f $(LOCUST_CONFIG_FILE)_no_grafana ]; then \
		printf "$(YELLOW)First time setup: Creating Locust configuration file (no Grafana)$(NC)\n"; \
		read -p "Number of processes [4]: " processes; \
		processes=$${processes:-4}; \
		read -p "Host to load test [http://localhost:8080]: " host; \
		host=$${host:-http://localhost:8080}; \
		echo; \
		echo "# Locust configuration file - Autogenerated (no Grafana)" > $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "[locust]" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "headless = false" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "host = $$host" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "users = 10" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "spawn-rate = 1" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "run-time = 10s" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		echo "" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
		printf "$(GREEN)Locust configuration file (no Grafana) created. It won't be asked again.$(NC)\n"; \
	else \
		printf "$(GREEN)Using existing Locust configuration file $(LOCUST_CONFIG_FILE)_no_grafana$(NC)\n"; \
	fi
endef

# Function to prompt for credentials if they don't exist
define prompt_for_credentials
	@if [ ! -f $(AUTH_CREDS_FILE) ]; then \
		printf "$(YELLOW)First time setup: Please enter your credentials$(NC)\n"; \
		read -p "Username: " username; \
		read -sp "Password: " password; \
		echo; \
		echo "SC_USER_NAME=$$username" > $(AUTH_CREDS_FILE); \
		echo "SC_PASSWORD=$$password" >> $(AUTH_CREDS_FILE); \
		printf "$(GREEN)Credentials saved. They won't be asked again.$(NC)\n"; \
	else \
		printf "$(GREEN)Using cached credentials from $(AUTH_CREDS_FILE)$(NC)\n"; \
	fi
endef


test-deployment: test-deployment-with-grafana ## runs deployment test on local deploy (with Grafana by default)

test-deployment-with-grafana: _check_venv_active ## runs deployment test with Grafana integration
	@$(call prompt_for_credentials)
	@$(call create_locust_config)
	@printf "$(YELLOW)Starting Locust with Grafana integration...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE) \
		--grafana-url http://127.0.0.1:3000/ \
		--pghost 127.0.0.1 \
		--pgpassword=password \
		--pguser=postgres \
		--pgport=5432 \
		--timescale

test-deployment-no-grafana: _check_venv_active ## runs deployment test without Grafana integration
	@$(call prompt_for_credentials)
	@$(call create_locust_config_no_grafana)
	@printf "$(YELLOW)Starting Locust without Grafana integration...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE)_no_grafana

clear-credentials: ## Clear the cached authentication credentials
	@if [ -f $(AUTH_CREDS_FILE) ]; then \
		rm $(AUTH_CREDS_FILE); \
		printf "$(GREEN)Credentials cleared.$(NC)\n"; \
	else \
		printf "$(YELLOW)No credentials file found.$(NC)\n"; \
	fi

update-credentials: ## Update the cached authentication credentials
	@printf "$(YELLOW)Updating credentials:$(NC)\n"
	@read -p "Username: " username; \
	read -sp "Password: " password; \
	echo; \
	echo "SC_USER_NAME=$$username" > $(AUTH_CREDS_FILE); \
	echo "SC_PASSWORD=$$password" >> $(AUTH_CREDS_FILE); \
	printf "$(GREEN)Credentials updated successfully.$(NC)\n"

update-locust-config: ## Update the Locust configuration file
	@printf "$(YELLOW)Updating Locust configuration:$(NC)\n"
	@read -p "Number of processes [4]: " processes; \
	processes=$${processes:-4}; \
	read -p "Host to load test [http://localhost:8080]: " host; \
	host=$${host:-http://localhost:8080}; \
	echo; \
	echo "# Locust configuration file - Autogenerated" > $(LOCUST_CONFIG_FILE); \
	echo "[locust]" >> $(LOCUST_CONFIG_FILE); \
	echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE); \
	echo "headless = true" >> $(LOCUST_CONFIG_FILE); \
	echo "host = $$host" >> $(LOCUST_CONFIG_FILE); \
	echo "users = 10" >> $(LOCUST_CONFIG_FILE); \
	echo "spawn-rate = 1" >> $(LOCUST_CONFIG_FILE); \
	echo "run-time = 10s" >> $(LOCUST_CONFIG_FILE); \
	echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE); \
	echo "" >> $(LOCUST_CONFIG_FILE); \
	echo "[logging]" >> $(LOCUST_CONFIG_FILE); \
	echo "level = INFO" >> $(LOCUST_CONFIG_FILE); \
	printf "$(GREEN)Locust configuration updated successfully.$(NC)\n"

update-locust-config-no-grafana: ## Update the Locust configuration file (no Grafana)
	@printf "$(YELLOW)Updating Locust configuration (no Grafana):$(NC)\n"
	@read -p "Number of processes [4]: " processes; \
	processes=$${processes:-4}; \
	read -p "Host to load test [http://localhost:8080]: " host; \
	host=$${host:-http://localhost:8080}; \
	echo; \
	echo "# Locust configuration file - Autogenerated (no Grafana)" > $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "[locust]" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "headless = true" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "host = $$host" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "users = 10" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "spawn-rate = 1" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "run-time = 10s" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "[logging]" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	echo "level = INFO" >> $(LOCUST_CONFIG_FILE)_no_grafana; \
	printf "$(GREEN)Locust configuration (no Grafana) updated successfully.$(NC)\n"

clear-locust-config: ## Clear the Locust configuration file
	@if [ -f $(LOCUST_CONFIG_FILE) ]; then \
		rm $(LOCUST_CONFIG_FILE); \
		printf "$(GREEN)Locust configuration file cleared.$(NC)\n"; \
	else \
		printf "$(YELLOW)No Locust configuration file found.$(NC)\n"; \
	fi

clear-locust-config-no-grafana: ## Clear the Locust configuration file (no Grafana)
	@if [ -f $(LOCUST_CONFIG_FILE)_no_grafana ]; then \
		rm $(LOCUST_CONFIG_FILE)_no_grafana; \
		printf "$(GREEN)Locust configuration file (no Grafana) cleared.$(NC)\n"; \
	else \
		printf "$(YELLOW)No Locust configuration file (no Grafana) found.$(NC)\n"; \
	fi

		printf "$(GREEN)Grafana and PostgreSQL settings cleared.$(NC)\n"; \
	else \
		printf "$(YELLOW)No Grafana and PostgreSQL settings file found.$(NC)\n"; \
	fi

up:
	@locust-compose up -d
down:
	@locust-compose down
