#
# Targets for DEVELOPMENT of tests/public-api
#
include ../../scripts/common.Makefile
include ../../scripts/common-package.Makefile



.PHONY: install-dev install-prod install-ci
install-dev install-prod install-ci: _check_venv_active ## install app in development/production or CI mode
	# installing in $(subst install-,,$@) mode
	@uv pip sync requirements/$(subst install-,,$@).txt


# Configuration files and default values
LOCUST_CONFIG_FILE := .locust.conf
AUTH_CREDS_FILE := .auth-credentials.env
HOST_IP := $(get_my_ip)

# Default Database settings
PG_HOST := 127.0.0.1
PG_PORT := 5432
PG_USER := postgres
PG_PASSWORD := password

# Default Grafana settings
GRAFANA_URL := http://127.0.0.1:3000/

# Default Locust test settings
DEFAULT_PROCESSES := 4
DEFAULT_USERS := 10
DEFAULT_SPAWN_RATE := 1
DEFAULT_RUN_TIME := 10s
DEFAULT_HOST := http://localhost:8080

# Function to generate Locust configuration file
# Usage: $(call generate_locust_config,filename_suffix,processes,users,spawn_rate,run_time,description)
define generate_locust_config
	@printf "$(YELLOW)Setting up $(2) configuration...$(NC)\n"
	@echo "# Locust configuration file - $(5)" > $(LOCUST_CONFIG_FILE)$(1); \
	echo "[locust]" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "headless = true" >> $(LOCUST_CONFIG_FILE)$(1); \
	if [ -f $(LOCUST_CONFIG_FILE) ]; then \
		echo "host = $$(grep "host = " $(LOCUST_CONFIG_FILE) | cut -d= -f2 | xargs)" >> $(LOCUST_CONFIG_FILE)$(1); \
	else \
		echo "host = $(DEFAULT_HOST)" >> $(LOCUST_CONFIG_FILE)$(1); \
	fi; \
	echo "users = $(3)" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "spawn-rate = $(4)" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "run-time = $(5)" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "processes = $(2)" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "[logging]" >> $(LOCUST_CONFIG_FILE)$(1); \
	echo "level = INFO" >> $(LOCUST_CONFIG_FILE)$(1);
endef

# Function to create or update Locust configuration with user input
define create_locust_config
	@if [ ! -f $(LOCUST_CONFIG_FILE) ]; then \
		printf "$(YELLOW)First time setup: Creating Locust configuration file$(NC)\n"; \
		read -p "Number of processes [$(DEFAULT_PROCESSES)]: " processes; \
		processes=$${processes:-$(DEFAULT_PROCESSES)}; \
		read -p "Number of users [$(DEFAULT_USERS)]: " users; \
		users=$${users:-$(DEFAULT_USERS)}; \
		read -p "Spawn rate [$(DEFAULT_SPAWN_RATE)]: " spawn_rate; \
		spawn_rate=$${spawn_rate:-$(DEFAULT_SPAWN_RATE)}; \
		read -p "Run time [$(DEFAULT_RUN_TIME)]: " run_time; \
		run_time=$${run_time:-$(DEFAULT_RUN_TIME)}; \
		read -p "Host to load test [$(DEFAULT_HOST)]: " host; \
		host=$${host:-$(DEFAULT_HOST)}; \
		echo; \
		echo "# Locust configuration file - Autogenerated" > $(LOCUST_CONFIG_FILE); \
		echo "[locust]" >> $(LOCUST_CONFIG_FILE); \
		echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE); \
		echo "headless = true" >> $(LOCUST_CONFIG_FILE); \
		echo "host = $$host" >> $(LOCUST_CONFIG_FILE); \
		echo "users = $$users" >> $(LOCUST_CONFIG_FILE); \
		echo "spawn-rate = $$spawn_rate" >> $(LOCUST_CONFIG_FILE); \
		echo "run-time = $$run_time" >> $(LOCUST_CONFIG_FILE); \
		echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE); \
		echo "" >> $(LOCUST_CONFIG_FILE); \
		echo "[logging]" >> $(LOCUST_CONFIG_FILE); \
		echo "level = INFO" >> $(LOCUST_CONFIG_FILE); \
		printf "$(GREEN)Locust configuration file created. It won't be asked again.$(NC)\n"; \
	else \
		printf "$(GREEN)Using existing Locust configuration file $(LOCUST_CONFIG_FILE)$(NC)\n"; \
	fi
endef

# Function to prompt for credentials if they don't exist
define prompt_for_credentials
	@if [ ! -f $(AUTH_CREDS_FILE) ]; then \
		printf "$(YELLOW)First time setup: Please enter your credentials$(NC)\n"; \
		read -p "Username: " username; \
		read -sp "Password: " password; \
		echo; \
		echo "SC_USER_NAME=$$username" > $(AUTH_CREDS_FILE); \
		echo "SC_PASSWORD=$$password" >> $(AUTH_CREDS_FILE); \
		printf "$(GREEN)Credentials saved. They won't be asked again.$(NC)\n"; \
	else \
		printf "$(GREEN)Using cached credentials from $(AUTH_CREDS_FILE)$(NC)\n"; \
	fi
endef


test-deployment: test-deployment-with-grafana ## runs deployment test on local deploy (with Grafana by default)

test-deployment-with-grafana: _check_venv_active ## runs deployment test with Grafana integration
	@$(call prompt_for_credentials)
	@$(call create_locust_config)
	@printf "$(YELLOW)Starting Locust with Grafana integration...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE) \
		--grafana-url $(GRAFANA_URL) \
		--pghost $(PG_HOST) \
		--pgport $(PG_PORT) \
		--pguser $(PG_USER) \
		--pgpassword=$(PG_PASSWORD) \
		--timescale

test-deployment-no-grafana: _check_venv_active ## runs deployment test without Grafana integration
	@$(call prompt_for_credentials)
	@$(call create_locust_config)
	@printf "$(YELLOW)Starting Locust without Grafana integration...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE) \
		--headless

test-deployment-light: _check_venv_active ## runs a light load test with 5 users, 1 spawn rate and 10s runtime (with Grafana)
	@$(call prompt_for_credentials)
	@$(call generate_locust_config,_light,2,5,1,10s,Light Test)
	@printf "$(YELLOW)Starting Locust with light load (with Grafana)...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE)_light \
		--grafana-url $(GRAFANA_URL) \
		--pghost $(PG_HOST) \
		--pgport $(PG_PORT) \
		--pguser $(PG_USER) \
		--pgpassword=$(PG_PASSWORD) \
		--timescale

test-deployment-light-no-grafana: _check_venv_active ## runs a light load test with 5 users, 1 spawn rate and 10s runtime (without Grafana)
	@$(call prompt_for_credentials)
	@$(call generate_locust_config,_light,2,5,1,10s,Light Test)
	@printf "$(YELLOW)Starting Locust with light load (without Grafana)...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE)_light \
		--headless

test-deployment-heavy: _check_venv_active ## runs a heavy load test with 50 users, 5 spawn rate and 60s runtime (with Grafana)
	@$(call prompt_for_credentials)
	@$(call generate_locust_config,_heavy,4,50,5,60s,Heavy Test)
	@printf "$(YELLOW)Starting Locust with heavy load (with Grafana)...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE)_heavy \
		--grafana-url $(GRAFANA_URL) \
		--pghost $(PG_HOST) \
		--pgport $(PG_PORT) \
		--pguser $(PG_USER) \
		--pgpassword=$(PG_PASSWORD) \
		--timescale

test-deployment-heavy-no-grafana: _check_venv_active ## runs a heavy load test with 50 users, 5 spawn rate and 60s runtime (without Grafana)
	@$(call prompt_for_credentials)
	@$(call generate_locust_config,_heavy,4,50,5,60s,Heavy Test)
	@printf "$(YELLOW)Starting Locust with heavy load (without Grafana)...$(NC)\n"
	@export $$(cat $(AUTH_CREDS_FILE) | xargs) && \
	locust --config $(LOCUST_CONFIG_FILE)_heavy \
		--headless

clear-credentials: ## Clear the cached authentication credentials
	@if [ -f $(AUTH_CREDS_FILE) ]; then \
		rm $(AUTH_CREDS_FILE); \
		printf "$(GREEN)Credentials cleared.$(NC)\n"; \
	else \
		printf "$(YELLOW)No credentials file found.$(NC)\n"; \
	fi

update-credentials: ## Update the cached authentication credentials
	@printf "$(YELLOW)Updating credentials:$(NC)\n"
	@read -p "Username: " username; \
	read -sp "Password: " password; \
	echo; \
	echo "SC_USER_NAME=$$username" > $(AUTH_CREDS_FILE); \
	echo "SC_PASSWORD=$$password" >> $(AUTH_CREDS_FILE); \
	printf "$(GREEN)Credentials updated successfully.$(NC)\n"

update-locust-config: ## Update the Locust configuration file
	@printf "$(YELLOW)Updating Locust configuration:$(NC)\n"
	@read -p "Number of processes [$(DEFAULT_PROCESSES)]: " processes; \
	processes=$${processes:-$(DEFAULT_PROCESSES)}; \
	read -p "Number of users [$(DEFAULT_USERS)]: " users; \
	users=$${users:-$(DEFAULT_USERS)}; \
	read -p "Spawn rate [$(DEFAULT_SPAWN_RATE)]: " spawn_rate; \
	spawn_rate=$${spawn_rate:-$(DEFAULT_SPAWN_RATE)}; \
	read -p "Run time [$(DEFAULT_RUN_TIME)]: " run_time; \
	run_time=$${run_time:-$(DEFAULT_RUN_TIME)}; \
	read -p "Host to load test [$(DEFAULT_HOST)]: " host; \
	host=$${host:-$(DEFAULT_HOST)}; \
	echo; \
	echo "# Locust configuration file - Autogenerated" > $(LOCUST_CONFIG_FILE); \
	echo "[locust]" >> $(LOCUST_CONFIG_FILE); \
	echo "locustfile = deployment_max_rps_test.py" >> $(LOCUST_CONFIG_FILE); \
	echo "headless = true" >> $(LOCUST_CONFIG_FILE); \
	echo "host = $$host" >> $(LOCUST_CONFIG_FILE); \
	echo "users = $$users" >> $(LOCUST_CONFIG_FILE); \
	echo "spawn-rate = $$spawn_rate" >> $(LOCUST_CONFIG_FILE); \
	echo "run-time = $$run_time" >> $(LOCUST_CONFIG_FILE); \
	echo "processes = $$processes" >> $(LOCUST_CONFIG_FILE); \
	echo "" >> $(LOCUST_CONFIG_FILE); \
	printf "$(GREEN)Locust configuration updated successfully.$(NC)\n"

clear-locust-config: ## Clear all Locust configuration files
	@for config_file in $(LOCUST_CONFIG_FILE) $(LOCUST_CONFIG_FILE)_light $(LOCUST_CONFIG_FILE)_heavy; do \
		if [ -f $$config_file ]; then \
			rm $$config_file; \
			printf "$(GREEN)$$config_file cleared.$(NC)\n"; \
		fi; \
	done
	@if [ ! -f $(LOCUST_CONFIG_FILE) ] && [ ! -f $(LOCUST_CONFIG_FILE)_light ] && [ ! -f $(LOCUST_CONFIG_FILE)_heavy ]; then \
		printf "$(YELLOW)No Locust configuration files found.$(NC)\n"; \
	fi

up:
	@locust-compose up -d
down:
	@locust-compose down
