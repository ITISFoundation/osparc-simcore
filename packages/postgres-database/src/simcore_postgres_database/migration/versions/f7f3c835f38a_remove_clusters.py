"""remove clusters

Revision ID: f7f3c835f38a
Revises: 7994074c4d98
Create Date: 2025-03-17 14:26:58.117504+00:00

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f7f3c835f38a"
down_revision = "7994074c4d98"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(
        "fk_comp_runs_cluster_id_clusters", "comp_runs", type_="foreignkey"
    )
    op.drop_column("comp_runs", "cluster_id")
    op.drop_table("clusters")
    op.execute("DROP TRIGGER IF EXISTS cluster_modification on clusters;")
    op.execute("DROP FUNCTION set_cluster_to_owner_group() CASCADE")
    op.execute("DROP TYPE IF EXISTS clustertype")
    # ### end Alembic commands ###


new_cluster_trigger = sa.DDL(
    """
DROP TRIGGER IF EXISTS cluster_modification on clusters;
CREATE TRIGGER cluster_modification
AFTER INSERT ON clusters
    FOR EACH ROW
    EXECUTE PROCEDURE set_cluster_to_owner_group();
"""
)
assign_cluster_access_rights_to_owner_group_procedure_new = sa.DDL(
    """
CREATE OR REPLACE FUNCTION set_cluster_to_owner_group() RETURNS TRIGGER AS $$
DECLARE
    group_id BIGINT;
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO "cluster_to_groups" ("gid", "cluster_id", "read", "write", "delete") VALUES (NEW.owner, NEW.id, TRUE, TRUE, TRUE);
    END IF;
    RETURN NULL;
END; $$ LANGUAGE 'plpgsql';
    """
)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.DDL("DROP TRIGGER IF EXISTS cluster_modification on clusters;"))
    op.execute("DROP TYPE IF EXISTS clustertype")
    op.create_table(
        "clusters",
        sa.Column("id", sa.BIGINT(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "type",
            postgresql.ENUM("AWS", "ON_PREMISE", name="clustertype"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("owner", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("thumbnail", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "created",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("endpoint", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "authentication",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["owner"],
            ["groups.gid"],
            name="fk_clusters_gid_groups",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name="clusters_pkey"),
    )

    op.add_column(
        "comp_runs",
        sa.Column("cluster_id", sa.BIGINT(), autoincrement=False, nullable=True),
    )
    op.create_foreign_key(
        "fk_comp_runs_cluster_id_clusters",
        "comp_runs",
        "clusters",
        ["cluster_id"],
        ["id"],
        onupdate="CASCADE",
        ondelete="SET NULL",
    )
    # ### end Alembic commands ###
    op.execute(assign_cluster_access_rights_to_owner_group_procedure_new)
    op.execute(new_cluster_trigger)
