"""add project running state

Revision ID: d67672189ce1
Revises: 350103a7efbd
Create Date: 2020-10-07 07:04:46.755187+00:00

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd67672189ce1'
down_revision = '350103a7efbd'
branch_labels = None
depends_on = None


DB_PROCEDURE_NAME: str = "notify_comp_tasks_changed"
DB_TRIGGER_NAME: str = f"{DB_PROCEDURE_NAME}_event"

def upgrade():
    project_running_state_enum = postgresql.ENUM('NOT_STARTED', 'PENDING', 'STARTED', 'RETRY', 'SUCCESS', 'FAILURE', name='project_running_state')
    project_running_state_enum.create(op.get_bind())
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('projects', sa.Column('running_state', sa.Enum('NOT_STARTED', 'PENDING', 'STARTED', 'RETRY', 'SUCCESS', 'FAILURE', name='project_running_state'), nullable=False, server_default="NOT_STARTED"))
    # ### end Alembic commands ###

    task_output_changed_trigger = sa.DDL(
        f"""
DROP TRIGGER IF EXISTS {DB_TRIGGER_NAME} on comp_tasks;
CREATE TRIGGER {DB_TRIGGER_NAME}
AFTER UPDATE OF outputs ON comp_tasks
    FOR EACH ROW
    WHEN ((OLD.outputs::jsonb IS DISTINCT FROM NEW.outputs::jsonb OR OLD.state IS DISTINCT FROM NEW.state)
        AND NEW.node_class <> 'FRONTEND')
    EXECUTE PROCEDURE {DB_PROCEDURE_NAME}();
"""
    )

    op.execute(task_output_changed_trigger)


def downgrade():
    task_output_changed_trigger = sa.DDL(
        f"""
DROP TRIGGER IF EXISTS {DB_TRIGGER_NAME} on comp_tasks;
CREATE TRIGGER {DB_TRIGGER_NAME}
AFTER UPDATE OF outputs ON comp_tasks
    FOR EACH ROW
    WHEN (OLD.outputs::jsonb IS DISTINCT FROM NEW.outputs::jsonb AND NEW.node_class <> 'FRONTEND')
    EXECUTE PROCEDURE {DB_PROCEDURE_NAME}();
"""
    )
    op.execute(task_output_changed_trigger)
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('projects', 'running_state')
    # ### end Alembic commands ###
    project_running_state_enum = postgresql.ENUM('active', 'inactive', 'archive', name='banner_status')
    project_running_state_enum.drop(op.get_bind())
