"""create project_to_groups table

Revision ID: 19f3d9085636
Revises: d1fafda96f4c
Create Date: 2024-07-12 07:23:52.049378+00:00

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "19f3d9085636"
down_revision = "d1fafda96f4c"
branch_labels = None
depends_on = None


# ------------------------ TRIGGERS
new_project_trigger = sa.DDL(
    """
DROP TRIGGER IF EXISTS project_creation on projects;
CREATE TRIGGER project_creation
AFTER INSERT ON projects
    FOR EACH ROW
    EXECUTE PROCEDURE set_project_to_owner_group();
"""
)


# --------------------------- PROCEDURES
assign_project_access_rights_to_owner_group_procedure = sa.DDL(
    """
CREATE OR REPLACE FUNCTION set_project_to_owner_group() RETURNS TRIGGER AS $$
DECLARE
    group_id BIGINT;
BEGIN
    -- Fetch the group_id based on the owner from the other table
    SELECT u.primary_gid INTO group_id
    FROM users u
    WHERE u.id = NEW.prj_owner
    LIMIT 1;

    IF group_id IS NOT NULL THEN
        IF TG_OP = 'INSERT' THEN
            INSERT INTO "project_to_groups" ("gid", "project_uuid", "read", "write", "delete") VALUES (group_id, NEW.uuid, TRUE, TRUE, TRUE);
        END IF;
    END IF;

    RETURN NULL;
END; $$ LANGUAGE 'plpgsql';
    """
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_to_groups",
        sa.Column("project_uuid", sa.String(), nullable=False),
        sa.Column("gid", sa.BigInteger(), nullable=False),
        sa.Column(
            "read", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "write", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "delete", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["gid"],
            ["groups.gid"],
            name="fk_project_to_groups_gid_groups",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["project_uuid"],
            ["projects.uuid"],
            name="fk_project_to_groups_project_uuid",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.UniqueConstraint("project_uuid", "gid"),
    )
    op.create_index(
        op.f("ix_project_to_groups_project_uuid"),
        "project_to_groups",
        ["project_uuid"],
        unique=False,
    )
    # ### end Alembic commands ###

    # Migration of access rights from projects table to new project_to_groups table
    op.execute(
        sa.DDL(
            """
    INSERT INTO project_to_groups
    select
        projects.uuid as project_uuid,
        CAST(js.key as bigint) as gid,
        CAST(js.value ->> 'read' as bool) as read,
        CAST(js.value ->> 'write' as bool) as write,
        CAST(js.value ->> 'delete' as bool) as delete,
        CURRENT_TIMESTAMP as created,
	    CURRENT_TIMESTAMP as modified
    from projects,
  	    json_each(projects.access_rights::json) AS js;
    """
        )
    )

    op.execute(assign_project_access_rights_to_owner_group_procedure)
    op.execute(new_project_trigger)


def downgrade():
    op.execute(new_project_trigger)
    op.execute(assign_project_access_rights_to_owner_group_procedure)

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_project_to_groups_project_uuid"), table_name="project_to_groups"
    )
    op.drop_table("project_to_groups")
    # ### end Alembic commands ###
