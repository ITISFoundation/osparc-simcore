"""Add task event procedures

Revision ID: 16a9454764cb
Revises: 694f201e484a
Create Date: 2020-07-28 06:36:47.491622+00:00

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "16a9454764cb"
down_revision = "694f201e484a"
branch_labels = None
depends_on = None

DB_PROCEDURE_NAME: str = "notify_comp_tasks_changed"
DB_TRIGGER_NAME: str = f"{DB_PROCEDURE_NAME}_event"
DB_CHANNEL_NAME: str = "comp_tasks_output_events"


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    task_output_changed_trigger = sa.DDL(
        f"""
DROP TRIGGER IF EXISTS {DB_TRIGGER_NAME} on comp_tasks;
CREATE TRIGGER {DB_TRIGGER_NAME}
AFTER UPDATE OF outputs ON comp_tasks
    FOR EACH ROW
    WHEN (OLD.outputs::jsonb IS DISTINCT FROM NEW.outputs::jsonb AND NEW.node_class <> 'FRONTEND')
    EXECUTE PROCEDURE {DB_PROCEDURE_NAME}();
"""
    )

    task_output_changed_procedure = sa.DDL(
        f"""
CREATE OR REPLACE FUNCTION {DB_PROCEDURE_NAME}() RETURNS TRIGGER AS $$
DECLARE
    record RECORD;
    payload JSON;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        record = OLD;
    ELSE
        record = NEW;
    END IF;

    payload = json_build_object('table', TG_TABLE_NAME,
                                'action', TG_OP,
                                'data', row_to_json(record));

    PERFORM pg_notify('{DB_CHANNEL_NAME}', payload::text);

    RETURN NULL;
END; $$ LANGUAGE plpgsql;
"""
    )

    op.execute(task_output_changed_procedure)
    op.execute(task_output_changed_trigger)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    op.execute(f"DROP TRIGGER IF EXISTS {DB_TRIGGER_NAME} on comp_tasks;")
    op.execute(f"DROP FUNCTION {DB_PROCEDURE_NAME}()")
