"""products_to_templates map table

Revision ID: f3a5484fe05d
Revises: f20f4c9fca71
Create Date: 2024-02-21 19:33:48.169810+00:00

"""
from typing import Final

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "f3a5484fe05d"
down_revision = "f20f4c9fca71"
branch_labels = None
depends_on = None


# auto-update modified
# TRIGGERS ------------------------
_TABLE_NAME: Final[str] = "products_to_templates"
_TRIGGER_NAME: Final[str] = "trigger_auto_update"  # NOTE: scoped on table
_PROCEDURE_NAME: Final[
    str
] = f"{_TABLE_NAME}_auto_update_modified()"  # NOTE: scoped on database

modified_timestamp_trigger = sa.DDL(
    f"""
DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};
CREATE TRIGGER {_TRIGGER_NAME}
BEFORE INSERT OR UPDATE ON {_TABLE_NAME}
FOR EACH ROW EXECUTE PROCEDURE {_PROCEDURE_NAME};
    """
)

# PROCEDURES ------------------------
update_modified_timestamp_procedure = sa.DDL(
    f"""
CREATE OR REPLACE FUNCTION {_PROCEDURE_NAME}
RETURNS TRIGGER AS $$
BEGIN
  NEW.modified := current_timestamp;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
    """
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "products_to_templates",
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column("template_name", sa.String(), nullable=True),
        sa.Column(
            "created", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "modified", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["product_name"],
            ["products.name"],
            name="fk_products_to_templates_product_name",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["template_name"],
            ["jinja2_templates.name"],
            name="fk_products_to_templates_template_name",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.UniqueConstraint("product_name", "template_name"),
    )
    # ### end Alembic commands ###

    # custom
    op.execute(update_modified_timestamp_procedure)
    op.execute(modified_timestamp_trigger)


def downgrade():
    # custom
    op.execute(f"DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};")
    op.execute(f"DROP FUNCTION {_PROCEDURE_NAME};")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("products_to_templates")
    # ### end Alembic commands ###
