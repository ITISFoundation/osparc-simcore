"""add groups table

Revision ID: 64614dc0fada
Revises: f3555bb4bc34
Create Date: 2020-04-22 13:42:06.572011+00:00

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "64614dc0fada"
down_revision = "f3555bb4bc34"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "groups",
        sa.Column("gid", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column(
            "created", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "modified", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("gid"),
    )
    op.create_table(
        "user_to_groups",
        sa.Column("uid", sa.BigInteger(), nullable=True),
        sa.Column("gid", sa.BigInteger(), nullable=True),
        sa.Column(
            "created", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "modified", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["gid"],
            ["groups.gid"],
            name="fk_user_to_groups_gid_groups",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["uid"],
            ["users.id"],
            name="fk_user_to_groups_id_users",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.UniqueConstraint("uid", "gid"),
    )
    op.add_column(
        "users",
        sa.Column(
            "modified", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
    )
    op.add_column("users", sa.Column("primary_gid", sa.BigInteger(), nullable=True))
    op.create_foreign_key(
        "fk_users_gid_groups",
        "users",
        "groups",
        ["primary_gid"],
        ["gid"],
        onupdate="CASCADE",
        ondelete="RESTRICT",
    )
    # ### end Alembic commands ###

    # manually added migration (adds the procedure and triggers for user/groups)
    new_user_trigger = sa.DDL(
        f"""
DROP TRIGGER IF EXISTS user_modification on users;
CREATE TRIGGER user_modification
AFTER INSERT OR UPDATE OR DELETE ON users
    FOR EACH ROW
    EXECUTE PROCEDURE set_user_primary_group();
"""
    )

    set_user_primary_group_procedure = sa.DDL(
        f"""
CREATE OR REPLACE FUNCTION set_user_primary_group() RETURNS TRIGGER AS $$
DECLARE
    group_id BIGINT;
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO "groups" ("name", "description") VALUES (NEW.name, 'primary group') RETURNING gid INTO group_id;
        INSERT INTO "user_to_groups" ("uid", "gid") VALUES (NEW.id, group_id);
        UPDATE "users" SET "primary_gid" = group_id WHERE "id" = NEW.id;
    ELSIF TG_OP = 'UPDATE' THEN
        UPDATE "groups" SET "name" = NEW.name WHERE "gid" = NEW.primary_gid;
    ELSEIF TG_OP = 'DELETE' THEN
        DELETE FROM "groups" WHERE "gid" = OLD.primary_gid;
    END IF;
    RETURN NULL;
END; $$ LANGUAGE 'plpgsql';
"""
    )

    op.execute(set_user_primary_group_procedure)
    op.execute(new_user_trigger)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_users_gid_groups", "users", type_="foreignkey")
    op.drop_column("users", "primary_gid")
    op.drop_column("users", "modified")
    op.drop_table("user_to_groups")
    op.drop_table("groups")
    # ### end Alembic commands ###
    # manually added migration
    op.execute("DROP TRIGGER IF EXISTS user_modification on users;")
    op.execute("DROP FUNCTION set_user_primary_group()")
