"""add licenses and license resources

Revision ID: eb74758a8761
Revises: e71ea59858f4
Create Date: 2025-02-07 15:59:49.201845+00:00

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "eb74758a8761"
down_revision = "e71ea59858f4"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "licensed_resources",
        sa.Column(
            "licensed_resource_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column("licensed_resource_name", sa.String(), nullable=False),
        sa.Column(
            "licensed_resource_type",
            sa.Enum("VIP_MODEL", name="licensedresourcetype"),
            nullable=False,
        ),
        sa.Column(
            "licensed_resource_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "trashed",
            sa.DateTime(timezone=True),
            nullable=True,
            comment="The date and time when the licensed_item was marked as trashed. Null if the licensed_item has not been trashed [default].",
        ),
        sa.PrimaryKeyConstraint("licensed_resource_id"),
        sa.UniqueConstraint(
            "licensed_resource_name",
            "licensed_resource_type",
            name="uq_licensed_resource_name_type2",
        ),
    )
    op.create_table(
        "resource_tracker_license_purchases",
        sa.Column(
            "licensed_item_purchase_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column("license_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("wallet_name", sa.String(), nullable=False),
        sa.Column("pricing_unit_cost_id", sa.BigInteger(), nullable=False),
        sa.Column("pricing_unit_cost", sa.Numeric(scale=2), nullable=True),
        sa.Column(
            "start_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "expire_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("num_of_seats", sa.SmallInteger(), nullable=False),
        sa.Column("purchased_by_user", sa.BigInteger(), nullable=False),
        sa.Column("user_email", sa.String(), nullable=True),
        sa.Column(
            "purchased_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("licensed_item_purchase_id"),
    )
    op.create_table(
        "resource_tracker_license_checkouts",
        sa.Column(
            "license_checkout_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("license_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("user_email", sa.String(), nullable=True),
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column("service_run_id", sa.String(), nullable=True),
        sa.Column("started_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("stopped_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("num_of_seats", sa.SmallInteger(), nullable=False),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_name", "service_run_id"],
            [
                "resource_tracker_service_runs.product_name",
                "resource_tracker_service_runs.service_run_id",
            ],
            name="resource_tracker_license_checkouts_service_run_id_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("license_checkout_id"),
    )
    op.create_index(
        op.f("ix_resource_tracker_license_checkouts_wallet_id"),
        "resource_tracker_license_checkouts",
        ["wallet_id"],
        unique=False,
    )
    op.create_table(
        "licenses",
        sa.Column(
            "license_id",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("display_name", sa.String(), nullable=False),
        sa.Column(
            "licensed_resource_type",
            sa.Enum("VIP_MODEL", name="licensedresourcetype"),
            nullable=False,
        ),
        sa.Column("pricing_plan_id", sa.BigInteger(), nullable=False),
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["pricing_plan_id"],
            ["resource_tracker_pricing_plans.pricing_plan_id"],
            name="fk_resource_tracker_license_packages_pricing_plan_id",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["product_name"],
            ["products.name"],
            name="fk_resource_tracker_license_packages_product_name",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("license_id"),
    )
    op.create_table(
        "license_to_resource",
        sa.Column("license_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "licensed_resource_id", postgresql.UUID(as_uuid=True), nullable=False
        ),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["licenses.license_id"],
            name="fk_license_to_resource_license_id",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["licensed_resource_id"],
            ["licensed_resources.licensed_resource_id"],
            name="fk_license_to_resource_licensed_resource_id",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
    )
    op.drop_table("resource_tracker_licensed_items_purchases")
    op.drop_index(
        "ix_resource_tracker_licensed_items_checkouts_wallet_id",
        table_name="resource_tracker_licensed_items_checkouts",
    )
    op.drop_table("resource_tracker_licensed_items_checkouts")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "resource_tracker_licensed_items_checkouts",
        sa.Column(
            "licensed_item_checkout_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "licensed_item_id", postgresql.UUID(), autoincrement=False, nullable=True
        ),
        sa.Column("wallet_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column("user_email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("product_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("service_run_id", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "started_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "stopped_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("num_of_seats", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.Column(
            "modified",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["product_name", "service_run_id"],
            [
                "resource_tracker_service_runs.product_name",
                "resource_tracker_service_runs.service_run_id",
            ],
            name="resource_tracker_license_checkouts_service_run_id_fkey",
            onupdate="CASCADE",
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint(
            "licensed_item_checkout_id",
            name="resource_tracker_licensed_items_checkouts_pkey",
        ),
    )
    op.create_index(
        "ix_resource_tracker_licensed_items_checkouts_wallet_id",
        "resource_tracker_licensed_items_checkouts",
        ["wallet_id"],
        unique=False,
    )
    op.create_table(
        "resource_tracker_licensed_items_purchases",
        sa.Column(
            "licensed_item_purchase_id",
            postgresql.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("product_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("wallet_id", sa.BIGINT(), autoincrement=False, nullable=False),
        sa.Column(
            "start_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "expire_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "purchased_by_user", sa.BIGINT(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "purchased_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "modified",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("wallet_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "pricing_unit_cost_id", sa.BIGINT(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "pricing_unit_cost", sa.NUMERIC(), autoincrement=False, nullable=True
        ),
        sa.Column("num_of_seats", sa.SMALLINT(), autoincrement=False, nullable=False),
        sa.Column(
            "licensed_item_id", postgresql.UUID(), autoincrement=False, nullable=False
        ),
        sa.Column("user_email", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint(
            "licensed_item_purchase_id",
            name="resource_tracker_licensed_items_purchases_pkey",
        ),
    )
    op.drop_table("license_to_resource")
    op.drop_table("licenses")
    op.drop_index(
        op.f("ix_resource_tracker_license_checkouts_wallet_id"),
        table_name="resource_tracker_license_checkouts",
    )
    op.drop_table("resource_tracker_license_checkouts")
    op.drop_table("resource_tracker_license_purchases")
    op.drop_table("licensed_resources")
    # ### end Alembic commands ###
