"""new payments_transactions table

Revision ID: fc6ea424f586
Revises: 763666c698fb
Create Date: 2023-09-04 14:13:28.201570+00:00

"""
from typing import Final

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "fc6ea424f586"
down_revision = "763666c698fb"
branch_labels = None
depends_on = None

# auto-update modified
# TRIGGERS ------------------------
_TABLE_NAME: Final[str] = "payments_transactions"
_TRIGGER_NAME: Final[str] = "trigger_auto_update"  # NOTE: scoped on table
_PROCEDURE_NAME: Final[
    str
] = f"{_TABLE_NAME}_auto_update_modified()"  # NOTE: scoped on database
modified_timestamp_trigger = sa.DDL(
    f"""
DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};
CREATE TRIGGER {_TRIGGER_NAME}
BEFORE INSERT OR UPDATE ON {_TABLE_NAME}
FOR EACH ROW EXECUTE PROCEDURE {_PROCEDURE_NAME};
    """
)

# PROCEDURES ------------------------
update_modified_timestamp_procedure = sa.DDL(
    f"""
CREATE OR REPLACE FUNCTION {_PROCEDURE_NAME}
RETURNS TRIGGER AS $$
BEGIN
  NEW.modified := current_timestamp;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
    """
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "payments_transactions",
        sa.Column("payment_id", sa.String(), nullable=False),
        sa.Column("price_dollars", sa.Numeric(scale=2), nullable=False),
        sa.Column("osparc_credits", sa.Numeric(scale=2), nullable=False),
        sa.Column("product_name", sa.String(), nullable=False),
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("user_email", sa.String(), nullable=False),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("comment", sa.Text(), nullable=True),
        sa.Column("initiated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("success", sa.Boolean(), nullable=True),
        sa.Column("errors", sa.Text(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("payment_id"),
    )
    op.create_index(
        op.f("ix_payments_transactions_user_id"),
        "payments_transactions",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_payments_transactions_wallet_id"),
        "payments_transactions",
        ["wallet_id"],
        unique=False,
    )
    # ### end Alembic commands ###

    # custom
    op.execute(update_modified_timestamp_procedure)
    op.execute(modified_timestamp_trigger)


def downgrade():

    # custom
    op.execute(f"DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};")
    op.execute(f"DROP FUNCTION {_PROCEDURE_NAME};")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_payments_transactions_wallet_id"), table_name="payments_transactions"
    )
    op.drop_index(
        op.f("ix_payments_transactions_user_id"), table_name="payments_transactions"
    )
    op.drop_table("payments_transactions")
    # ### end Alembic commands ###
