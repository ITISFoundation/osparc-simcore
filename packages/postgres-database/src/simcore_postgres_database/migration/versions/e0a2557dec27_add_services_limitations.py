"""add services limitations

Revision ID: e0a2557dec27
Revises: b4e1886bff95
Create Date: 2023-06-08 08:03:44.715899+00:00

"""
from typing import Final

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "e0a2557dec27"
down_revision = "b4e1886bff95"
branch_labels = None
depends_on = None

# auto-update modified
# TRIGGERS ------------------------
_TABLE_NAME: Final[str] = "services_limitations"
_TRIGGER_NAME: Final[str] = "trigger_auto_update"  # NOTE: scoped on table
_PROCEDURE_NAME: Final[
    str
] = f"{_TABLE_NAME}_auto_update_modified()"  # NOTE: scoped on database
modified_timestamp_trigger = sa.DDL(
    f"""
DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};
CREATE TRIGGER {_TRIGGER_NAME}
BEFORE INSERT OR UPDATE ON {_TABLE_NAME}
FOR EACH ROW EXECUTE PROCEDURE {_PROCEDURE_NAME};
    """
)

# PROCEDURES ------------------------
update_modified_timestamp_procedure = sa.DDL(
    f"""
CREATE OR REPLACE FUNCTION {_PROCEDURE_NAME}
RETURNS TRIGGER AS $$
BEGIN
  NEW.modified := current_timestamp;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
    """
)


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "services_limitations",
        sa.Column("gid", sa.BigInteger(), nullable=False),
        sa.Column("cluster_id", sa.BigInteger(), nullable=True),
        sa.Column("ram", sa.BigInteger(), nullable=True),
        sa.Column("cpu", sa.Numeric(), nullable=True),
        sa.Column("vram", sa.BigInteger(), nullable=True),
        sa.Column("gpu", sa.Integer(), nullable=True),
        sa.Column(
            "created",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "modified",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["cluster_id"],
            ["clusters.id"],
            name="fk_services_limitations_to_clusters_id",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["gid"],
            ["groups.gid"],
            name="fk_services_limitations_to_groups_gid",
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.UniqueConstraint("gid", "cluster_id", name="gid_cluster_id_uniqueness"),
    )
    op.create_index(
        "idx_unique_gid_cluster_id_null",
        "services_limitations",
        ["gid"],
        unique=True,
        postgresql_where=sa.text("cluster_id IS NULL"),
    )
    # ### end Alembic commands ###

    # custom
    update_modified_timestamp_procedure.execute(bind=op.get_context().bind)
    modified_timestamp_trigger.execute(bind=op.get_context().bind)


def downgrade():
    # custom
    op.execute(f"DROP TRIGGER IF EXISTS {_TRIGGER_NAME} on {_TABLE_NAME};")
    op.execute(f"DROP FUNCTION {_PROCEDURE_NAME};")

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "idx_unique_gid_cluster_id_null",
        table_name="services_limitations",
        postgresql_where=sa.text("cluster_id IS NULL"),
    )
    op.drop_table("services_limitations")
    # ### end Alembic commands ###
