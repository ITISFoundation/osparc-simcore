# generated by datamodel-codegen:
#   filename:  https://docs.docker.com/engine/api/v1.41.yaml
#   timestamp: 2022-05-12T20:15:58+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Extra, Field


class Model(BaseModel):
    __root__: Any


class Type(Enum):
    tcp = "tcp"
    udp = "udp"
    sctp = "sctp"


class Port(BaseModel):
    """
    An open port on a container
    """

    IP: Optional[str] = Field(
        None, description="Host IP address that the container's port is mapped to"
    )
    PrivatePort: int = Field(..., description="Port on the container")
    PublicPort: Optional[int] = Field(None, description="Port exposed on the host")
    Type: Type


class Type1(Enum):
    """
        The mount type:

    - `bind` a mount of a file or directory from the host into the container.
    - `volume` a docker volume with the given `Name`.
    - `tmpfs` a `tmpfs`.
    - `npipe` a named pipe from the host into the container.

    """

    bind = "bind"
    volume = "volume"
    tmpfs = "tmpfs"
    npipe = "npipe"


class MountPoint(BaseModel):
    """
        MountPoint represents a mount point configuration inside the container.
    This is used for reporting the mountpoints in use by a container.

    """

    Type: Optional[Type1] = Field(
        None,
        description="The mount type:\n\n- `bind` a mount of a file or directory from the host into the container.\n- `volume` a docker volume with the given `Name`.\n- `tmpfs` a `tmpfs`.\n- `npipe` a named pipe from the host into the container.\n",
        example="volume",
    )
    Name: Optional[str] = Field(
        None,
        description="Name is the name reference to the underlying data defined by `Source`\ne.g., the volume name.\n",
        example="myvolume",
    )
    Source: Optional[str] = Field(
        None,
        description="Source location of the mount.\n\nFor volumes, this contains the storage location of the volume (within\n`/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains\nthe source (host) part of the bind-mount. For `tmpfs` mount points, this\nfield is empty.\n",
        example="/var/lib/docker/volumes/myvolume/_data",
    )
    Destination: Optional[str] = Field(
        None,
        description="Destination is the path relative to the container root (`/`) where\nthe `Source` is mounted inside the container.\n",
        example="/usr/share/nginx/html/",
    )
    Driver: Optional[str] = Field(
        None,
        description="Driver is the volume driver used to create the volume (if it is a volume).\n",
        example="local",
    )
    Mode: Optional[str] = Field(
        None,
        description='Mode is a comma separated list of options supplied by the user when\ncreating the bind/volume mount.\n\nThe default is platform-specific (`"z"` on Linux, empty on Windows).\n',
        example="z",
    )
    RW: Optional[bool] = Field(
        None,
        description="Whether the mount is mounted writable (read-write).\n",
        example=True,
    )
    Propagation: Optional[str] = Field(
        None,
        description="Propagation describes how mounts are propagated from the host into the\nmount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt)\nfor details. This field is not used on Windows.\n",
        example="",
    )


class DeviceMapping(BaseModel):
    """
    A device mapping between the host and container
    """

    PathOnHost: Optional[str] = None
    PathInContainer: Optional[str] = None
    CgroupPermissions: Optional[str] = None


class DeviceRequest(BaseModel):
    """
    A request for devices to be sent to device drivers
    """

    Driver: Optional[str] = Field(None, example="nvidia")
    Count: Optional[int] = Field(None, example=-1)
    DeviceIDs: Optional[list[str]] = Field(
        None, example=["0", "1", "GPU-fef8089b-4820-abfc-e83e-94318197576e"]
    )
    Capabilities: Optional[list[list[str]]] = Field(
        None,
        description="A list of capabilities; an OR list of AND lists of capabilities.\n",
        example=[["gpu", "nvidia", "compute"]],
    )
    Options: Optional[dict[str, str]] = Field(
        None,
        description="Driver-specific options, specified as a key/value pairs. These options\nare passed directly to the driver.\n",
    )


class ThrottleDevice(BaseModel):
    Path: Optional[str] = Field(None, description="Device path")
    Rate: Optional[int] = Field(None, description="Rate", ge=0)


class Propagation(Enum):
    """
    A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
    """

    private = "private"
    rprivate = "rprivate"
    shared = "shared"
    rshared = "rshared"
    slave = "slave"
    rslave = "rslave"


class BindOptions(BaseModel):
    """
    Optional configuration for the `bind` type.
    """

    Propagation: Optional[Propagation] = Field(
        None,
        description="A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.",
    )
    NonRecursive: Optional[bool] = Field(
        False, description="Disable recursive bind mount."
    )


class DriverConfig(BaseModel):
    """
    Map of driver specific options
    """

    Name: Optional[str] = Field(
        None, description="Name of the driver to use to create the volume."
    )
    Options: Optional[dict[str, str]] = Field(
        None, description="key/value map of driver specific options."
    )


class VolumeOptions(BaseModel):
    """
    Optional configuration for the `volume` type.
    """

    NoCopy: Optional[bool] = Field(
        False, description="Populate volume with data from the target."
    )
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    DriverConfig: Optional[DriverConfig] = Field(
        None, description="Map of driver specific options"
    )


class TmpfsOptions(BaseModel):
    """
    Optional configuration for the `tmpfs` type.
    """

    SizeBytes: Optional[int] = Field(
        None, description="The size for the tmpfs mount in bytes."
    )
    Mode: Optional[int] = Field(
        None, description="The permission mode for the tmpfs mount in an integer."
    )


class Mount(BaseModel):
    Target: Optional[str] = Field(None, description="Container path.")
    Source: Optional[str] = Field(
        None, description="Mount source (e.g. a volume name, a host path)."
    )
    Type: Optional[Type1] = Field(
        None,
        description="The mount type. Available types:\n\n- `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container.\n- `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed.\n- `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.\n- `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container.\n",
    )
    ReadOnly: Optional[bool] = Field(
        None, description="Whether the mount should be read-only."
    )
    Consistency: Optional[str] = Field(
        None,
        description="The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.",
    )
    BindOptions: Optional[BindOptions] = Field(
        None, description="Optional configuration for the `bind` type."
    )
    VolumeOptions: Optional[VolumeOptions] = Field(
        None, description="Optional configuration for the `volume` type."
    )
    TmpfsOptions: Optional[TmpfsOptions] = Field(
        None, description="Optional configuration for the `tmpfs` type."
    )


class Name(Enum):
    """
        - Empty string means not to restart
    - `no` Do not automatically restart
    - `always` Always restart
    - `unless-stopped` Restart always except when the user has manually stopped the container
    - `on-failure` Restart only when the container exit code is non-zero

    """

    _ = ""
    no = "no"
    always = "always"
    unless_stopped = "unless-stopped"
    on_failure = "on-failure"


class RestartPolicy(BaseModel):
    """
        The behavior to apply when the container exits. The default is not to
    restart.

    An ever increasing delay (double the previous delay, starting at 100ms) is
    added before each restart to prevent flooding the server.

    """

    Name: Optional[Name] = Field(
        None,
        description="- Empty string means not to restart\n- `no` Do not automatically restart\n- `always` Always restart\n- `unless-stopped` Restart always except when the user has manually stopped the container\n- `on-failure` Restart only when the container exit code is non-zero\n",
    )
    MaximumRetryCount: Optional[int] = Field(
        None,
        description="If `on-failure` is used, the number of times to retry before giving up.\n",
    )


class BlkioWeightDeviceItem(BaseModel):
    Path: Optional[str] = None
    Weight: Optional[int] = Field(None, ge=0)


class Ulimit(BaseModel):
    Name: Optional[str] = Field(None, description="Name of ulimit")
    Soft: Optional[int] = Field(None, description="Soft limit")
    Hard: Optional[int] = Field(None, description="Hard limit")


class Resources(BaseModel):
    """
    A container's resources (cgroups config, ulimits, etc)
    """

    CpuShares: Optional[int] = Field(
        None,
        description="An integer value representing this container's relative CPU weight\nversus other containers.\n",
    )
    Memory: Optional[int] = Field(0, description="Memory limit in bytes.")
    CgroupParent: Optional[str] = Field(
        None,
        description="Path to `cgroups` under which the container's `cgroup` is created. If\nthe path is not absolute, the path is considered to be relative to the\n`cgroups` path of the init process. Cgroups are created if they do not\nalready exist.\n",
    )
    BlkioWeight: Optional[int] = Field(
        None, description="Block IO weight (relative weight).", ge=0, le=1000
    )
    BlkioWeightDevice: Optional[list[BlkioWeightDeviceItem]] = Field(
        None,
        description='Block IO weight (relative device weight) in the form:\n\n```\n[{"Path": "device_path", "Weight": weight}]\n```\n',
    )
    BlkioDeviceReadBps: Optional[list[ThrottleDevice]] = Field(
        None,
        description='Limit read rate (bytes per second) from a device, in the form:\n\n```\n[{"Path": "device_path", "Rate": rate}]\n```\n',
    )
    BlkioDeviceWriteBps: Optional[list[ThrottleDevice]] = Field(
        None,
        description='Limit write rate (bytes per second) to a device, in the form:\n\n```\n[{"Path": "device_path", "Rate": rate}]\n```\n',
    )
    BlkioDeviceReadIOps: Optional[list[ThrottleDevice]] = Field(
        None,
        description='Limit read rate (IO per second) from a device, in the form:\n\n```\n[{"Path": "device_path", "Rate": rate}]\n```\n',
    )
    BlkioDeviceWriteIOps: Optional[list[ThrottleDevice]] = Field(
        None,
        description='Limit write rate (IO per second) to a device, in the form:\n\n```\n[{"Path": "device_path", "Rate": rate}]\n```\n',
    )
    CpuPeriod: Optional[int] = Field(
        None, description="The length of a CPU period in microseconds."
    )
    CpuQuota: Optional[int] = Field(
        None,
        description="Microseconds of CPU time that the container can get in a CPU period.\n",
    )
    CpuRealtimePeriod: Optional[int] = Field(
        None,
        description="The length of a CPU real-time period in microseconds. Set to 0 to\nallocate no time allocated to real-time tasks.\n",
    )
    CpuRealtimeRuntime: Optional[int] = Field(
        None,
        description="The length of a CPU real-time runtime in microseconds. Set to 0 to\nallocate no time allocated to real-time tasks.\n",
    )
    CpusetCpus: Optional[str] = Field(
        None,
        description="CPUs in which to allow execution (e.g., `0-3`, `0,1`).\n",
        example="0-3",
    )
    CpusetMems: Optional[str] = Field(
        None,
        description="Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only\neffective on NUMA systems.\n",
    )
    Devices: Optional[list[DeviceMapping]] = Field(
        None, description="A list of devices to add to the container."
    )
    DeviceCgroupRules: Optional[list[str]] = Field(
        None, description="a list of cgroup rules to apply to the container"
    )
    DeviceRequests: Optional[list[DeviceRequest]] = Field(
        None,
        description="A list of requests for devices to be sent to device drivers.\n",
    )
    KernelMemory: Optional[int] = Field(
        None,
        description="Kernel memory limit in bytes.\n\n<p><br /></p>\n\n> **Deprecated**: This field is deprecated as the kernel 5.4 deprecated\n> `kmem.limit_in_bytes`.\n",
        example=209715200,
    )
    KernelMemoryTCP: Optional[int] = Field(
        None, description="Hard limit for kernel TCP buffer memory (in bytes)."
    )
    MemoryReservation: Optional[int] = Field(
        None, description="Memory soft limit in bytes."
    )
    MemorySwap: Optional[int] = Field(
        None,
        description="Total memory limit (memory + swap). Set as `-1` to enable unlimited\nswap.\n",
    )
    MemorySwappiness: Optional[int] = Field(
        None,
        description="Tune a container's memory swappiness behavior. Accepts an integer\nbetween 0 and 100.\n",
        ge=0,
        le=100,
    )
    NanoCpus: Optional[int] = Field(
        None, description="CPU quota in units of 10<sup>-9</sup> CPUs."
    )
    OomKillDisable: Optional[bool] = Field(
        None, description="Disable OOM Killer for the container."
    )
    Init: Optional[bool] = Field(
        None,
        description="Run an init inside the container that forwards signals and reaps\nprocesses. This field is omitted if empty, and the default (as\nconfigured on the daemon) is used.\n",
    )
    PidsLimit: Optional[int] = Field(
        None,
        description="Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null`\nto not change.\n",
    )
    Ulimits: Optional[list[Ulimit]] = Field(
        None,
        description='A list of resource limits to set in the container. For example:\n\n```\n{"Name": "nofile", "Soft": 1024, "Hard": 2048}\n```\n',
    )
    CpuCount: Optional[int] = Field(
        None,
        description="The number of usable CPUs (Windows only).\n\nOn Windows Server containers, the processor resource controls are\nmutually exclusive. The order of precedence is `CPUCount` first, then\n`CPUShares`, and `CPUPercent` last.\n",
    )
    CpuPercent: Optional[int] = Field(
        None,
        description="The usable percentage of the available CPUs (Windows only).\n\nOn Windows Server containers, the processor resource controls are\nmutually exclusive. The order of precedence is `CPUCount` first, then\n`CPUShares`, and `CPUPercent` last.\n",
    )
    IOMaximumIOps: Optional[int] = Field(
        None, description="Maximum IOps for the container system drive (Windows only)"
    )
    IOMaximumBandwidth: Optional[int] = Field(
        None,
        description="Maximum IO in bytes per second for the container system drive\n(Windows only).\n",
    )


class Limit(BaseModel):
    """
    An object describing a limit on resources which can be requested by a task.

    """

    NanoCPUs: Optional[int] = Field(None, example=4000000000)
    MemoryBytes: Optional[int] = Field(None, example=8272408576)
    Pids: Optional[int] = Field(
        0,
        description="Limits the maximum number of PIDs in the container. Set `0` for unlimited.\n",
        example=100,
    )


class NamedResourceSpec(BaseModel):
    Kind: Optional[str] = None
    Value: Optional[str] = None


class DiscreteResourceSpec(BaseModel):
    Kind: Optional[str] = None
    Value: Optional[int] = None


class GenericResource(BaseModel):
    NamedResourceSpec: Optional[NamedResourceSpec] = None
    DiscreteResourceSpec: Optional[DiscreteResourceSpec] = None


class GenericResources(BaseModel):
    """
        User-defined resources can be either Integer resources (e.g, `SSD=3`) or
    String resources (e.g, `GPU=UUID1`).

    """

    __root__: list[GenericResource] = Field(
        ...,
        description="User-defined resources can be either Integer resources (e.g, `SSD=3`) or\nString resources (e.g, `GPU=UUID1`).\n",
        example=[
            {"DiscreteResourceSpec": {"Kind": "SSD", "Value": 3}},
            {"NamedResourceSpec": {"Kind": "GPU", "Value": "UUID1"}},
            {"NamedResourceSpec": {"Kind": "GPU", "Value": "UUID2"}},
        ],
    )


class HealthConfig(BaseModel):
    """
    A test to perform to check that the container is healthy.
    """

    Test: Optional[list[str]] = Field(
        None,
        description='The test to perform. Possible values are:\n\n- `[]` inherit healthcheck from image or parent image\n- `["NONE"]` disable healthcheck\n- `["CMD", args...]` exec arguments directly\n- `["CMD-SHELL", command]` run command with system\'s default shell\n',
    )
    Interval: Optional[int] = Field(
        None,
        description="The time to wait between checks in nanoseconds. It should be 0 or at\nleast 1000000 (1 ms). 0 means inherit.\n",
    )
    Timeout: Optional[int] = Field(
        None,
        description="The time to wait before considering the check to have hung. It should\nbe 0 or at least 1000000 (1 ms). 0 means inherit.\n",
    )
    Retries: Optional[int] = Field(
        None,
        description="The number of consecutive failures needed to consider a container as\nunhealthy. 0 means inherit.\n",
    )
    StartPeriod: Optional[int] = Field(
        None,
        description="Start period for the container to initialize before starting\nhealth-retries countdown in nanoseconds. It should be 0 or at least\n1000000 (1 ms). 0 means inherit.\n",
    )


class Status(Enum):
    """
        Status is one of `none`, `starting`, `healthy` or `unhealthy`

    - "none"      Indicates there is no healthcheck
    - "starting"  Starting indicates that the container is not yet ready
    - "healthy"   Healthy indicates that the container is running correctly
    - "unhealthy" Unhealthy indicates that the container has a problem

    """

    none = "none"
    starting = "starting"
    healthy = "healthy"
    unhealthy = "unhealthy"


class HealthcheckResult(BaseModel):
    """
    HealthcheckResult stores information about a single run of a healthcheck probe

    """

    Start: Optional[datetime] = Field(
        None,
        description="Date and time at which this check started in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2020-01-04T10:44:24.496525531Z",
    )
    End: Optional[str] = Field(
        None,
        description="Date and time at which this check ended in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2020-01-04T10:45:21.364524523Z",
    )
    ExitCode: Optional[int] = Field(
        None,
        description="ExitCode meanings:\n\n- `0` healthy\n- `1` unhealthy\n- `2` reserved (considered unhealthy)\n- other values: error running probe\n",
        example=0,
    )
    Output: Optional[str] = Field(None, description="Output from last check")


class Type3(Enum):
    json_file = "json-file"
    syslog = "syslog"
    journald = "journald"
    gelf = "gelf"
    fluentd = "fluentd"
    awslogs = "awslogs"
    splunk = "splunk"
    etwlogs = "etwlogs"
    none = "none"


class LogConfig(BaseModel):
    """
    The logging configuration for this container
    """

    Type: Optional[Type3] = None
    Config_: Optional[dict[str, str]] = Field(None, alias="Config")


class CgroupnsMode(Enum):
    """
        cgroup namespace mode for the container. Possible values are:

    - `"private"`: the container runs in its own private cgroup namespace
    - `"host"`: use the host system's cgroup namespace

    If not specified, the daemon default is used, which can either be `"private"`
    or `"host"`, depending on daemon version, kernel support and configuration.

    """

    private = "private"
    host = "host"


class ConsoleSizeItem(BaseModel):
    __root__: int = Field(..., ge=0)


class Isolation(Enum):
    """
    Isolation technology of the container. (Windows only)

    """

    default = "default"
    process = "process"
    hyperv = "hyperv"


class ContainerConfig(BaseModel):
    """
    Configuration for a container that is portable between hosts.

    """

    Hostname: Optional[str] = Field(
        None,
        description="The hostname to use for the container, as a valid RFC 1123 hostname.\n",
        example="439f4e91bd1d",
    )
    Domainname: Optional[str] = Field(
        None, description="The domain name to use for the container.\n"
    )
    User: Optional[str] = Field(
        None, description="The user that commands are run as inside the container."
    )
    AttachStdin: Optional[bool] = Field(
        False, description="Whether to attach to `stdin`."
    )
    AttachStdout: Optional[bool] = Field(
        True, description="Whether to attach to `stdout`."
    )
    AttachStderr: Optional[bool] = Field(
        True, description="Whether to attach to `stderr`."
    )
    ExposedPorts: Optional[dict[str, dict[str, Any]]] = Field(
        None,
        description='An object mapping ports to an empty object in the form:\n\n`{"<port>/<tcp|udp|sctp>": {}}`\n',
        example={"80/tcp": {}, "443/tcp": {}},
    )
    Tty: Optional[bool] = Field(
        False,
        description="Attach standard streams to a TTY, including `stdin` if it is not closed.\n",
    )
    OpenStdin: Optional[bool] = Field(False, description="Open `stdin`")
    StdinOnce: Optional[bool] = Field(
        False, description="Close `stdin` after one attached client disconnects"
    )
    Env: Optional[list[str]] = Field(
        None,
        description='A list of environment variables to set inside the container in the\nform `["VAR=value", ...]`. A variable without `=` is removed from the\nenvironment, rather than to have an empty value.\n',
        example=["PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"],
    )
    Cmd: Optional[list[str]] = Field(
        None,
        description="Command to run specified as a string or an array of strings.\n",
        example=["/bin/sh"],
    )
    Healthcheck: Optional[HealthConfig] = None
    ArgsEscaped: Optional[bool] = Field(
        False, description="Command is already escaped (Windows only)", example=False
    )
    Image: Optional[str] = Field(
        None,
        description="The name (or reference) of the image to use when creating the container,\nor which was used when the container was created.\n",
        example="example-image:1.0",
    )
    Volumes: Optional[dict[str, dict[str, Any]]] = Field(
        None,
        description="An object mapping mount point paths inside the container to empty\nobjects.\n",
    )
    WorkingDir: Optional[str] = Field(
        None,
        description="The working directory for commands to run in.",
        example="/public/",
    )
    Entrypoint: Optional[list[str]] = Field(
        None,
        description='The entry point for the container as a string or an array of strings.\n\nIf the array consists of exactly one empty string (`[""]`) then the\nentry point is reset to system default (i.e., the entry point used by\ndocker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).\n',
        example=[],
    )
    NetworkDisabled: Optional[bool] = Field(
        None, description="Disable networking for the container."
    )
    MacAddress: Optional[str] = Field(None, description="MAC address of the container.")
    OnBuild: Optional[list[str]] = Field(
        None,
        description="`ONBUILD` metadata that were defined in the image's `Dockerfile`.\n",
        example=[],
    )
    Labels: Optional[dict[str, str]] = Field(
        None,
        description="User-defined key/value metadata.",
        example={
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value",
        },
    )
    StopSignal: Optional[str] = Field(
        None,
        description="Signal to stop a container as a string or unsigned integer.\n",
        example="SIGTERM",
    )
    StopTimeout: Optional[int] = Field(
        10, description="Timeout to stop a container in seconds."
    )
    Shell: Optional[list[str]] = Field(
        None,
        description="Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.\n",
        example=["/bin/sh", "-c"],
    )


class Address(BaseModel):
    """
    Address represents an IPv4 or IPv6 IP address.
    """

    Addr: Optional[str] = Field(None, description="IP address.")
    PrefixLen: Optional[int] = Field(None, description="Mask length of the IP address.")


class PortMap(BaseModel):
    """
        PortMap describes the mapping of container ports to host ports, using the
    container's port-number and protocol as key in the format `<port>/<protocol>`,
    for example, `80/udp`.

    If a container's port is mapped for multiple protocols, separate entries
    are added to the mapping table.

    """

    pass

    class Config:
        extra = Extra.allow


class PortBinding(BaseModel):
    """
        PortBinding represents a binding between a host IP address and a host
    port.

    """

    HostIp: Optional[str] = Field(
        None,
        description="Host IP address that the container's port is mapped to.",
        example="127.0.0.1",
    )
    HostPort: Optional[str] = Field(
        None,
        description="Host port number that the container's port is mapped to.",
        example="4443",
    )


class GraphDriverData(BaseModel):
    """
        Information about the storage driver used to store the container's and
    image's filesystem.

    """

    Name: str = Field(
        ..., description="Name of the storage driver.", example="overlay2"
    )
    Data: dict[str, str] = Field(
        ...,
        description="Low-level storage metadata, provided as key/value pairs.\n\nThis information is driver-specific, and depends on the storage-driver\nin use, and should be used for informational purposes only.\n",
        example={
            "MergedDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/merged",
            "UpperDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/diff",
            "WorkDir": "/var/lib/docker/overlay2/ef749362d13333e65fc95c572eb525abbe0052e16e086cb64bc3b98ae9aa6d74/work",
        },
    )


class RootFS(BaseModel):
    """
    Information about the image's RootFS, including the layer IDs.

    """

    Type: str = Field(..., example="layers")
    Layers: Optional[list[str]] = Field(
        None,
        example=[
            "sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6",
            "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
        ],
    )


class Metadata(BaseModel):
    """
        Additional metadata of the image in the local cache. This information
    is local to the daemon, and not part of the image itself.

    """

    LastTagTime: Optional[str] = Field(
        None,
        description="Date and time at which the image was last tagged in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n\nThis information is only available if the image was tagged locally,\nand omitted otherwise.\n",
        example="2022-02-28T14:40:02.623929178Z",
    )


class ImageInspect(BaseModel):
    """
    Information about an image in the local image cache.

    """

    Id: Optional[str] = Field(
        None,
        description="ID is the content-addressable ID of an image.\n\nThis identified is a content-addressable digest calculated from the\nimage's configuration (which includes the digests of layers used by\nthe image).\n\nNote that this digest differs from the `RepoDigests` below, which\nholds digests of image manifests that reference the image.\n",
        example="sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710",
    )
    RepoTags: Optional[list[str]] = Field(
        None,
        description='List of image names/tags in the local image cache that reference this\nimage.\n\nMultiple image tags can refer to the same imagem and this list may be\nempty if no tags reference the image, in which case the image is\n"untagged", in which case it can still be referenced by its ID.\n',
        example=[
            "example:1.0",
            "example:latest",
            "example:stable",
            "internal.registry.example.com:5000/example:1.0",
        ],
    )
    RepoDigests: Optional[list[str]] = Field(
        None,
        description="List of content-addressable digests of locally available image manifests\nthat the image is referenced from. Multiple manifests can refer to the\nsame image.\n\nThese digests are usually only available if the image was either pulled\nfrom a registry, or if the image was pushed to a registry, which is when\nthe manifest is generated and its digest calculated.\n",
        example=[
            "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb",
            "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578",
        ],
    )
    Parent: Optional[str] = Field(
        None,
        description="ID of the parent image.\n\nDepending on how the image was created, this field may be empty and\nis only set for images that were built/created locally. This field\nis empty if the image was pulled from an image registry.\n",
        example="",
    )
    Comment: Optional[str] = Field(
        None,
        description="Optional message that was set when committing or importing the image.\n",
        example="",
    )
    Created: Optional[str] = Field(
        None,
        description="Date and time at which the image was created, formatted in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2022-02-04T21:20:12.497794809Z",
    )
    Container: Optional[str] = Field(
        None,
        description="The ID of the container that was used to create the image.\n\nDepending on how the image was created, this field may be empty.\n",
        example="65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735",
    )
    ContainerConfig: Optional[ContainerConfig] = None
    DockerVersion: Optional[str] = Field(
        None,
        description="The version of Docker that was used to build the image.\n\nDepending on how the image was created, this field may be empty.\n",
        example="20.10.7",
    )
    Author: Optional[str] = Field(
        None,
        description="Name of the author that was specified when committing the image, or as\nspecified through MAINTAINER (deprecated) in the Dockerfile.\n",
        example="",
    )
    Config_: Optional[ContainerConfig] = Field(None, alias="Config")
    Architecture: Optional[str] = Field(
        None,
        description="Hardware CPU architecture that the image runs on.\n",
        example="arm",
    )
    Variant: Optional[str] = Field(
        None,
        description="CPU architecture variant (presently ARM-only).\n",
        example="v7",
    )
    Os: Optional[str] = Field(
        None,
        description="Operating System the image is built to run on.\n",
        example="linux",
    )
    OsVersion: Optional[str] = Field(
        None,
        description="Operating System version the image is built to run on (especially\nfor Windows).\n",
        example="",
    )
    Size: Optional[int] = Field(
        None,
        description="Total size of the image including all layers it is composed of.\n",
        example=1239828,
    )
    VirtualSize: Optional[int] = Field(
        None,
        description="Total size of the image including all layers it is composed of.\n\nIn versions of Docker before v1.10, this field was calculated from\nthe image itself and all of its parent images. Docker v1.10 and up\nstore images self-contained, and no longer use a parent-chain, making\nthis field an equivalent of the Size field.\n\nThis field is kept for backward compatibility, but may be removed in\na future version of the API.\n",
        example=1239828,
    )
    GraphDriver: Optional[GraphDriverData] = None
    RootFS: Optional[RootFS] = Field(
        None,
        description="Information about the image's RootFS, including the layer IDs.\n",
    )
    Metadata: Optional[Metadata] = Field(
        None,
        description="Additional metadata of the image in the local cache. This information\nis local to the daemon, and not part of the image itself.\n",
    )


class ImageSummary(BaseModel):
    Id: str
    ParentId: str
    RepoTags: list[str]
    RepoDigests: list[str]
    Created: int
    Size: int
    SharedSize: int
    VirtualSize: int
    Labels: dict[str, str]
    Containers: int


class AuthConfig(BaseModel):
    username: Optional[str] = None
    password: Optional[str] = None
    email: Optional[str] = None
    serveraddress: Optional[str] = None


class ProcessConfig(BaseModel):
    privileged: Optional[bool] = None
    user: Optional[str] = None
    tty: Optional[bool] = None
    entrypoint: Optional[str] = None
    arguments: Optional[list[str]] = None


class Scope(Enum):
    """
        The level at which the volume exists. Either `global` for cluster-wide,
    or `local` for machine level.

    """

    local = "local"
    global_ = "global"


class UsageData(BaseModel):
    """
        Usage details about the volume. This information is used by the
    `GET /system/df` endpoint, and omitted in other endpoints.

    """

    Size: int = Field(
        ...,
        description='Amount of disk space used by the volume (in bytes). This information\nis only available for volumes created with the `"local"` volume\ndriver. For volumes created with other volume drivers, this field\nis set to `-1` ("not available")\n',
    )
    RefCount: int = Field(
        ...,
        description="The number of containers referencing this volume. This field\nis set to `-1` if the reference-count is not available.\n",
    )


class Volume(BaseModel):
    Name: str = Field(..., description="Name of the volume.", example="tardis")
    Driver: str = Field(
        ...,
        description="Name of the volume driver used by the volume.",
        example="custom",
    )
    Mountpoint: str = Field(
        ...,
        description="Mount path of the volume on the host.",
        example="/var/lib/docker/volumes/tardis",
    )
    CreatedAt: Optional[str] = Field(
        None,
        description="Date/Time the volume was created.",
        example="2016-06-07T20:31:11.853781916Z",
    )
    Status: Optional[dict[str, dict[str, Any]]] = Field(
        None,
        description='Low-level details about the volume, provided by the volume driver.\nDetails are returned as a map with key/value pairs:\n`{"key":"value","key2":"value2"}`.\n\nThe `Status` field is optional, and is omitted if the volume driver\ndoes not support this feature.\n',
        example={"hello": "world"},
    )
    Labels: dict[str, str] = Field(
        ...,
        description="User-defined key/value metadata.",
        example={
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value",
        },
    )
    Scope: Scope = Field(
        ...,
        description="The level at which the volume exists. Either `global` for cluster-wide,\nor `local` for machine level.\n",
        example="local",
    )
    Options: dict[str, str] = Field(
        ...,
        description="The driver specific options used when creating the volume.\n",
        example={"device": "tmpfs", "o": "size=100m,uid=1000", "type": "tmpfs"},
    )
    UsageData: Optional[UsageData] = Field(
        None,
        description="Usage details about the volume. This information is used by the\n`GET /system/df` endpoint, and omitted in other endpoints.\n",
    )


class VolumeConfig(BaseModel):
    """
    Volume configuration
    """

    Name: Optional[str] = Field(
        None,
        description="The new volume's name. If not specified, Docker generates a name.\n",
        example="tardis",
    )
    Driver: Optional[str] = Field(
        "local", description="Name of the volume driver to use.", example="custom"
    )
    DriverOpts: Optional[dict[str, str]] = Field(
        None,
        description="A mapping of driver options and values. These options are\npassed directly to the driver and are driver specific.\n",
        example={"device": "tmpfs", "o": "size=100m,uid=1000", "type": "tmpfs"},
    )
    Labels: Optional[dict[str, str]] = Field(
        None,
        description="User-defined key/value metadata.",
        example={
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value",
        },
    )


class IPAMConfig(BaseModel):
    Subnet: Optional[str] = None
    IPRange: Optional[str] = None
    Gateway: Optional[str] = None
    AuxiliaryAddresses: Optional[dict[str, str]] = None


class NetworkContainer(BaseModel):
    Name: Optional[str] = None
    EndpointID: Optional[str] = None
    MacAddress: Optional[str] = None
    IPv4Address: Optional[str] = None
    IPv6Address: Optional[str] = None


class BuildCache(BaseModel):
    ID: Optional[str] = None
    Parent: Optional[str] = None
    Type: Optional[str] = None
    Description: Optional[str] = None
    InUse: Optional[bool] = None
    Shared: Optional[bool] = None
    Size: Optional[int] = Field(
        None, description="Amount of disk space used by the build cache (in bytes).\n"
    )
    CreatedAt: Optional[str] = Field(
        None,
        description="Date and time at which the build cache was created in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2016-08-18T10:44:24.496525531Z",
    )
    LastUsedAt: Optional[str] = Field(
        None,
        description="Date and time at which the build cache was last used in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2017-08-09T07:09:37.632105588Z",
    )
    UsageCount: Optional[int] = None


class ImageID(BaseModel):
    """
    Image ID or Digest
    """

    ID: Optional[str] = None


class ErrorDetail(BaseModel):
    code: Optional[int] = None
    message: Optional[str] = None


class ProgressDetail(BaseModel):
    current: Optional[int] = None
    total: Optional[int] = None


class ErrorResponse(BaseModel):
    """
    Represents an error.
    """

    message: str = Field(..., description="The error message.")


class IdResponse(BaseModel):
    """
    Response to an API call that returns just an Id
    """

    Id: str = Field(..., description="The id of the newly created object.")


class EndpointIPAMConfig(BaseModel):
    """
    EndpointIPAMConfig represents an endpoint's IPAM configuration.

    """

    IPv4Address: Optional[str] = Field(None, example="172.20.30.33")
    IPv6Address: Optional[str] = Field(None, example="2001:db8:abcd::3033")
    LinkLocalIPs: Optional[list[str]] = Field(
        None, example=["169.254.34.68", "fe80::3468"]
    )


class PluginMount(BaseModel):
    Name: str = Field(..., example="some-mount")
    Description: str = Field(..., example="This is a mount that's used by the plugin.")
    Settable: list[str]
    Source: str = Field(..., example="/var/lib/docker/plugins/")
    Destination: str = Field(..., example="/mnt/state")
    Type: str = Field(..., example="bind")
    Options: list[str] = Field(..., example=["rbind", "rw"])


class PluginDevice(BaseModel):
    Name: str
    Description: str
    Settable: list[str]
    Path: str = Field(..., example="/dev/fuse")


class PluginEnv(BaseModel):
    Name: str
    Description: str
    Settable: list[str]
    Value: str


class PluginInterfaceType(BaseModel):
    Prefix: str
    Capability: str
    Version: str


class PluginPrivilege(BaseModel):
    """
        Describes a permission the user has to accept upon installing
    the plugin.

    """

    Name: Optional[str] = Field(None, example="network")
    Description: Optional[str] = None
    Value: Optional[list[str]] = Field(None, example=["host"])


class Settings(BaseModel):
    """
    Settings that can be modified by users.
    """

    Mounts: list[PluginMount]
    Env: list[str] = Field(..., example=["DEBUG=0"])
    Args: list[str]
    Devices: list[PluginDevice]


class ProtocolScheme(Enum):
    """
    Protocol to use for clients connecting to the plugin.
    """

    _ = ""
    moby_plugins_http_v1 = "moby.plugins.http/v1"


class Interface(BaseModel):
    """
    The interface between Docker and the plugin
    """

    Types: list[PluginInterfaceType] = Field(..., example=["docker.volumedriver/1.0"])
    Socket: str = Field(..., example="plugins.sock")
    ProtocolScheme: Optional[ProtocolScheme] = Field(
        None,
        description="Protocol to use for clients connecting to the plugin.",
        example="some.protocol/v1.0",
    )


class User(BaseModel):
    UID: Optional[int] = Field(None, example=1000)
    GID: Optional[int] = Field(None, example=1000)


class Network1(BaseModel):
    Type: str = Field(..., example="host")


class Linux(BaseModel):
    Capabilities: list[str] = Field(..., example=["CAP_SYS_ADMIN", "CAP_SYSLOG"])
    AllowAllDevices: bool = Field(..., example=False)
    Devices: list[PluginDevice]


class Args(BaseModel):
    Name: str = Field(..., example="args")
    Description: str = Field(..., example="command line arguments")
    Settable: list[str]
    Value: list[str]


class Rootfs(BaseModel):
    type: Optional[str] = Field(None, example="layers")
    diff_ids: Optional[list[str]] = Field(
        None,
        example=[
            "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887",
            "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8",
        ],
    )


class Config(BaseModel):
    """
    The config of a plugin.
    """

    DockerVersion: Optional[str] = Field(
        None,
        description="Docker Version used to create the plugin",
        example="17.06.0-ce",
    )
    Description: str = Field(..., example="A sample volume plugin for Docker")
    Documentation: str = Field(..., example="/engine/extend/plugins/")
    Interface: Interface = Field(
        ..., description="The interface between Docker and the plugin"
    )
    Entrypoint: list[str] = Field(
        ..., example=["/usr/bin/sample-volume-plugin", "/data"]
    )
    WorkDir: str = Field(..., example="/bin/")
    User: Optional[User] = None
    Network: Network1
    Linux: Linux
    PropagatedMount: str = Field(..., example="/mnt/volumes")
    IpcHost: bool = Field(..., example=False)
    PidHost: bool = Field(..., example=False)
    Mounts: list[PluginMount]
    Env: list[PluginEnv] = Field(
        ...,
        example=[
            {
                "Name": "DEBUG",
                "Description": "If set, prints debug messages",
                "Settable": None,
                "Value": "0",
            }
        ],
    )
    Args: Args
    rootfs: Optional[Rootfs] = None


class Plugin(BaseModel):
    """
    A plugin for the Engine API
    """

    Id: Optional[str] = Field(
        None, example="5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
    )
    Name: str = Field(..., example="tiborvass/sample-volume-plugin")
    Enabled: bool = Field(
        ...,
        description="True if the plugin is running. False if the plugin is not running, only installed.",
        example=True,
    )
    Settings: Settings = Field(
        ..., description="Settings that can be modified by users."
    )
    PluginReference: Optional[str] = Field(
        None,
        description="plugin remote reference used to push/pull the plugin",
        example="localhost:5000/tiborvass/sample-volume-plugin:latest",
    )
    Config_: Config = Field(..., alias="Config", description="The config of a plugin.")


class ObjectVersion(BaseModel):
    """
        The version number of the object such as node, service, etc. This is needed
    to avoid conflicting writes. The client must send the version number along
    with the modified specification when updating these objects.

    This approach ensures safe concurrency and determinism in that the change
    on the object may not be applied if the version number has changed from the
    last read. In other words, if two update requests specify the same base
    version, only one of the requests can succeed. As a result, two separate
    update requests that happen at the same time will not unintentionally
    overwrite each other.

    """

    Index: Optional[int] = Field(None, example=373531)


class Role(Enum):
    """
    Role of the node.
    """

    worker = "worker"
    manager = "manager"


class Availability(Enum):
    """
    Availability of the node.
    """

    active = "active"
    pause = "pause"
    drain = "drain"


class NodeSpec(BaseModel):
    Name: Optional[str] = Field(
        None, description="Name for the node.", example="my-node"
    )
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    Role: Optional[Role] = Field(
        None, description="Role of the node.", example="manager"
    )
    Availability: Optional[Availability] = Field(
        None, description="Availability of the node.", example="active"
    )


class Platform(BaseModel):
    """
    Platform represents the platform (Arch/OS).

    """

    Architecture: Optional[str] = Field(
        None,
        description="Architecture represents the hardware architecture (for example,\n`x86_64`).\n",
        example="x86_64",
    )
    OS: Optional[str] = Field(
        None,
        description="OS represents the Operating System (for example, `linux` or `windows`).\n",
        example="linux",
    )


class Plugin1(BaseModel):
    Type: Optional[str] = None
    Name: Optional[str] = None


class EngineDescription(BaseModel):
    """
    EngineDescription provides information about an engine.
    """

    EngineVersion: Optional[str] = Field(None, example="17.06.0")
    Labels: Optional[dict[str, str]] = Field(None, example={"foo": "bar"})
    Plugins: Optional[list[Plugin1]] = Field(
        None,
        example=[
            {"Type": "Log", "Name": "awslogs"},
            {"Type": "Log", "Name": "fluentd"},
            {"Type": "Log", "Name": "gcplogs"},
            {"Type": "Log", "Name": "gelf"},
            {"Type": "Log", "Name": "journald"},
            {"Type": "Log", "Name": "json-file"},
            {"Type": "Log", "Name": "logentries"},
            {"Type": "Log", "Name": "splunk"},
            {"Type": "Log", "Name": "syslog"},
            {"Type": "Network", "Name": "bridge"},
            {"Type": "Network", "Name": "host"},
            {"Type": "Network", "Name": "ipvlan"},
            {"Type": "Network", "Name": "macvlan"},
            {"Type": "Network", "Name": "null"},
            {"Type": "Network", "Name": "overlay"},
            {"Type": "Volume", "Name": "local"},
            {"Type": "Volume", "Name": "localhost:5000/vieux/sshfs:latest"},
            {"Type": "Volume", "Name": "vieux/sshfs:latest"},
        ],
    )


class TLSInfo(BaseModel):
    """
        Information about the issuer of leaf TLS certificates and the trusted root
    CA certificate.

    """

    TrustRoot: Optional[str] = Field(
        None,
        description="The root CA certificate(s) that are used to validate leaf TLS\ncertificates.\n",
    )
    CertIssuerSubject: Optional[str] = Field(
        None, description="The base64-url-safe-encoded raw subject bytes of the issuer."
    )
    CertIssuerPublicKey: Optional[str] = Field(
        None,
        description="The base64-url-safe-encoded raw public key bytes of the issuer.\n",
    )


class NodeState(Enum):
    """
    NodeState represents the state of a node.
    """

    unknown = "unknown"
    down = "down"
    ready = "ready"
    disconnected = "disconnected"


class Reachability(Enum):
    """
    Reachability represents the reachability of a node.
    """

    unknown = "unknown"
    unreachable = "unreachable"
    reachable = "reachable"


class Orchestration(BaseModel):
    """
    Orchestration configuration.
    """

    TaskHistoryRetentionLimit: Optional[int] = Field(
        None,
        description="The number of historic tasks to keep per instance or node. If\nnegative, never remove completed or failed tasks.\n",
        example=10,
    )


class Raft(BaseModel):
    """
    Raft configuration.
    """

    SnapshotInterval: Optional[int] = Field(
        None, description="The number of log entries between snapshots.", example=10000
    )
    KeepOldSnapshots: Optional[int] = Field(
        None,
        description="The number of snapshots to keep beyond the current snapshot.\n",
    )
    LogEntriesForSlowFollowers: Optional[int] = Field(
        None,
        description="The number of log entries to keep around to sync up slow followers\nafter a snapshot is created.\n",
        example=500,
    )
    ElectionTick: Optional[int] = Field(
        None,
        description="The number of ticks that a follower will wait for a message from\nthe leader before becoming a candidate and starting an election.\n`ElectionTick` must be greater than `HeartbeatTick`.\n\nA tick currently defaults to one second, so these translate\ndirectly to seconds currently, but this is NOT guaranteed.\n",
        example=3,
    )
    HeartbeatTick: Optional[int] = Field(
        None,
        description="The number of ticks between heartbeats. Every HeartbeatTick ticks,\nthe leader will send a heartbeat to the followers.\n\nA tick currently defaults to one second, so these translate\ndirectly to seconds currently, but this is NOT guaranteed.\n",
        example=1,
    )


class Dispatcher(BaseModel):
    """
    Dispatcher configuration.
    """

    HeartbeatPeriod: Optional[int] = Field(
        None,
        description="The delay for an agent to send a heartbeat to the dispatcher.\n",
        example=5000000000,
    )


class Protocol(Enum):
    """
        Protocol for communication with the external CA (currently
    only `cfssl` is supported).

    """

    cfssl = "cfssl"


class ExternalCA(BaseModel):
    Protocol: Optional[Protocol] = Field(
        Protocol.cfssl,
        description="Protocol for communication with the external CA (currently\nonly `cfssl` is supported).\n",
    )
    URL: Optional[str] = Field(
        None, description="URL where certificate signing requests should be sent.\n"
    )
    Options: Optional[dict[str, str]] = Field(
        None,
        description="An object with key/value pairs that are interpreted as\nprotocol-specific options for the external CA driver.\n",
    )
    CACert: Optional[str] = Field(
        None,
        description="The root CA certificate (in PEM format) this external CA uses\nto issue TLS certificates (assumed to be to the current swarm\nroot CA certificate if not provided).\n",
    )


class CAConfig(BaseModel):
    """
    CA configuration.
    """

    NodeCertExpiry: Optional[int] = Field(
        None,
        description="The duration node certificates are issued for.",
        example=7776000000000000,
    )
    ExternalCAs: Optional[list[ExternalCA]] = Field(
        None,
        description="Configuration for forwarding signing requests to an external\ncertificate authority.\n",
    )
    SigningCACert: Optional[str] = Field(
        None,
        description="The desired signing CA certificate for all swarm node TLS leaf\ncertificates, in PEM format.\n",
    )
    SigningCAKey: Optional[str] = Field(
        None,
        description="The desired signing CA key for all swarm node TLS leaf certificates,\nin PEM format.\n",
    )
    ForceRotate: Optional[int] = Field(
        None,
        description="An integer whose purpose is to force swarm to generate a new\nsigning CA certificate and key, if none have been specified in\n`SigningCACert` and `SigningCAKey`\n",
    )


class EncryptionConfig(BaseModel):
    """
    Parameters related to encryption-at-rest.
    """

    AutoLockManagers: Optional[bool] = Field(
        None,
        description="If set, generate a key and use it to lock data stored on the\nmanagers.\n",
        example=False,
    )


class LogDriver(BaseModel):
    """
        The log driver to use for tasks created in the orchestrator if
    unspecified by a service.

    Updating this value only affects new tasks. Existing tasks continue
    to use their previously configured log driver until recreated.

    """

    Name: Optional[str] = Field(
        None,
        description="The log driver to use as a default for new tasks.\n",
        example="json-file",
    )
    Options: Optional[dict[str, str]] = Field(
        None,
        description="Driver-specific options for the selectd log driver, specified\nas key/value pairs.\n",
        example={"max-file": "10", "max-size": "100m"},
    )


class TaskDefaults(BaseModel):
    """
    Defaults for creating tasks in this cluster.
    """

    LogDriver: Optional[LogDriver] = Field(
        None,
        description="The log driver to use for tasks created in the orchestrator if\nunspecified by a service.\n\nUpdating this value only affects new tasks. Existing tasks continue\nto use their previously configured log driver until recreated.\n",
    )


class SwarmSpec(BaseModel):
    """
    User modifiable swarm configuration.
    """

    Name: Optional[str] = Field(
        None, description="Name of the swarm.", example="default"
    )
    Labels: Optional[dict[str, str]] = Field(
        None,
        description="User-defined key/value metadata.",
        example={
            "com.example.corp.type": "production",
            "com.example.corp.department": "engineering",
        },
    )
    Orchestration: Optional[Orchestration] = Field(
        None, description="Orchestration configuration."
    )
    Raft: Optional[Raft] = Field(None, description="Raft configuration.")
    Dispatcher: Optional[Dispatcher] = Field(
        None, description="Dispatcher configuration."
    )
    CAConfig: Optional[CAConfig] = Field(None, description="CA configuration.")
    EncryptionConfig: Optional[EncryptionConfig] = Field(
        None, description="Parameters related to encryption-at-rest."
    )
    TaskDefaults: Optional[TaskDefaults] = Field(
        None, description="Defaults for creating tasks in this cluster."
    )


class ClusterInfo(BaseModel):
    """
        ClusterInfo represents information about the swarm as is returned by the
    "/info" endpoint. Join-tokens are not included.

    """

    ID: Optional[str] = Field(
        None, description="The ID of the swarm.", example="abajmipo7b4xz5ip2nrla6b11"
    )
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = Field(
        None,
        description="Date and time at which the swarm was initialised in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2016-08-18T10:44:24.496525531Z",
    )
    UpdatedAt: Optional[str] = Field(
        None,
        description="Date and time at which the swarm was last updated in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2017-08-09T07:09:37.632105588Z",
    )
    Spec: Optional[SwarmSpec] = None
    TLSInfo: Optional[TLSInfo] = None
    RootRotationInProgress: Optional[bool] = Field(
        None,
        description="Whether there is currently a root CA rotation in progress for the swarm\n",
        example=False,
    )
    DataPathPort: Optional[int] = Field(
        4789,
        description="DataPathPort specifies the data path port number for data traffic.\nAcceptable port range is 1024 to 49151.\nIf no port is set or is set to 0, the default port (4789) is used.\n",
        example=4789,
    )
    DefaultAddrPool: Optional[list[str]] = Field(
        None,
        description="Default Address Pool specifies default subnet pools for global scope\nnetworks.\n",
    )
    SubnetSize: Optional[int] = Field(
        24,
        description="SubnetSize specifies the subnet size of the networks created from the\ndefault subnet pool.\n",
        example=24,
        le=29,
    )


class JoinTokens(BaseModel):
    """
    JoinTokens contains the tokens workers and managers need to join the swarm.

    """

    Worker: Optional[str] = Field(
        None,
        description="The token workers can use to join the swarm.\n",
        example="SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-1awxwuwd3z9j1z3puu7rcgdbx",
    )
    Manager: Optional[str] = Field(
        None,
        description="The token managers can use to join the swarm.\n",
        example="SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2",
    )


class Swarm(ClusterInfo):
    JoinTokens: Optional[JoinTokens] = None


class PluginSpec(BaseModel):
    """
        Plugin spec for the service.  *(Experimental release only.)*

    <p><br /></p>

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.

    """

    Name: Optional[str] = Field(
        None, description="The name or 'alias' to use for the plugin."
    )
    Remote: Optional[str] = Field(
        None, description="The plugin image reference to use."
    )
    Disabled: Optional[bool] = Field(
        None, description="Disable the plugin once scheduled."
    )
    PluginPrivilege: Optional[list[PluginPrivilege]] = None


class CredentialSpec(BaseModel):
    """
    CredentialSpec for managed service account (Windows only)
    """

    Config_: Optional[str] = Field(
        None,
        alias="Config",
        description="Load credential spec from a Swarm Config with the given ID.\nThe specified config must also be present in the Configs\nfield with the Runtime property set.\n\n<p><br /></p>\n\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n",
        example="0bt9dmxjvjiqermk6xrop3ekq",
    )
    File: Optional[str] = Field(
        None,
        description="Load credential spec from this file. The file is read by\nthe daemon, and must be present in the `CredentialSpecs`\nsubdirectory in the docker data directory, which defaults\nto `C:\\ProgramData\\Docker\\` on Windows.\n\nFor example, specifying `spec.json` loads\n`C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.\n\n<p><br /></p>\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n",
        example="spec.json",
    )
    Registry: Optional[str] = Field(
        None,
        description="Load credential spec from this value in the Windows\nregistry. The specified registry value must be located in:\n\n`HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`\n\n<p><br /></p>\n\n\n> **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`,\n> and `CredentialSpec.Config` are mutually exclusive.\n",
    )


class SELinuxContext(BaseModel):
    """
    SELinux labels of the container
    """

    Disable: Optional[bool] = Field(None, description="Disable SELinux")
    User: Optional[str] = Field(None, description="SELinux user label")
    Role: Optional[str] = Field(None, description="SELinux role label")
    Type: Optional[str] = Field(None, description="SELinux type label")
    Level: Optional[str] = Field(None, description="SELinux level label")


class Privileges(BaseModel):
    """
    Security options for the container
    """

    CredentialSpec: Optional[CredentialSpec] = Field(
        None, description="CredentialSpec for managed service account (Windows only)"
    )
    SELinuxContext: Optional[SELinuxContext] = Field(
        None, description="SELinux labels of the container"
    )


class DNSConfig(BaseModel):
    """
        Specification for DNS related configurations in resolver configuration
    file (`resolv.conf`).

    """

    Nameservers: Optional[list[str]] = Field(
        None, description="The IP addresses of the name servers."
    )
    Search: Optional[list[str]] = Field(
        None, description="A search list for host-name lookup."
    )
    Options: Optional[list[str]] = Field(
        None,
        description="A list of internal resolver variables to be modified (e.g.,\n`debug`, `ndots:3`, etc.).\n",
    )


class File(BaseModel):
    """
    File represents a specific target that is backed by a file.

    """

    Name: Optional[str] = Field(
        None, description="Name represents the final filename in the filesystem.\n"
    )
    UID: Optional[str] = Field(None, description="UID represents the file UID.")
    GID: Optional[str] = Field(None, description="GID represents the file GID.")
    Mode: Optional[int] = Field(
        None, description="Mode represents the FileMode of the file."
    )


class Secret(BaseModel):
    File: Optional[File] = Field(
        None,
        description="File represents a specific target that is backed by a file.\n",
    )
    SecretID: Optional[str] = Field(
        None,
        description="SecretID represents the ID of the specific secret that we're\nreferencing.\n",
    )
    SecretName: Optional[str] = Field(
        None,
        description="SecretName is the name of the secret that this references,\nbut this is just provided for lookup/display purposes. The\nsecret in the reference will be identified by its ID.\n",
    )


class File1(File):
    """
        File represents a specific target that is backed by a file.

    <p><br /><p>

    > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive

    """

    pass


class Config1(BaseModel):
    File: Optional[File1] = Field(
        None,
        description="File represents a specific target that is backed by a file.\n\n<p><br /><p>\n\n> **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive\n",
    )
    Runtime: Optional[dict[str, Any]] = Field(
        None,
        description="Runtime represents a target that is not mounted into the\ncontainer but is used by the task\n\n<p><br /><p>\n\n> **Note**: `Configs.File` and `Configs.Runtime` are mutually\n> exclusive\n",
    )
    ConfigID: Optional[str] = Field(
        None,
        description="ConfigID represents the ID of the specific config that we're\nreferencing.\n",
    )
    ConfigName: Optional[str] = Field(
        None,
        description="ConfigName is the name of the config that this references,\nbut this is just provided for lookup/display purposes. The\nconfig in the reference will be identified by its ID.\n",
    )


class Ulimit1(Ulimit):
    pass


class ContainerSpec(BaseModel):
    """
        Container spec for the service.

    <p><br /></p>

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.

    """

    Image: Optional[str] = Field(
        None, description="The image name to use for the container"
    )
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value data."
    )
    Command: Optional[list[str]] = Field(
        None, description="The command to be run in the image."
    )
    Args: Optional[list[str]] = Field(None, description="Arguments to the command.")
    Hostname: Optional[str] = Field(
        None,
        description="The hostname to use for the container, as a valid\n[RFC 1123](https://tools.ietf.org/html/rfc1123) hostname.\n",
    )
    Env: Optional[list[str]] = Field(
        None, description="A list of environment variables in the form `VAR=value`.\n"
    )
    Dir: Optional[str] = Field(
        None, description="The working directory for commands to run in."
    )
    User: Optional[str] = Field(None, description="The user inside the container.")
    Groups: Optional[list[str]] = Field(
        None,
        description="A list of additional groups that the container process will run as.\n",
    )
    Privileges: Optional[Privileges] = Field(
        None, description="Security options for the container"
    )
    TTY: Optional[bool] = Field(
        None, description="Whether a pseudo-TTY should be allocated."
    )
    OpenStdin: Optional[bool] = Field(None, description="Open `stdin`")
    ReadOnly: Optional[bool] = Field(
        None, description="Mount the container's root filesystem as read only."
    )
    Mounts: Optional[list[Mount]] = Field(
        None,
        description="Specification for mounts to be added to containers created as part\nof the service.\n",
    )
    StopSignal: Optional[str] = Field(None, description="Signal to stop the container.")
    StopGracePeriod: Optional[int] = Field(
        None,
        description="Amount of time to wait for the container to terminate before\nforcefully killing it.\n",
    )
    HealthCheck: Optional[HealthConfig] = None
    Hosts: Optional[list[str]] = Field(
        None,
        description="A list of hostname/IP mappings to add to the container's `hosts`\nfile. The format of extra hosts is specified in the\n[hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html)\nman page:\n\n    IP_address canonical_hostname [aliases...]\n",
    )
    DNSConfig: Optional[DNSConfig] = Field(
        None,
        description="Specification for DNS related configurations in resolver configuration\nfile (`resolv.conf`).\n",
    )
    Secrets: Optional[list[Secret]] = Field(
        None,
        description="Secrets contains references to zero or more secrets that will be\nexposed to the service.\n",
    )
    Configs: Optional[list[Config1]] = Field(
        None,
        description="Configs contains references to zero or more configs that will be\nexposed to the service.\n",
    )
    Isolation: Optional[Isolation] = Field(
        None,
        description="Isolation technology of the containers running the service.\n(Windows only)\n",
    )
    Init: Optional[bool] = Field(
        None,
        description="Run an init inside the container that forwards signals and reaps\nprocesses. This field is omitted if empty, and the default (as\nconfigured on the daemon) is used.\n",
    )
    Sysctls: Optional[dict[str, str]] = Field(
        None,
        description="Set kernel namedspaced parameters (sysctls) in the container.\nThe Sysctls option on services accepts the same sysctls as the\nare supported on containers. Note that while the same sysctls are\nsupported, no guarantees or checks are made about their\nsuitability for a clustered environment, and it's up to the user\nto determine whether a given sysctl will work properly in a\nService.\n",
    )
    CapabilityAdd: Optional[list[str]] = Field(
        None,
        description="A list of kernel capabilities to add to the default set\nfor the container.\n",
        example=["CAP_NET_RAW", "CAP_SYS_ADMIN", "CAP_SYS_CHROOT", "CAP_SYSLOG"],
    )
    CapabilityDrop: Optional[list[str]] = Field(
        None,
        description="A list of kernel capabilities to drop from the default set\nfor the container.\n",
        example=["CAP_NET_RAW"],
    )
    Ulimits: Optional[list[Ulimit1]] = Field(
        None,
        description='A list of resource limits to set in the container. For example: `{"Name": "nofile", "Soft": 1024, "Hard": 2048}`"\n',
    )


class NetworkAttachmentSpec(BaseModel):
    """
        Read-only spec type for non-swarm containers attached to swarm overlay
    networks.

    <p><br /></p>

    > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are
    > mutually exclusive. PluginSpec is only used when the Runtime field
    > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime
    > field is set to `attachment`.

    """

    ContainerID: Optional[str] = Field(
        None, description="ID of the container represented by this task"
    )


class Condition(Enum):
    """
    Condition for restart.
    """

    none = "none"
    on_failure = "on-failure"
    any = "any"


class RestartPolicy1(BaseModel):
    """
        Specification for the restart policy which applies to containers
    created as part of this service.

    """

    Condition: Optional[Condition] = Field(None, description="Condition for restart.")
    Delay: Optional[int] = Field(None, description="Delay between restart attempts.")
    MaxAttempts: Optional[int] = Field(
        0,
        description="Maximum attempts to restart a given container before giving up\n(default value is 0, which is ignored).\n",
    )
    Window: Optional[int] = Field(
        0,
        description="Windows is the time window used to evaluate the restart policy\n(default value is 0, which is unbounded).\n",
    )


class Spread(BaseModel):
    SpreadDescriptor: Optional[str] = Field(
        None, description="label descriptor, such as `engine.labels.az`.\n"
    )


class Preference(BaseModel):
    Spread: Optional[Spread] = None


class Placement(BaseModel):
    Constraints: Optional[list[str]] = Field(
        None,
        description="An array of constraint expressions to limit the set of nodes where\na task can be scheduled. Constraint expressions can either use a\n_match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find\nnodes that satisfy every expression (AND match). Constraints can\nmatch node or Docker Engine labels as follows:\n\nnode attribute       | matches                        | example\n---------------------|--------------------------------|-----------------------------------------------\n`node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4`\n`node.hostname`      | Node hostname                  | `node.hostname!=node-2`\n`node.role`          | Node role (`manager`/`worker`) | `node.role==manager`\n`node.platform.os`   | Node operating system          | `node.platform.os==windows`\n`node.platform.arch` | Node architecture              | `node.platform.arch==x86_64`\n`node.labels`        | User-defined node labels       | `node.labels.security==high`\n`engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`\n\n`engine.labels` apply to Docker Engine labels like operating system,\ndrivers, etc. Swarm administrators add `node.labels` for operational\npurposes by using the [`node update endpoint`](#operation/NodeUpdate).\n",
        example=[
            "node.hostname!=node3.corp.example.com",
            "node.role!=manager",
            "node.labels.type==production",
            "node.platform.os==linux",
            "node.platform.arch==x86_64",
        ],
    )
    Preferences: Optional[list[Preference]] = Field(
        None,
        description="Preferences provide a way to make the scheduler aware of factors\nsuch as topology. They are provided in order from highest to\nlowest precedence.\n",
        example=[
            {"Spread": {"SpreadDescriptor": "node.labels.datacenter"}},
            {"Spread": {"SpreadDescriptor": "node.labels.rack"}},
        ],
    )
    MaxReplicas: Optional[int] = Field(
        0,
        description="Maximum number of replicas for per node (default value is 0, which\nis unlimited)\n",
    )
    Platforms: Optional[list[Platform]] = Field(
        None,
        description="Platforms stores all the platforms that the service's image can\nrun on. This field is used in the platform filter for scheduling.\nIf empty, then the platform filter is off, meaning there are no\nscheduling restrictions.\n",
    )


class LogDriver1(BaseModel):
    """
        Specifies the log driver to use for tasks created from this spec. If
    not present, the default one for the swarm will be used, finally
    falling back to the engine default if not specified.

    """

    Name: Optional[str] = None
    Options: Optional[dict[str, str]] = None


class TaskState(Enum):
    new = "new"
    allocated = "allocated"
    pending = "pending"
    assigned = "assigned"
    accepted = "accepted"
    preparing = "preparing"
    ready = "ready"
    starting = "starting"
    running = "running"
    complete = "complete"
    shutdown = "shutdown"
    failed = "failed"
    rejected = "rejected"
    remove = "remove"
    orphaned = "orphaned"


class ContainerStatus(BaseModel):
    ContainerID: Optional[str] = None
    PID: Optional[int] = None
    ExitCode: Optional[int] = None


class Status1(BaseModel):
    Timestamp: Optional[str] = None
    State: Optional[TaskState] = None
    Message: Optional[str] = None
    Err: Optional[str] = None
    ContainerStatus: Optional[ContainerStatus] = None


class Replicated(BaseModel):
    Replicas: Optional[int] = None


class ReplicatedJob(BaseModel):
    """
        The mode used for services with a finite number of tasks that run
    to a completed state.

    """

    MaxConcurrent: Optional[int] = Field(
        1, description="The maximum number of replicas to run simultaneously.\n"
    )
    TotalCompletions: Optional[int] = Field(
        None,
        description="The total number of replicas desired to reach the Completed\nstate. If unset, will default to the value of `MaxConcurrent`\n",
    )


class Mode(BaseModel):
    """
    Scheduling mode for the service.
    """

    Replicated: Optional[Replicated] = None
    Global: Optional[dict[str, Any]] = None
    ReplicatedJob: Optional[ReplicatedJob] = Field(
        None,
        description="The mode used for services with a finite number of tasks that run\nto a completed state.\n",
    )
    GlobalJob: Optional[dict[str, Any]] = Field(
        None,
        description="The mode used for services which run a task to the completed state\non each valid node.\n",
    )


class FailureAction(Enum):
    """
        Action to take if an updated task fails to run, or stops running
    during the update.

    """

    continue_ = "continue"
    pause = "pause"
    rollback = "rollback"


class Order(Enum):
    """
        The order of operations when rolling out an updated task. Either
    the old task is shut down before the new task is started, or the
    new task is started before the old task is shut down.

    """

    stop_first = "stop-first"
    start_first = "start-first"


class UpdateConfig(BaseModel):
    """
    Specification for the update strategy of the service.
    """

    Parallelism: Optional[int] = Field(
        None,
        description="Maximum number of tasks to be updated in one iteration (0 means\nunlimited parallelism).\n",
    )
    Delay: Optional[int] = Field(
        None, description="Amount of time between updates, in nanoseconds."
    )
    FailureAction: Optional[FailureAction] = Field(
        None,
        description="Action to take if an updated task fails to run, or stops running\nduring the update.\n",
    )
    Monitor: Optional[int] = Field(
        None,
        description="Amount of time to monitor each updated task for failures, in\nnanoseconds.\n",
    )
    MaxFailureRatio: Optional[float] = Field(
        0,
        description="The fraction of tasks that may fail during an update before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
    )
    Order: Optional[Order] = Field(
        None,
        description="The order of operations when rolling out an updated task. Either\nthe old task is shut down before the new task is started, or the\nnew task is started before the old task is shut down.\n",
    )


class FailureAction1(Enum):
    """
        Action to take if an rolled back task fails to run, or stops
    running during the rollback.

    """

    continue_ = "continue"
    pause = "pause"


class RollbackConfig(BaseModel):
    """
    Specification for the rollback strategy of the service.
    """

    Parallelism: Optional[int] = Field(
        None,
        description="Maximum number of tasks to be rolled back in one iteration (0 means\nunlimited parallelism).\n",
    )
    Delay: Optional[int] = Field(
        None,
        description="Amount of time between rollback iterations, in nanoseconds.\n",
    )
    FailureAction: Optional[FailureAction1] = Field(
        None,
        description="Action to take if an rolled back task fails to run, or stops\nrunning during the rollback.\n",
    )
    Monitor: Optional[int] = Field(
        None,
        description="Amount of time to monitor each rolled back task for failures, in\nnanoseconds.\n",
    )
    MaxFailureRatio: Optional[float] = Field(
        0,
        description="The fraction of tasks that may fail during a rollback before the\nfailure action is invoked, specified as a floating point number\nbetween 0 and 1.\n",
    )
    Order: Optional[Order] = Field(
        None,
        description="The order of operations when rolling back a task. Either the old\ntask is shut down before the new task is started, or the new task\nis started before the old task is shut down.\n",
    )


class PublishMode(Enum):
    """
        The mode in which port is published.

    <p><br /></p>

    - "ingress" makes the target port accessible on every node,
      regardless of whether there is a task for the service running on
      that node or not.
    - "host" bypasses the routing mesh and publish the port directly on
      the swarm node where that service is running.

    """

    ingress = "ingress"
    host = "host"


class EndpointPortConfig(BaseModel):
    Name: Optional[str] = None
    Protocol: Optional[Type] = None
    TargetPort: Optional[int] = Field(
        None, description="The port inside the container."
    )
    PublishedPort: Optional[int] = Field(
        None, description="The port on the swarm hosts."
    )
    PublishMode: Optional[PublishMode] = Field(
        PublishMode.ingress,
        description='The mode in which port is published.\n\n<p><br /></p>\n\n- "ingress" makes the target port accessible on every node,\n  regardless of whether there is a task for the service running on\n  that node or not.\n- "host" bypasses the routing mesh and publish the port directly on\n  the swarm node where that service is running.\n',
        example="ingress",
    )


class Mode1(Enum):
    """
    The mode of resolution to use for internal load balancing between tasks.

    """

    vip = "vip"
    dnsrr = "dnsrr"


class EndpointSpec(BaseModel):
    """
    Properties that can be configured to access and load balance a service.
    """

    Mode: Optional[Mode1] = Field(
        Mode1.vip,
        description="The mode of resolution to use for internal load balancing between tasks.\n",
    )
    Ports: Optional[list[EndpointPortConfig]] = Field(
        None,
        description="List of exposed ports that this service is accessible on from the\noutside. Ports can only be provided if `vip` resolution mode is used.\n",
    )


class VirtualIP(BaseModel):
    NetworkID: Optional[str] = None
    Addr: Optional[str] = None


class Endpoint(BaseModel):
    Spec: Optional[EndpointSpec] = None
    Ports: Optional[list[EndpointPortConfig]] = None
    VirtualIPs: Optional[list[VirtualIP]] = None


class State(Enum):
    updating = "updating"
    paused = "paused"
    completed = "completed"


class UpdateStatus(BaseModel):
    """
    The status of a service update.
    """

    State: Optional[State] = None
    StartedAt: Optional[str] = None
    CompletedAt: Optional[str] = None
    Message: Optional[str] = None


class ServiceStatus(BaseModel):
    """
        The status of the service's tasks. Provided only when requested as
    part of a ServiceList operation.

    """

    RunningTasks: Optional[int] = Field(
        None,
        description="The number of tasks for the service currently in the Running state.\n",
        example=7,
    )
    DesiredTasks: Optional[int] = Field(
        None,
        description="The number of tasks for the service desired to be running.\nFor replicated services, this is the replica count from the\nservice spec. For global services, this is computed by taking\ncount of all tasks for the service with a Desired State other\nthan Shutdown.\n",
        example=10,
    )
    CompletedTasks: Optional[int] = Field(
        None,
        description="The number of tasks for a job that are in the Completed state.\nThis field must be cross-referenced with the service type, as the\nvalue of 0 may mean the service is not in a job mode, or it may\nmean the job-mode service has no tasks yet Completed.\n",
    )


class JobStatus(BaseModel):
    """
        The status of the service when it is in one of ReplicatedJob or
    GlobalJob modes. Absent on Replicated and Global mode services. The
    JobIteration is an ObjectVersion, but unlike the Service's version,
    does not need to be sent with an update request.

    """

    JobIteration: Optional[ObjectVersion] = Field(
        None,
        description='JobIteration is a value increased each time a Job is executed,\nsuccessfully or otherwise. "Executed", in this case, means the\njob as a whole has been started, not that an individual Task has\nbeen launched. A job is "Executed" when its ServiceSpec is\nupdated. JobIteration can be used to disambiguate Tasks belonging\nto different executions of a job.  Though JobIteration will\nincrease with each subsequent execution, it may not necessarily\nincrease by 1, and so JobIteration should not be used to\n',
    )
    LastExecution: Optional[str] = Field(
        None,
        description="The last time, as observed by the server, that this job was\nstarted.\n",
    )


class ImageDeleteResponseItem(BaseModel):
    Untagged: Optional[str] = Field(
        None, description="The image ID of an image that was untagged"
    )
    Deleted: Optional[str] = Field(
        None, description="The image ID of an image that was deleted"
    )


class ServiceUpdateResponse(BaseModel):
    Warnings: Optional[list[str]] = Field(None, description="Optional warning messages")


class HostConfig1(BaseModel):
    NetworkMode: Optional[str] = None


class Driver(BaseModel):
    """
    Driver represents a driver (network, logging, secrets).
    """

    Name: str = Field(..., description="Name of the driver.", example="some-driver")
    Options: Optional[dict[str, str]] = Field(
        None,
        description="Key/value map of driver-specific options.",
        example={
            "OptionA": "value for driver-specific option A",
            "OptionB": "value for driver-specific option B",
        },
    )


class SecretSpec(BaseModel):
    Name: Optional[str] = Field(None, description="User-defined name of the secret.")
    Labels: Optional[dict[str, str]] = Field(
        None,
        description="User-defined key/value metadata.",
        example={
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value",
        },
    )
    Data: Optional[str] = Field(
        None,
        description="Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))\ndata to store as secret.\n\nThis field is only used to _create_ a secret, and is not returned by\nother endpoints.\n",
        example="",
    )
    Driver: Optional[Driver] = Field(
        None,
        description="Name of the secrets driver used to fetch the secret's value from an\nexternal secret store.\n",
    )
    Templating: Optional[Driver] = Field(
        None,
        description="Templating driver, if applicable\n\nTemplating controls whether and how to evaluate the config payload as\na template. If no driver is set, no templating is used.\n",
    )


class Secret1(BaseModel):
    ID: Optional[str] = Field(None, example="blt1owaxmitz71s9v5zh81zun")
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = Field(None, example="2017-07-20T13:55:28.678958722Z")
    UpdatedAt: Optional[str] = Field(None, example="2017-07-20T13:55:28.678958722Z")
    Spec: Optional[SecretSpec] = None


class ConfigSpec(BaseModel):
    Name: Optional[str] = Field(None, description="User-defined name of the config.")
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    Data: Optional[str] = Field(
        None,
        description="Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))\nconfig data.\n",
    )
    Templating: Optional[Driver] = Field(
        None,
        description="Templating driver, if applicable\n\nTemplating controls whether and how to evaluate the config payload as\na template. If no driver is set, no templating is used.\n",
    )


class Config2(BaseModel):
    ID: Optional[str] = None
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = None
    UpdatedAt: Optional[str] = None
    Spec: Optional[ConfigSpec] = None


class Status2(Enum):
    """
        String representation of the container state. Can be one of "created",
    "running", "paused", "restarting", "removing", "exited", or "dead".

    """

    created = "created"
    running = "running"
    paused = "paused"
    restarting = "restarting"
    removing = "removing"
    exited = "exited"
    dead = "dead"


class ContainerWaitExitError(BaseModel):
    """
    container waiting error, if any
    """

    Message: Optional[str] = Field(None, description="Details of an error")


class Platform1(BaseModel):
    Name: str


class Component(BaseModel):
    Name: str = Field(..., description="Name of the component\n", example="Engine")
    Version: str = Field(
        ..., description="Version of the component\n", example="19.03.12"
    )
    Details: Optional[dict[str, Any]] = Field(
        None,
        description="Key/value pairs of strings with additional information about the\ncomponent. These values are intended for informational purposes\nonly, and their content is not defined, and not part of the API\nspecification.\n\nThese messages can be printed by the client as information to the user.\n",
    )


class SystemVersion(BaseModel):
    """
    Response of Engine API: GET "/version"

    """

    Platform: Optional[Platform1] = None
    Components: Optional[list[Component]] = Field(
        None, description="Information about system components\n"
    )
    Version: Optional[str] = Field(
        None, description="The version of the daemon", example="19.03.12"
    )
    ApiVersion: Optional[str] = Field(
        None,
        description="The default (and highest) API version that is supported by the daemon\n",
        example="1.40",
    )
    MinAPIVersion: Optional[str] = Field(
        None,
        description="The minimum API version that is supported by the daemon\n",
        example="1.12",
    )
    GitCommit: Optional[str] = Field(
        None,
        description="The Git commit of the source code that was used to build the daemon\n",
        example="48a66213fe",
    )
    GoVersion: Optional[str] = Field(
        None,
        description="The version Go used to compile the daemon, and the version of the Go\nruntime in use.\n",
        example="go1.13.14",
    )
    Os: Optional[str] = Field(
        None,
        description='The operating system that the daemon is running on ("linux" or "windows")\n',
        example="linux",
    )
    Arch: Optional[str] = Field(
        None,
        description="The architecture that the daemon is running on\n",
        example="amd64",
    )
    KernelVersion: Optional[str] = Field(
        None,
        description="The kernel version (`uname -r`) that the daemon is running on.\n\nThis field is omitted when empty.\n",
        example="4.19.76-linuxkit",
    )
    Experimental: Optional[bool] = Field(
        None,
        description="Indicates if the daemon is started with experimental features enabled.\n\nThis field is omitted when empty / false.\n",
        example=True,
    )
    BuildTime: Optional[str] = Field(
        None,
        description="The date and time that the daemon was compiled.\n",
        example="2020-06-22T15:49:27.000000000+00:00",
    )


class CgroupDriver(Enum):
    """
    The driver to use for managing cgroups.

    """

    cgroupfs = "cgroupfs"
    systemd = "systemd"
    none = "none"


class CgroupVersion(Enum):
    """
    The version of the cgroup.

    """

    field_1 = "1"
    field_2 = "2"


class Isolation2(Enum):
    """
        Represents the isolation technology to use as a default for containers.
    The supported values are platform-specific.

    If no isolation value is specified on daemon start, on Windows client,
    the default is `hyperv`, and on Windows server, the default is `process`.

    This option is currently not used on other platforms.

    """

    default = "default"
    hyperv = "hyperv"
    process = "process"


class DefaultAddressPool(BaseModel):
    Base: Optional[str] = Field(
        None, description="The network address in CIDR format", example="10.10.0.0/16"
    )
    Size: Optional[int] = Field(None, description="The network pool size", example="24")


class PluginsInfo(BaseModel):
    """
        Available plugins per type.

    <p><br /></p>

    > **Note**: Only unmanaged (V1) plugins are included in this list.
    > V1 plugins are "lazily" loaded, and are not returned in this list
    > if there is no resource using the plugin.

    """

    Volume: Optional[list[str]] = Field(
        None,
        description="Names of available volume-drivers, and network-driver plugins.",
        example=["local"],
    )
    Network: Optional[list[str]] = Field(
        None,
        description="Names of available network-drivers, and network-driver plugins.",
        example=["bridge", "host", "ipvlan", "macvlan", "null", "overlay"],
    )
    Authorization: Optional[list[str]] = Field(
        None,
        description="Names of available authorization plugins.",
        example=["img-authz-plugin", "hbm"],
    )
    Log: Optional[list[str]] = Field(
        None,
        description="Names of available logging-drivers, and logging-driver plugins.",
        example=[
            "awslogs",
            "fluentd",
            "gcplogs",
            "gelf",
            "journald",
            "json-file",
            "logentries",
            "splunk",
            "syslog",
        ],
    )


class IndexInfo(BaseModel):
    """
    IndexInfo contains information about a registry.
    """

    Name: Optional[str] = Field(
        None,
        description='Name of the registry, such as "docker.io".\n',
        example="docker.io",
    )
    Mirrors: Optional[list[str]] = Field(
        None,
        description="List of mirrors, expressed as URIs.\n",
        example=[
            "https://hub-mirror.corp.example.com:5000/",
            "https://registry-2.docker.io/",
            "https://registry-3.docker.io/",
        ],
    )
    Secure: Optional[bool] = Field(
        None,
        description="Indicates if the registry is part of the list of insecure\nregistries.\n\nIf `false`, the registry is insecure. Insecure registries accept\nun-encrypted (HTTP) and/or untrusted (HTTPS with certificates from\nunknown CAs) communication.\n\n> **Warning**: Insecure registries can be useful when running a local\n> registry. However, because its use creates security vulnerabilities\n> it should ONLY be enabled for testing purposes. For increased\n> security, users should add their CA to their system's list of\n> trusted CAs instead of enabling this option.\n",
        example=True,
    )
    Official: Optional[bool] = Field(
        None,
        description="Indicates whether this is an official registry (i.e., Docker Hub / docker.io)\n",
        example=True,
    )


class Runtime(BaseModel):
    """
        Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec)
    runtime.

    The runtime is invoked by the daemon via the `containerd` daemon. OCI
    runtimes act as an interface to the Linux kernel namespaces, cgroups,
    and SELinux.

    """

    path: Optional[str] = Field(
        None,
        description="Name and, optional, path, of the OCI executable binary.\n\nIf the path is omitted, the daemon searches the host's `$PATH` for the\nbinary and uses the first result.\n",
        example="/usr/local/bin/my-oci-runtime",
    )
    runtimeArgs: Optional[list[str]] = Field(
        None,
        description="List of command-line arguments to pass to the runtime when invoked.\n",
        example=["--debug", "--systemd-cgroup=false"],
    )


class Commit(BaseModel):
    """
        Commit holds the Git-commit (SHA1) that a binary was built from, as
    reported in the version-string of external tools, such as `containerd`,
    or `runC`.

    """

    ID: Optional[str] = Field(
        None,
        description="Actual commit ID of external tool.",
        example="cfb82a876ecc11b5ca0977d1733adbe58599088a",
    )
    Expected: Optional[str] = Field(
        None,
        description="Commit ID of external tool expected by dockerd as set at build time.\n",
        example="2d41c047c83e09a6d61d464906feb2a2f3c52aa4",
    )


class LocalNodeState(Enum):
    """
    Current local status of this node.
    """

    _ = ""
    inactive = "inactive"
    pending = "pending"
    active = "active"
    error = "error"
    locked = "locked"


class PeerNode(BaseModel):
    """
    Represents a peer-node in the swarm
    """

    NodeID: Optional[str] = Field(
        None, description="Unique identifier of for this node in the swarm."
    )
    Addr: Optional[str] = Field(
        None, description="IP address and ports at which this node can be reached.\n"
    )


class NetworkAttachmentConfig(BaseModel):
    """
    Specifies how a service should be attached to a particular network.

    """

    Target: Optional[str] = Field(
        None,
        description="The target network for attachment. Must be a network name or ID.\n",
    )
    Aliases: Optional[list[str]] = Field(
        None,
        description="Discoverable alternate names for the service on this network.\n",
    )
    DriverOpts: Optional[dict[str, str]] = Field(
        None, description="Driver attachment options for the network target.\n"
    )


class EventActor(BaseModel):
    """
        Actor describes something that generates events, like a container, network,
    or a volume.

    """

    ID: Optional[str] = Field(
        None,
        description="The ID of the object emitting the event",
        example="ede54ee1afda366ab42f824e8a5ffd195155d853ceaec74a927f249ea270c743",
    )
    Attributes: Optional[dict[str, str]] = Field(
        None,
        description="Various key/value attributes of the object, depending on its type.\n",
        example={
            "com.example.some-label": "some-label-value",
            "image": "alpine:latest",
            "name": "my-container",
        },
    )


class Type4(Enum):
    """
    The type of object emitting the event
    """

    builder = "builder"
    config = "config"
    container = "container"
    daemon = "daemon"
    image = "image"
    network = "network"
    node = "node"
    plugin = "plugin"
    secret = "secret"
    service = "service"
    volume = "volume"


class Scope1(Enum):
    """
        Scope of the event. Engine events are `local` scope. Cluster (Swarm)
    events are `swarm` scope.

    """

    local = "local"
    swarm = "swarm"


class SystemEventsResponse(BaseModel):
    """
    EventMessage represents the information an event contains.

    """

    Type: Optional[Type4] = Field(
        None, description="The type of object emitting the event", example="container"
    )
    Action: Optional[str] = Field(
        None, description="The type of event", example="create"
    )
    Actor: Optional[EventActor] = None
    scope: Optional[Scope1] = Field(
        None,
        description="Scope of the event. Engine events are `local` scope. Cluster (Swarm)\nevents are `swarm` scope.\n",
    )
    time: Optional[int] = Field(
        None, description="Timestamp of event", example=1629574695
    )
    timeNano: Optional[int] = Field(
        None,
        description="Timestamp of event, with nanosecond accuracy",
        example=1629574695515050031,
    )


class OCIDescriptor(BaseModel):
    """
        A descriptor struct containing digest, media type, and size, as defined in
    the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).

    """

    mediaType: Optional[str] = Field(
        None,
        description="The media type of the object this schema refers to.\n",
        example="application/vnd.docker.distribution.manifest.v2+json",
    )
    digest: Optional[str] = Field(
        None,
        description="The digest of the targeted content.\n",
        example="sha256:c0537ff6a5218ef531ece93d4984efc99bbf3f7497c0a7726c88e2bb7584dc96",
    )
    size: Optional[int] = Field(
        None, description="The size in bytes of the blob.\n", example=3987495
    )


class OCIPlatform(BaseModel):
    """
        Describes the platform which the image in the manifest runs on, as defined
    in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md).

    """

    architecture: Optional[str] = Field(
        None,
        description="The CPU architecture, for example `amd64` or `ppc64`.\n",
        example="arm",
    )
    os: Optional[str] = Field(
        None,
        description="The operating system, for example `linux` or `windows`.\n",
        example="windows",
    )
    os_version: Optional[str] = Field(
        None,
        alias="os.version",
        description="Optional field specifying the operating system version, for example on\nWindows `10.0.19041.1165`.\n",
        example="10.0.19041.1165",
    )
    os_features: Optional[list[str]] = Field(
        None,
        alias="os.features",
        description="Optional field specifying an array of strings, each listing a required\nOS feature (for example on Windows `win32k`).\n",
        example=["win32k"],
    )
    variant: Optional[str] = Field(
        None,
        description="Optional field specifying a variant of the CPU, for example `v7` to\nspecify ARMv7 when architecture is `arm`.\n",
        example="v7",
    )


class DistributionInspectResponse(BaseModel):
    """
        Describes the result obtained from contacting the registry to retrieve
    image metadata.

    """

    Descriptor: OCIDescriptor
    Platforms: list[OCIPlatform] = Field(
        ..., description="An array containing all platforms supported by the image.\n"
    )


class ResourceObject(BaseModel):
    """
        An object describing the resources which can be advertised by a node and
    requested by a task.

    """

    NanoCPUs: Optional[int] = Field(None, example=4000000000)
    MemoryBytes: Optional[int] = Field(None, example=8272408576)
    GenericResources: Optional[GenericResources] = None


class Health(BaseModel):
    """
    Health stores information about the container's healthcheck results.

    """

    Status: Optional[Status] = Field(
        None,
        description='Status is one of `none`, `starting`, `healthy` or `unhealthy`\n\n- "none"      Indicates there is no healthcheck\n- "starting"  Starting indicates that the container is not yet ready\n- "healthy"   Healthy indicates that the container is running correctly\n- "unhealthy" Unhealthy indicates that the container has a problem\n',
        example="healthy",
    )
    FailingStreak: Optional[int] = Field(
        None,
        description="FailingStreak is the number of consecutive failures",
        example=0,
    )
    Log: Optional[list[HealthcheckResult]] = Field(
        None, description="Log contains the last few results (oldest first)\n"
    )


class HostConfig(Resources):
    """
    Container configuration that depends on the host we are running on
    """

    Binds: Optional[list[str]] = Field(
        None,
        description="A list of volume bindings for this container. Each volume binding\nis a string in one of these forms:\n\n- `host-src:container-dest[:options]` to bind-mount a host path\n  into the container. Both `host-src`, and `container-dest` must\n  be an _absolute_ path.\n- `volume-name:container-dest[:options]` to bind-mount a volume\n  managed by a volume driver into the container. `container-dest`\n  must be an _absolute_ path.\n\n`options` is an optional, comma-delimited list of:\n\n- `nocopy` disables automatic copying of data from the container\n  path to the volume. The `nocopy` flag only applies to named volumes.\n- `[ro|rw]` mounts a volume read-only or read-write, respectively.\n  If omitted or set to `rw`, volumes are mounted read-write.\n- `[z|Z]` applies SELinux labels to allow or deny multiple containers\n  to read and write to the same volume.\n    - `z`: a _shared_ content label is applied to the content. This\n      label indicates that multiple containers can share the volume\n      content, for both reading and writing.\n    - `Z`: a _private unshared_ label is applied to the content.\n      This label indicates that only the current container can use\n      a private volume. Labeling systems such as SELinux require\n      proper labels to be placed on volume content that is mounted\n      into a container. Without a label, the security system can\n      prevent a container's processes from using the content. By\n      default, the labels set by the host operating system are not\n      modified.\n- `[[r]shared|[r]slave|[r]private]` specifies mount\n  [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).\n  This only applies to bind-mounted volumes, not internal volumes\n  or named volumes. Mount propagation requires the source mount\n  point (the location where the source directory is mounted in the\n  host operating system) to have the correct propagation properties.\n  For shared volumes, the source mount point must be set to `shared`.\n  For slave volumes, the mount must be set to either `shared` or\n  `slave`.\n",
    )
    ContainerIDFile: Optional[str] = Field(
        None, description="Path to a file where the container ID is written"
    )
    LogConfig: Optional[LogConfig] = Field(
        None, description="The logging configuration for this container"
    )
    NetworkMode: Optional[str] = Field(
        None,
        description="Network mode to use for this container. Supported standard values\nare: `bridge`, `host`, `none`, and `container:<name|id>`. Any\nother value is taken as a custom network's name to which this\ncontainer should connect to.\n",
    )
    PortBindings: Optional[PortMap] = None
    RestartPolicy: Optional[RestartPolicy] = None
    AutoRemove: Optional[bool] = Field(
        None,
        description="Automatically remove the container when the container's process\nexits. This has no effect if `RestartPolicy` is set.\n",
    )
    VolumeDriver: Optional[str] = Field(
        None, description="Driver that this container uses to mount volumes."
    )
    VolumesFrom: Optional[list[str]] = Field(
        None,
        description="A list of volumes to inherit from another container, specified in\nthe form `<container name>[:<ro|rw>]`.\n",
    )
    Mounts: Optional[list[Mount]] = Field(
        None, description="Specification for mounts to be added to the container.\n"
    )
    CapAdd: Optional[list[str]] = Field(
        None,
        description="A list of kernel capabilities to add to the container. Conflicts\nwith option 'Capabilities'.\n",
    )
    CapDrop: Optional[list[str]] = Field(
        None,
        description="A list of kernel capabilities to drop from the container. Conflicts\nwith option 'Capabilities'.\n",
    )
    CgroupnsMode: Optional[CgroupnsMode] = Field(
        None,
        description='cgroup namespace mode for the container. Possible values are:\n\n- `"private"`: the container runs in its own private cgroup namespace\n- `"host"`: use the host system\'s cgroup namespace\n\nIf not specified, the daemon default is used, which can either be `"private"`\nor `"host"`, depending on daemon version, kernel support and configuration.\n',
    )
    Dns: Optional[list[str]] = Field(
        None, description="A list of DNS servers for the container to use."
    )
    DnsOptions: Optional[list[str]] = Field(None, description="A list of DNS options.")
    DnsSearch: Optional[list[str]] = Field(
        None, description="A list of DNS search domains."
    )
    ExtraHosts: Optional[list[str]] = Field(
        None,
        description='A list of hostnames/IP mappings to add to the container\'s `/etc/hosts`\nfile. Specified in the form `["hostname:IP"]`.\n',
    )
    GroupAdd: Optional[list[str]] = Field(
        None,
        description="A list of additional groups that the container process will run as.\n",
    )
    IpcMode: Optional[str] = Field(
        None,
        description='IPC sharing mode for the container. Possible values are:\n\n- `"none"`: own private IPC namespace, with /dev/shm not mounted\n- `"private"`: own private IPC namespace\n- `"shareable"`: own private IPC namespace, with a possibility to share it with other containers\n- `"container:<name|id>"`: join another (shareable) container\'s IPC namespace\n- `"host"`: use the host system\'s IPC namespace\n\nIf not specified, daemon default is used, which can either be `"private"`\nor `"shareable"`, depending on daemon version and configuration.\n',
    )
    Cgroup: Optional[str] = Field(None, description="Cgroup to use for the container.")
    Links: Optional[list[str]] = Field(
        None,
        description="A list of links for the container in the form `container_name:alias`.\n",
    )
    OomScoreAdj: Optional[int] = Field(
        None,
        description="An integer value containing the score given to the container in\norder to tune OOM killer preferences.\n",
        example=500,
    )
    PidMode: Optional[str] = Field(
        None,
        description='Set the PID (Process) Namespace mode for the container. It can be\neither:\n\n- `"container:<name|id>"`: joins another container\'s PID namespace\n- `"host"`: use the host\'s PID namespace inside the container\n',
    )
    Privileged: Optional[bool] = Field(
        None, description="Gives the container full access to the host."
    )
    PublishAllPorts: Optional[bool] = Field(
        None,
        description="Allocates an ephemeral host port for all of a container's\nexposed ports.\n\nPorts are de-allocated when the container stops and allocated when\nthe container starts. The allocated port might be changed when\nrestarting the container.\n\nThe port is selected from the ephemeral port range that depends on\nthe kernel. For example, on Linux the range is defined by\n`/proc/sys/net/ipv4/ip_local_port_range`.\n",
    )
    ReadonlyRootfs: Optional[bool] = Field(
        None, description="Mount the container's root filesystem as read only."
    )
    SecurityOpt: Optional[list[str]] = Field(
        None,
        description="A list of string values to customize labels for MLS systems, such\nas SELinux.\n",
    )
    StorageOpt: Optional[dict[str, str]] = Field(
        None,
        description='Storage driver options for this container, in the form `{"size": "120G"}`.\n',
    )
    Tmpfs: Optional[dict[str, str]] = Field(
        None,
        description='A map of container directories which should be replaced by tmpfs\nmounts, and their corresponding mount options. For example:\n\n```\n{ "/run": "rw,noexec,nosuid,size=65536k" }\n```\n',
    )
    UTSMode: Optional[str] = Field(
        None, description="UTS namespace to use for the container."
    )
    UsernsMode: Optional[str] = Field(
        None,
        description="Sets the usernamespace mode for the container when usernamespace\nremapping option is enabled.\n",
    )
    ShmSize: Optional[int] = Field(
        None,
        description="Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.\n",
        ge=0,
    )
    Sysctls: Optional[dict[str, str]] = Field(
        None,
        description='A list of kernel parameters (sysctls) to set in the container.\nFor example:\n\n```\n{"net.ipv4.ip_forward": "1"}\n```\n',
    )
    Runtime: Optional[str] = Field(
        None, description="Runtime to use with this container."
    )
    ConsoleSize: Optional[list[ConsoleSizeItem]] = Field(
        None,
        description="Initial console size, as an `[height, width]` array. (Windows only)\n",
        max_items=2,
        min_items=2,
    )
    Isolation: Optional[Isolation] = Field(
        None, description="Isolation technology of the container. (Windows only)\n"
    )
    MaskedPaths: Optional[list[str]] = Field(
        None,
        description="The list of paths to be masked inside the container (this overrides\nthe default set of paths).\n",
    )
    ReadonlyPaths: Optional[list[str]] = Field(
        None,
        description="The list of paths to be set as read-only inside the container\n(this overrides the default set of paths).\n",
    )


class IPAM(BaseModel):
    Driver: Optional[str] = Field(
        "default", description="Name of the IPAM driver to use."
    )
    Config_: Optional[list[IPAMConfig]] = Field(
        None,
        alias="Config",
        description='List of IPAM configuration options, specified as a map:\n\n```\n{"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}\n```\n',
    )
    Options: Optional[dict[str, str]] = Field(
        None, description="Driver-specific options, specified as a map."
    )


class BuildInfo(BaseModel):
    id: Optional[str] = None
    stream: Optional[str] = None
    error: Optional[str] = None
    errorDetail: Optional[ErrorDetail] = None
    status: Optional[str] = None
    progress: Optional[str] = None
    progressDetail: Optional[ProgressDetail] = None
    aux: Optional[ImageID] = None


class CreateImageInfo(BaseModel):
    id: Optional[str] = None
    error: Optional[str] = None
    status: Optional[str] = None
    progress: Optional[str] = None
    progressDetail: Optional[ProgressDetail] = None


class PushImageInfo(BaseModel):
    error: Optional[str] = None
    status: Optional[str] = None
    progress: Optional[str] = None
    progressDetail: Optional[ProgressDetail] = None


class EndpointSettings(BaseModel):
    """
    Configuration for a network endpoint.
    """

    IPAMConfig: Optional[EndpointIPAMConfig] = None
    Links: Optional[list[str]] = Field(None, example=["container_1", "container_2"])
    Aliases: Optional[list[str]] = Field(None, example=["server_x", "server_y"])
    NetworkID: Optional[str] = Field(
        None,
        description="Unique ID of the network.\n",
        example="08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a",
    )
    EndpointID: Optional[str] = Field(
        None,
        description="Unique ID for the service endpoint in a Sandbox.\n",
        example="b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b",
    )
    Gateway: Optional[str] = Field(
        None, description="Gateway address for this network.\n", example="172.17.0.1"
    )
    IPAddress: Optional[str] = Field(
        None, description="IPv4 address.\n", example="172.17.0.4"
    )
    IPPrefixLen: Optional[int] = Field(
        None, description="Mask length of the IPv4 address.\n", example=16
    )
    IPv6Gateway: Optional[str] = Field(
        None, description="IPv6 gateway address.\n", example="2001:db8:2::100"
    )
    GlobalIPv6Address: Optional[str] = Field(
        None, description="Global IPv6 address.\n", example="2001:db8::5689"
    )
    GlobalIPv6PrefixLen: Optional[int] = Field(
        None, description="Mask length of the global IPv6 address.\n", example=64
    )
    MacAddress: Optional[str] = Field(
        None,
        description="MAC address for the endpoint on this network.\n",
        example="02:42:ac:11:00:04",
    )
    DriverOpts: Optional[dict[str, str]] = Field(
        None,
        description="DriverOpts is a mapping of driver options and values. These options\nare passed directly to the driver and are driver specific.\n",
        example={
            "com.example.some-label": "some-value",
            "com.example.some-other-label": "some-other-value",
        },
    )


class NodeDescription(BaseModel):
    """
        NodeDescription encapsulates the properties of the Node as reported by the
    agent.

    """

    Hostname: Optional[str] = Field(None, example="bf3067039e47")
    Platform: Optional[Platform] = None
    Resources: Optional[ResourceObject] = None
    Engine: Optional[EngineDescription] = None
    TLSInfo: Optional[TLSInfo] = None


class NodeStatus(BaseModel):
    """
        NodeStatus represents the status of a node.

    It provides the current status of the node, as seen by the manager.

    """

    State: Optional[NodeState] = None
    Message: Optional[str] = Field(None, example="")
    Addr: Optional[str] = Field(
        None, description="IP address of the node.", example="172.17.0.2"
    )


class ManagerStatus(BaseModel):
    """
        ManagerStatus represents the status of a manager.

    It provides the current status of a node's manager component, if the node
    is a manager.

    """

    Leader: Optional[bool] = Field(False, example=True)
    Reachability: Optional[Reachability] = None
    Addr: Optional[str] = Field(
        None,
        description="The IP address and port at which the manager is reachable.\n",
        example="10.0.0.46:2377",
    )


class Resources1(BaseModel):
    """
        Resource requirements which apply to each individual container created
    as part of the service.

    """

    Limits: Optional[Limit] = Field(None, description="Define resources limits.")
    Reservation: Optional[ResourceObject] = Field(
        None, description="Define resources reservation."
    )


class TaskSpec(BaseModel):
    """
    User modifiable task configuration.
    """

    PluginSpec: Optional[PluginSpec] = Field(
        None,
        description="Plugin spec for the service.  *(Experimental release only.)*\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n",
    )
    ContainerSpec: Optional[ContainerSpec] = Field(
        None,
        description="Container spec for the service.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n",
    )
    NetworkAttachmentSpec: Optional[NetworkAttachmentSpec] = Field(
        None,
        description="Read-only spec type for non-swarm containers attached to swarm overlay\nnetworks.\n\n<p><br /></p>\n\n> **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are\n> mutually exclusive. PluginSpec is only used when the Runtime field\n> is set to `plugin`. NetworkAttachmentSpec is used when the Runtime\n> field is set to `attachment`.\n",
    )
    Resources: Optional[Resources1] = Field(
        None,
        description="Resource requirements which apply to each individual container created\nas part of the service.\n",
    )
    RestartPolicy: Optional[RestartPolicy1] = Field(
        None,
        description="Specification for the restart policy which applies to containers\ncreated as part of this service.\n",
    )
    Placement: Optional[Placement] = None
    ForceUpdate: Optional[int] = Field(
        None,
        description="A counter that triggers an update even if no relevant parameters have\nbeen changed.\n",
    )
    Runtime: Optional[str] = Field(
        None,
        description="Runtime is the type of runtime specified for the task executor.\n",
    )
    Networks: Optional[list[NetworkAttachmentConfig]] = Field(
        None, description="Specifies which networks the service should attach to."
    )
    LogDriver: Optional[LogDriver1] = Field(
        None,
        description="Specifies the log driver to use for tasks created from this spec. If\nnot present, the default one for the swarm will be used, finally\nfalling back to the engine default if not specified.\n",
    )


class Task(BaseModel):
    ID: Optional[str] = Field(None, description="The ID of the task.")
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = None
    UpdatedAt: Optional[str] = None
    Name: Optional[str] = Field(None, description="Name of the task.")
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    Spec: Optional[TaskSpec] = None
    ServiceID: Optional[str] = Field(
        None, description="The ID of the service this task is part of."
    )
    Slot: Optional[int] = None
    NodeID: Optional[str] = Field(
        None, description="The ID of the node that this task is on."
    )
    AssignedGenericResources: Optional[GenericResources] = None
    Status: Optional[Status1] = None
    DesiredState: Optional[TaskState] = None
    JobIteration: Optional[ObjectVersion] = Field(
        None,
        description="If the Service this Task belongs to is a job-mode service, contains\nthe JobIteration of the Service this Task was created for. Absent if\nthe Task was created for a Replicated or Global Service.\n",
    )


class ServiceSpec(BaseModel):
    """
    User modifiable configuration for a service.
    """

    Name: Optional[str] = Field(None, description="Name of the service.")
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    TaskTemplate: Optional[TaskSpec] = None
    Mode: Optional[Mode] = Field(None, description="Scheduling mode for the service.")
    UpdateConfig: Optional[UpdateConfig] = Field(
        None, description="Specification for the update strategy of the service."
    )
    RollbackConfig: Optional[RollbackConfig] = Field(
        None, description="Specification for the rollback strategy of the service."
    )
    Networks: Optional[list[NetworkAttachmentConfig]] = Field(
        None, description="Specifies which networks the service should attach to."
    )
    EndpointSpec: Optional[EndpointSpec] = None


class Service(BaseModel):
    ID: Optional[str] = None
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = None
    UpdatedAt: Optional[str] = None
    Spec: Optional[ServiceSpec] = None
    Endpoint: Optional[Endpoint] = None
    UpdateStatus: Optional[UpdateStatus] = Field(
        None, description="The status of a service update."
    )
    ServiceStatus: Optional[ServiceStatus] = Field(
        None,
        description="The status of the service's tasks. Provided only when requested as\npart of a ServiceList operation.\n",
    )
    JobStatus: Optional[JobStatus] = Field(
        None,
        description="The status of the service when it is in one of ReplicatedJob or\nGlobalJob modes. Absent on Replicated and Global mode services. The\nJobIteration is an ObjectVersion, but unlike the Service's version,\ndoes not need to be sent with an update request.\n",
    )


class NetworkSettings1(BaseModel):
    """
    A summary of the container's network settings
    """

    Networks: Optional[dict[str, EndpointSettings]] = None


class ContainerSummary(BaseModel):
    Id: Optional[str] = Field(None, description="The ID of this container")
    Names: Optional[list[str]] = Field(
        None, description="The names that this container has been given"
    )
    Image: Optional[str] = Field(
        None, description="The name of the image used when creating this container"
    )
    ImageID: Optional[str] = Field(
        None, description="The ID of the image that this container was created from"
    )
    Command: Optional[str] = Field(
        None, description="Command to run when starting the container"
    )
    Created: Optional[int] = Field(None, description="When the container was created")
    Ports: Optional[list[Port]] = Field(
        None, description="The ports exposed by this container"
    )
    SizeRw: Optional[int] = Field(
        None,
        description="The size of files that have been created or changed by this container",
    )
    SizeRootFs: Optional[int] = Field(
        None, description="The total size of all the files in this container"
    )
    Labels: Optional[dict[str, str]] = Field(
        None, description="User-defined key/value metadata."
    )
    State: Optional[str] = Field(
        None, description="The state of this container (e.g. `Exited`)"
    )
    Status: Optional[str] = Field(
        None,
        description="Additional human-readable status of this container (e.g. `Exit 0`)",
    )
    HostConfig: Optional[HostConfig1] = None
    NetworkSettings: Optional[NetworkSettings1] = Field(
        None, description="A summary of the container's network settings"
    )
    Mounts: Optional[list[MountPoint]] = None


class ContainerState(BaseModel):
    """
        ContainerState stores container's running state. It's part of ContainerJSONBase
    and will be returned by the "inspect" command.

    """

    Status: Optional[Status2] = Field(
        None,
        description='String representation of the container state. Can be one of "created",\n"running", "paused", "restarting", "removing", "exited", or "dead".\n',
        example="running",
    )
    Running: Optional[bool] = Field(
        None,
        description='Whether this container is running.\n\nNote that a running container can be _paused_. The `Running` and `Paused`\nbooleans are not mutually exclusive:\n\nWhen pausing a container (on Linux), the freezer cgroup is used to suspend\nall processes in the container. Freezing the process requires the process to\nbe running. As a result, paused containers are both `Running` _and_ `Paused`.\n\nUse the `Status` field instead to determine if a container\'s state is "running".\n',
        example=True,
    )
    Paused: Optional[bool] = Field(
        None, description="Whether this container is paused.", example=False
    )
    Restarting: Optional[bool] = Field(
        None, description="Whether this container is restarting.", example=False
    )
    OOMKilled: Optional[bool] = Field(
        None,
        description="Whether this container has been killed because it ran out of memory.\n",
        example=False,
    )
    Dead: Optional[bool] = Field(None, example=False)
    Pid: Optional[int] = Field(
        None, description="The process ID of this container", example=1234
    )
    ExitCode: Optional[int] = Field(
        None, description="The last exit code of this container", example=0
    )
    Error: Optional[str] = None
    StartedAt: Optional[str] = Field(
        None,
        description="The time when this container was last started.",
        example="2020-01-06T09:06:59.461876391Z",
    )
    FinishedAt: Optional[str] = Field(
        None,
        description="The time when this container last exited.",
        example="2020-01-06T09:07:59.461876391Z",
    )
    Health: Optional[Health] = None


class ContainerWaitResponse(BaseModel):
    """
    OK response to ContainerWait operation
    """

    StatusCode: int = Field(..., description="Exit code of the container")
    Error: ContainerWaitExitError


class RegistryServiceConfig(BaseModel):
    """
    RegistryServiceConfig stores daemon registry services configuration.

    """

    AllowNondistributableArtifactsCIDRs: Optional[list[str]] = Field(
        None,
        description="List of IP ranges to which nondistributable artifacts can be pushed,\nusing the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).\n\nSome images (for example, Windows base images) contain artifacts\nwhose distribution is restricted by license. When these images are\npushed to a registry, restricted artifacts are not included.\n\nThis configuration override this behavior, and enables the daemon to\npush nondistributable artifacts to all registries whose resolved IP\naddress is within the subnet described by the CIDR syntax.\n\nThis option is useful when pushing images containing\nnondistributable artifacts to a registry on an air-gapped network so\nhosts on that network can pull the images without connecting to\nanother server.\n\n> **Warning**: Nondistributable artifacts typically have restrictions\n> on how and where they can be distributed and shared. Only use this\n> feature to push artifacts to private registries and ensure that you\n> are in compliance with any terms that cover redistributing\n> nondistributable artifacts.\n",
        example=["::1/128", "127.0.0.0/8"],
    )
    AllowNondistributableArtifactsHostnames: Optional[list[str]] = Field(
        None,
        description="List of registry hostnames to which nondistributable artifacts can be\npushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.\n\nSome images (for example, Windows base images) contain artifacts\nwhose distribution is restricted by license. When these images are\npushed to a registry, restricted artifacts are not included.\n\nThis configuration override this behavior for the specified\nregistries.\n\nThis option is useful when pushing images containing\nnondistributable artifacts to a registry on an air-gapped network so\nhosts on that network can pull the images without connecting to\nanother server.\n\n> **Warning**: Nondistributable artifacts typically have restrictions\n> on how and where they can be distributed and shared. Only use this\n> feature to push artifacts to private registries and ensure that you\n> are in compliance with any terms that cover redistributing\n> nondistributable artifacts.\n",
        example=[
            "registry.internal.corp.example.com:3000",
            "[2001:db8:a0b:12f0::1]:443",
        ],
    )
    InsecureRegistryCIDRs: Optional[list[str]] = Field(
        None,
        description="List of IP ranges of insecure registries, using the CIDR syntax\n([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries\naccept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates\nfrom unknown CAs) communication.\n\nBy default, local registries (`127.0.0.0/8`) are configured as\ninsecure. All other registries are secure. Communicating with an\ninsecure registry is not possible if the daemon assumes that registry\nis secure.\n\nThis configuration override this behavior, insecure communication with\nregistries whose resolved IP address is within the subnet described by\nthe CIDR syntax.\n\nRegistries can also be marked insecure by hostname. Those registries\nare listed under `IndexConfigs` and have their `Secure` field set to\n`false`.\n\n> **Warning**: Using this option can be useful when running a local\n> registry, but introduces security vulnerabilities. This option\n> should therefore ONLY be used for testing purposes. For increased\n> security, users should add their CA to their system's list of trusted\n> CAs instead of enabling this option.\n",
        example=["::1/128", "127.0.0.0/8"],
    )
    IndexConfigs: Optional[dict[str, IndexInfo]] = Field(
        None,
        example={
            "127.0.0.1:5000": {
                "Name": "127.0.0.1:5000",
                "Mirrors": [],
                "Secure": False,
                "Official": False,
            },
            "[2001:db8:a0b:12f0::1]:80": {
                "Name": "[2001:db8:a0b:12f0::1]:80",
                "Mirrors": [],
                "Secure": False,
                "Official": False,
            },
            "docker.io": {
                "Name": "docker.io",
                "Mirrors": ["https://hub-mirror.corp.example.com:5000/"],
                "Secure": True,
                "Official": True,
            },
            "registry.internal.corp.example.com:3000": {
                "Name": "registry.internal.corp.example.com:3000",
                "Mirrors": [],
                "Secure": False,
                "Official": False,
            },
        },
    )
    Mirrors: Optional[list[str]] = Field(
        None,
        description="List of registry URLs that act as a mirror for the official\n(`docker.io`) registry.\n",
        example=[
            "https://hub-mirror.corp.example.com:5000/",
            "https://[2001:db8:a0b:12f0::1]/",
        ],
    )


class SwarmInfo(BaseModel):
    """
    Represents generic information about swarm.

    """

    NodeID: Optional[str] = Field(
        "",
        description="Unique identifier of for this node in the swarm.",
        example="k67qz4598weg5unwwffg6z1m1",
    )
    NodeAddr: Optional[str] = Field(
        "",
        description="IP address at which this node can be reached by other nodes in the\nswarm.\n",
        example="10.0.0.46",
    )
    LocalNodeState: Optional[LocalNodeState] = None
    ControlAvailable: Optional[bool] = Field(False, example=True)
    Error: Optional[str] = ""
    RemoteManagers: Optional[list[PeerNode]] = Field(
        None,
        description="List of ID's and addresses of other managers in the swarm.\n",
        example=[
            {"NodeID": "71izy0goik036k48jg985xnds", "Addr": "10.0.0.158:2377"},
            {"NodeID": "79y6h1o4gv8n120drcprv5nmc", "Addr": "10.0.0.159:2377"},
            {"NodeID": "k67qz4598weg5unwwffg6z1m1", "Addr": "10.0.0.46:2377"},
        ],
    )
    Nodes: Optional[int] = Field(
        None, description="Total number of nodes in the swarm.", example=4
    )
    Managers: Optional[int] = Field(
        None, description="Total number of managers in the swarm.", example=3
    )
    Cluster: Optional[ClusterInfo] = None


class NetworkingConfig(BaseModel):
    """
        NetworkingConfig represents the container's networking configuration for
    each of its interfaces.
    It is used for the networking configs specified in the `docker create`
    and `docker network connect` commands.

    """

    EndpointsConfig: Optional[dict[str, EndpointSettings]] = Field(
        None,
        description="A mapping of network name to endpoint configuration for that network.\n",
    )


class NetworkSettings(BaseModel):
    """
    NetworkSettings exposes the network settings in the API
    """

    Bridge: Optional[str] = Field(
        None,
        description="Name of the network'a bridge (for example, `docker0`).",
        example="docker0",
    )
    SandboxID: Optional[str] = Field(
        None,
        description="SandboxID uniquely represents a container's network stack.",
        example="9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3",
    )
    HairpinMode: Optional[bool] = Field(
        None,
        description="Indicates if hairpin NAT should be enabled on the virtual interface.\n",
        example=False,
    )
    LinkLocalIPv6Address: Optional[str] = Field(
        None,
        description="IPv6 unicast address using the link-local prefix.",
        example="fe80::42:acff:fe11:1",
    )
    LinkLocalIPv6PrefixLen: Optional[int] = Field(
        None, description="Prefix length of the IPv6 unicast address.", example="64"
    )
    Ports: Optional[PortMap] = None
    SandboxKey: Optional[str] = Field(
        None,
        description="SandboxKey identifies the sandbox",
        example="/var/run/docker/netns/8ab54b426c38",
    )
    SecondaryIPAddresses: Optional[list[Address]] = Field(None, description="")
    SecondaryIPv6Addresses: Optional[list[Address]] = Field(None, description="")
    EndpointID: Optional[str] = Field(
        None,
        description='EndpointID uniquely represents a service endpoint in a Sandbox.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b",
    )
    Gateway: Optional[str] = Field(
        None,
        description='Gateway address for the default "bridge" network.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="172.17.0.1",
    )
    GlobalIPv6Address: Optional[str] = Field(
        None,
        description='Global IPv6 address for the default "bridge" network.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="2001:db8::5689",
    )
    GlobalIPv6PrefixLen: Optional[int] = Field(
        None,
        description='Mask length of the global IPv6 address.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example=64,
    )
    IPAddress: Optional[str] = Field(
        None,
        description='IPv4 address for the default "bridge" network.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="172.17.0.4",
    )
    IPPrefixLen: Optional[int] = Field(
        None,
        description='Mask length of the IPv4 address.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example=16,
    )
    IPv6Gateway: Optional[str] = Field(
        None,
        description='IPv6 gateway address for this network.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="2001:db8:2::100",
    )
    MacAddress: Optional[str] = Field(
        None,
        description='MAC address for the container on the default "bridge" network.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when attached to the\n> default "bridge" network. Use the information from the "bridge"\n> network inside the `Networks` map instead, which contains the same\n> information. This field was deprecated in Docker 1.9 and is scheduled\n> to be removed in Docker 17.12.0\n',
        example="02:42:ac:11:00:04",
    )
    Networks: Optional[dict[str, EndpointSettings]] = Field(
        None,
        description="Information about all networks that the container is connected to.\n",
    )


class Network(BaseModel):
    Name: Optional[str] = None
    Id: Optional[str] = None
    Created: Optional[str] = None
    Scope: Optional[str] = None
    Driver: Optional[str] = None
    EnableIPv6: Optional[bool] = None
    IPAM: Optional[IPAM] = None
    Internal: Optional[bool] = None
    Attachable: Optional[bool] = None
    Ingress: Optional[bool] = None
    Containers: Optional[dict[str, NetworkContainer]] = None
    Options: Optional[dict[str, str]] = None
    Labels: Optional[dict[str, str]] = None


class Node(BaseModel):
    ID: Optional[str] = Field(None, example="24ifsmvkjbyhk")
    Version: Optional[ObjectVersion] = None
    CreatedAt: Optional[str] = Field(
        None,
        description="Date and time at which the node was added to the swarm in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2016-08-18T10:44:24.496525531Z",
    )
    UpdatedAt: Optional[str] = Field(
        None,
        description="Date and time at which the node was last updated in\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.\n",
        example="2017-08-09T07:09:37.632105588Z",
    )
    Spec: Optional[NodeSpec] = None
    Description: Optional[NodeDescription] = None
    Status: Optional[NodeStatus] = None
    ManagerStatus: Optional[ManagerStatus] = None


class SystemInfo(BaseModel):
    ID: Optional[str] = Field(
        None,
        description="Unique identifier of the daemon.\n\n<p><br /></p>\n\n> **Note**: The format of the ID itself is not part of the API, and\n> should not be considered stable.\n",
        example="7TRN:IPZB:QYBB:VPBQ:UMPP:KARE:6ZNR:XE6T:7EWV:PKF4:ZOJD:TPYS",
    )
    Containers: Optional[int] = Field(
        None, description="Total number of containers on the host.", example=14
    )
    ContainersRunning: Optional[int] = Field(
        None, description='Number of containers with status `"running"`.\n', example=3
    )
    ContainersPaused: Optional[int] = Field(
        None, description='Number of containers with status `"paused"`.\n', example=1
    )
    ContainersStopped: Optional[int] = Field(
        None, description='Number of containers with status `"stopped"`.\n', example=10
    )
    Images: Optional[int] = Field(
        None,
        description="Total number of images on the host.\n\nBoth _tagged_ and _untagged_ (dangling) images are counted.\n",
        example=508,
    )
    Driver: Optional[str] = Field(
        None, description="Name of the storage driver in use.", example="overlay2"
    )
    DriverStatus: Optional[list[list[str]]] = Field(
        None,
        description='Information specific to the storage driver, provided as\n"label" / "value" pairs.\n\nThis information is provided by the storage driver, and formatted\nin a way consistent with the output of `docker info` on the command\nline.\n\n<p><br /></p>\n\n> **Note**: The information returned in this field, including the\n> formatting of values and labels, should not be considered stable,\n> and may change without notice.\n',
        example=[
            ["Backing Filesystem", "extfs"],
            ["Supports d_type", "true"],
            ["Native Overlay Diff", "true"],
        ],
    )
    DockerRootDir: Optional[str] = Field(
        None,
        description="Root directory of persistent Docker state.\n\nDefaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker`\non Windows.\n",
        example="/var/lib/docker",
    )
    Plugins: Optional[PluginsInfo] = None
    MemoryLimit: Optional[bool] = Field(
        None,
        description="Indicates if the host has memory limit support enabled.",
        example=True,
    )
    SwapLimit: Optional[bool] = Field(
        None,
        description="Indicates if the host has memory swap limit support enabled.",
        example=True,
    )
    KernelMemory: Optional[bool] = Field(
        None,
        description="Indicates if the host has kernel memory limit support enabled.\n\n<p><br /></p>\n\n> **Deprecated**: This field is deprecated as the kernel 5.4 deprecated\n> `kmem.limit_in_bytes`.\n",
        example=True,
    )
    KernelMemoryTCP: Optional[bool] = Field(
        None,
        description="Indicates if the host has kernel memory TCP limit support enabled.\n\nKernel memory TCP limits are not supported when using cgroups v2, which\ndoes not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup.\n",
        example=True,
    )
    CpuCfsPeriod: Optional[bool] = Field(
        None,
        description="Indicates if CPU CFS(Completely Fair Scheduler) period is supported by\nthe host.\n",
        example=True,
    )
    CpuCfsQuota: Optional[bool] = Field(
        None,
        description="Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by\nthe host.\n",
        example=True,
    )
    CPUShares: Optional[bool] = Field(
        None,
        description="Indicates if CPU Shares limiting is supported by the host.\n",
        example=True,
    )
    CPUSet: Optional[bool] = Field(
        None,
        description="Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.\n\nSee [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)\n",
        example=True,
    )
    PidsLimit: Optional[bool] = Field(
        None,
        description="Indicates if the host kernel has PID limit support enabled.",
        example=True,
    )
    OomKillDisable: Optional[bool] = Field(
        None, description="Indicates if OOM killer disable is supported on the host."
    )
    IPv4Forwarding: Optional[bool] = Field(
        None, description="Indicates IPv4 forwarding is enabled.", example=True
    )
    BridgeNfIptables: Optional[bool] = Field(
        None,
        description="Indicates if `bridge-nf-call-iptables` is available on the host.",
        example=True,
    )
    BridgeNfIp6tables: Optional[bool] = Field(
        None,
        description="Indicates if `bridge-nf-call-ip6tables` is available on the host.",
        example=True,
    )
    Debug: Optional[bool] = Field(
        None,
        description="Indicates if the daemon is running in debug-mode / with debug-level\nlogging enabled.\n",
        example=True,
    )
    NFd: Optional[int] = Field(
        None,
        description="The total number of file Descriptors in use by the daemon process.\n\nThis information is only returned if debug-mode is enabled.\n",
        example=64,
    )
    NGoroutines: Optional[int] = Field(
        None,
        description="The  number of goroutines that currently exist.\n\nThis information is only returned if debug-mode is enabled.\n",
        example=174,
    )
    SystemTime: Optional[str] = Field(
        None,
        description="Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt)\nformat with nano-seconds.\n",
        example="2017-08-08T20:28:29.06202363Z",
    )
    LoggingDriver: Optional[str] = Field(
        None, description="The logging driver to use as a default for new containers.\n"
    )
    CgroupDriver: Optional[CgroupDriver] = Field(
        CgroupDriver.cgroupfs,
        description="The driver to use for managing cgroups.\n",
        example="cgroupfs",
    )
    CgroupVersion: Optional[CgroupVersion] = Field(
        CgroupVersion.field_1, description="The version of the cgroup.\n", example="1"
    )
    NEventsListener: Optional[int] = Field(
        None, description="Number of event listeners subscribed.", example=30
    )
    KernelVersion: Optional[str] = Field(
        None,
        description='Kernel version of the host.\n\nOn Linux, this information obtained from `uname`. On Windows this\ninformation is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd>\nregistry value, for example _"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)"_.\n',
        example="4.9.38-moby",
    )
    OperatingSystem: Optional[str] = Field(
        None,
        description='Name of the host\'s operating system, for example: "Ubuntu 16.04.2 LTS"\nor "Windows Server 2016 Datacenter"\n',
        example="Alpine Linux v3.5",
    )
    OSVersion: Optional[str] = Field(
        None,
        description="Version of the host's operating system\n\n<p><br /></p>\n\n> **Note**: The information returned in this field, including its\n> very existence, and the formatting of values, should not be considered\n> stable, and may change without notice.\n",
        example="16.04",
    )
    OSType: Optional[str] = Field(
        None,
        description='Generic type of the operating system of the host, as returned by the\nGo runtime (`GOOS`).\n\nCurrently returned values are "linux" and "windows". A full list of\npossible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).\n',
        example="linux",
    )
    Architecture: Optional[str] = Field(
        None,
        description="Hardware architecture of the host, as returned by the Go runtime\n(`GOARCH`).\n\nA full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).\n",
        example="x86_64",
    )
    NCPU: Optional[int] = Field(
        None,
        description="The number of logical CPUs usable by the daemon.\n\nThe number of available CPUs is checked by querying the operating\nsystem when the daemon starts. Changes to operating system CPU\nallocation after the daemon is started are not reflected.\n",
        example=4,
    )
    MemTotal: Optional[int] = Field(
        None,
        description="Total amount of physical memory available on the host, in bytes.\n",
        example=2095882240,
    )
    IndexServerAddress: Optional[str] = Field(
        "https://index.docker.io/v1/",
        description="Address / URL of the index server that is used for image search,\nand as a default for user authentication for Docker Hub and Docker Cloud.\n",
        example="https://index.docker.io/v1/",
    )
    RegistryConfig: Optional[RegistryServiceConfig] = None
    GenericResources: Optional[GenericResources] = None
    HttpProxy: Optional[str] = Field(
        None,
        description="HTTP-proxy configured for the daemon. This value is obtained from the\n[`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.\nCredentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL\nare masked in the API response.\n\nContainers do not automatically inherit this configuration.\n",
        example="http://xxxxx:xxxxx@proxy.corp.example.com:8080",
    )
    HttpsProxy: Optional[str] = Field(
        None,
        description="HTTPS-proxy configured for the daemon. This value is obtained from the\n[`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.\nCredentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL\nare masked in the API response.\n\nContainers do not automatically inherit this configuration.\n",
        example="https://xxxxx:xxxxx@proxy.corp.example.com:4443",
    )
    NoProxy: Optional[str] = Field(
        None,
        description="Comma-separated list of domain extensions for which no proxy should be\nused. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html)\nenvironment variable.\n\nContainers do not automatically inherit this configuration.\n",
        example="*.local, 169.254/16",
    )
    Name: Optional[str] = Field(
        None, description="Hostname of the host.", example="node5.corp.example.com"
    )
    Labels: Optional[list[str]] = Field(
        None,
        description="User-defined labels (key/value metadata) as set on the daemon.\n\n<p><br /></p>\n\n> **Note**: When part of a Swarm, nodes can both have _daemon_ labels,\n> set through the daemon configuration, and _node_ labels, set from a\n> manager node in the Swarm. Node labels are not included in this\n> field. Node labels can be retrieved using the `/nodes/(id)` endpoint\n> on a manager node in the Swarm.\n",
        example=["storage=ssd", "production"],
    )
    ExperimentalBuild: Optional[bool] = Field(
        None,
        description="Indicates if experimental features are enabled on the daemon.\n",
        example=True,
    )
    ServerVersion: Optional[str] = Field(
        None,
        description="Version string of the daemon.\n\n> **Note**: the [standalone Swarm API](/swarm/swarm-api/)\n> returns the Swarm version instead of the daemon  version, for example\n> `swarm/1.2.8`.\n",
        example="17.06.0-ce",
    )
    ClusterStore: Optional[str] = Field(
        None,
        description="URL of the distributed storage backend.\n\n\nThe storage backend is used for multihost networking (to store\nnetwork and endpoint information) and by the node discovery mechanism.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when using standalone Swarm\n> mode, and overlay networking using an external k/v store. Overlay\n> networks with Swarm mode enabled use the built-in raft store, and\n> this field will be empty.\n",
        example="consul://consul.corp.example.com:8600/some/path",
    )
    ClusterAdvertise: Optional[str] = Field(
        None,
        description="The network endpoint that the Engine advertises for the purpose of\nnode discovery. ClusterAdvertise is a `host:port` combination on which\nthe daemon is reachable by other hosts.\n\n<p><br /></p>\n\n> **Deprecated**: This field is only propagated when using standalone Swarm\n> mode, and overlay networking using an external k/v store. Overlay\n> networks with Swarm mode enabled use the built-in raft store, and\n> this field will be empty.\n",
        example="node5.corp.example.com:8000",
    )
    Runtimes: Optional[dict[str, Runtime]] = Field(
        {"runc": {"path": "runc"}},
        description='List of [OCI compliant](https://github.com/opencontainers/runtime-spec)\nruntimes configured on the daemon. Keys hold the "name" used to\nreference the runtime.\n\nThe Docker daemon relies on an OCI compliant runtime (invoked via the\n`containerd` daemon) as its interface to the Linux kernel namespaces,\ncgroups, and SELinux.\n\nThe default runtime is `runc`, and automatically configured. Additional\nruntimes can be configured by the user and will be listed here.\n',
        example={
            "runc": {"path": "runc"},
            "runc-master": {"path": "/go/bin/runc"},
            "custom": {
                "path": "/usr/local/bin/my-oci-runtime",
                "runtimeArgs": ["--debug", "--systemd-cgroup=false"],
            },
        },
    )
    DefaultRuntime: Optional[str] = Field(
        "runc",
        description="Name of the default OCI runtime that is used when starting containers.\n\nThe default can be overridden per-container at create time.\n",
        example="runc",
    )
    Swarm: Optional[SwarmInfo] = None
    LiveRestoreEnabled: Optional[bool] = Field(
        False,
        description="Indicates if live restore is enabled.\n\nIf enabled, containers are kept running when the daemon is shutdown\nor upon daemon start if running containers are detected.\n",
        example=False,
    )
    Isolation: Optional[Isolation2] = Field(
        Isolation2.default,
        description="Represents the isolation technology to use as a default for containers.\nThe supported values are platform-specific.\n\nIf no isolation value is specified on daemon start, on Windows client,\nthe default is `hyperv`, and on Windows server, the default is `process`.\n\nThis option is currently not used on other platforms.\n",
    )
    InitBinary: Optional[str] = Field(
        None,
        description="Name and, optional, path of the `docker-init` binary.\n\nIf the path is omitted, the daemon searches the host's `$PATH` for the\nbinary and uses the first result.\n",
        example="docker-init",
    )
    ContainerdCommit: Optional[Commit] = None
    RuncCommit: Optional[Commit] = None
    InitCommit: Optional[Commit] = None
    SecurityOptions: Optional[list[str]] = Field(
        None,
        description="List of security features that are enabled on the daemon, such as\napparmor, seccomp, SELinux, user-namespaces (userns), and rootless.\n\nAdditional configuration options for each security feature may\nbe present, and are included as a comma-separated list of key/value\npairs.\n",
        example=[
            "name=apparmor",
            "name=seccomp,profile=default",
            "name=selinux",
            "name=userns",
            "name=rootless",
        ],
    )
    ProductLicense: Optional[str] = Field(
        None,
        description="Reports a summary of the product license on the daemon.\n\nIf a commercial license has been applied to the daemon, information\nsuch as number of nodes, and expiration are included.\n",
        example="Community Engine",
    )
    DefaultAddressPools: Optional[list[DefaultAddressPool]] = Field(
        None,
        description='List of custom default address pools for local networks, which can be\nspecified in the daemon.json file or dockerd option.\n\nExample: a Base "10.10.0.0/16" with Size 24 will define the set of 256\n10.10.[0-255].0/24 address pools.\n',
    )
    Warnings: Optional[list[str]] = Field(
        None,
        description="List of warnings / informational messages about missing features, or\nissues related to the daemon configuration.\n\nThese messages can be printed by the client as information to the user.\n",
        example=[
            "WARNING: No memory limit support",
            "WARNING: bridge-nf-call-iptables is disabled",
            "WARNING: bridge-nf-call-ip6tables is disabled",
        ],
    )
